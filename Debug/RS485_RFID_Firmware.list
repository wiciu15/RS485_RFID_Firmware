
RS485_RFID_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005870  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a7c  08005a7c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005a7c  08005a7c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a7c  08005a7c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fb4  20000078  08005afc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000402c  08005afc  0002402c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148e9  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003018  00000000  00000000  0003498a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  000379a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00038d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d26  00000000  00000000  00039f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9ca  00000000  00000000  00050ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cde9  00000000  00000000  0005f670  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc459  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000546c  00000000  00000000  000dc4d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005968 	.word	0x08005968

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005968 	.word	0x08005968

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0

}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800016c:	b480      	push	{r7}
 800016e:	af00      	add	r7, sp, #0
return 0;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
	...

0800017c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <vApplicationGetIdleTaskMemory+0x28>)
 800018c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000192:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2280      	movs	r2, #128	; 0x80
 8000198:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000094 	.word	0x20000094
 80001a8:	200000f8 	.word	0x200000f8

080001ac <LED_SignalDeviceError>:
 *      Author: wiki1
 */

#include "led.h"

void LED_SignalDeviceError(uint8_t numOfBeeps){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<numOfBeeps;i++){
 80001b6:	2300      	movs	r3, #0
 80001b8:	73fb      	strb	r3, [r7, #15]
 80001ba:	e012      	b.n	80001e2 <LED_SignalDeviceError+0x36>
		LED_Clear();
 80001bc:	f000 f87a 	bl	80002b4 <LED_Clear>
		BUZZ_Disable();
 80001c0:	f000 f8c0 	bl	8000344 <BUZZ_Disable>
		osDelay(300);
 80001c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001c8:	f003 fcbe 	bl	8003b48 <osDelay>
		LED_SetColor(RED);
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 f84b 	bl	8000268 <LED_SetColor>
		BUZZ_Enable();
 80001d2:	f000 f8ab 	bl	800032c <BUZZ_Enable>
		osDelay(200);
 80001d6:	20c8      	movs	r0, #200	; 0xc8
 80001d8:	f003 fcb6 	bl	8003b48 <osDelay>
	for(uint8_t i=0;i<numOfBeeps;i++){
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
 80001de:	3301      	adds	r3, #1
 80001e0:	73fb      	strb	r3, [r7, #15]
 80001e2:	7bfa      	ldrb	r2, [r7, #15]
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d3e8      	bcc.n	80001bc <LED_SignalDeviceError+0x10>
	}
	BUZZ_Disable();
 80001ea:	f000 f8ab 	bl	8000344 <BUZZ_Disable>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}

080001f6 <LED_Init>:

void LED_Init(void){
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af00      	add	r7, sp, #0
	BUZZ_Enable();
 80001fc:	f000 f896 	bl	800032c <BUZZ_Enable>
	for(uint16_t i=0;i<2;i++){
 8000200:	2300      	movs	r3, #0
 8000202:	80fb      	strh	r3, [r7, #6]
 8000204:	e027      	b.n	8000256 <LED_Init+0x60>
		LED_SetColor(RED);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f82e 	bl	8000268 <LED_SetColor>
		osDelay(200);
 800020c:	20c8      	movs	r0, #200	; 0xc8
 800020e:	f003 fc9b 	bl	8003b48 <osDelay>
		LED_SetColor(GREEN);
 8000212:	2001      	movs	r0, #1
 8000214:	f000 f828 	bl	8000268 <LED_SetColor>
		osDelay(200);
 8000218:	20c8      	movs	r0, #200	; 0xc8
 800021a:	f003 fc95 	bl	8003b48 <osDelay>
		LED_SetColor(BLUE);
 800021e:	2002      	movs	r0, #2
 8000220:	f000 f822 	bl	8000268 <LED_SetColor>
		osDelay(200);
 8000224:	20c8      	movs	r0, #200	; 0xc8
 8000226:	f003 fc8f 	bl	8003b48 <osDelay>
		LED_ClearColor(RED);
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f858 	bl	80002e0 <LED_ClearColor>
		osDelay(200);
 8000230:	20c8      	movs	r0, #200	; 0xc8
 8000232:	f003 fc89 	bl	8003b48 <osDelay>
		LED_ClearColor(GREEN);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f852 	bl	80002e0 <LED_ClearColor>
		osDelay(200);
 800023c:	20c8      	movs	r0, #200	; 0xc8
 800023e:	f003 fc83 	bl	8003b48 <osDelay>
		LED_ClearColor(BLUE);
 8000242:	2002      	movs	r0, #2
 8000244:	f000 f84c 	bl	80002e0 <LED_ClearColor>
		osDelay(500);
 8000248:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024c:	f003 fc7c 	bl	8003b48 <osDelay>
	for(uint16_t i=0;i<2;i++){
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	3301      	adds	r3, #1
 8000254:	80fb      	strh	r3, [r7, #6]
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d9d4      	bls.n	8000206 <LED_Init+0x10>
	}
	BUZZ_Disable();
 800025c:	f000 f872 	bl	8000344 <BUZZ_Disable>
		LED_SetColor(BLUE, i*100);
		osDelay(1);
	}
	__HAL_TIM_SET_COMPARE(&htim2,BUZZER_CH,0);
	*/
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <LED_SetColor>:

void LED_SetColor(typedef_color color){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
	switch (color){
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d00a      	beq.n	800028e <LED_SetColor+0x26>
 8000278:	2b02      	cmp	r3, #2
 800027a:	d00e      	beq.n	800029a <LED_SetColor+0x32>
 800027c:	2b00      	cmp	r3, #0
 800027e:	d000      	beq.n	8000282 <LED_SetColor+0x1a>
			break;
	case BLUE:
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
			break;
	}
}
 8000280:	e011      	b.n	80002a6 <LED_SetColor+0x3e>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2101      	movs	r1, #1
 8000286:	480a      	ldr	r0, [pc, #40]	; (80002b0 <LED_SetColor+0x48>)
 8000288:	f001 fca0 	bl	8001bcc <HAL_GPIO_WritePin>
		break;
 800028c:	e00b      	b.n	80002a6 <LED_SetColor+0x3e>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2102      	movs	r1, #2
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <LED_SetColor+0x48>)
 8000294:	f001 fc9a 	bl	8001bcc <HAL_GPIO_WritePin>
			break;
 8000298:	e005      	b.n	80002a6 <LED_SetColor+0x3e>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2104      	movs	r1, #4
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <LED_SetColor+0x48>)
 80002a0:	f001 fc94 	bl	8001bcc <HAL_GPIO_WritePin>
			break;
 80002a4:	bf00      	nop
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40010800 	.word	0x40010800

080002b4 <LED_Clear>:

void LED_Clear(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2101      	movs	r1, #1
 80002bc:	4807      	ldr	r0, [pc, #28]	; (80002dc <LED_Clear+0x28>)
 80002be:	f001 fc85 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2102      	movs	r1, #2
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <LED_Clear+0x28>)
 80002c8:	f001 fc80 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2104      	movs	r1, #4
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <LED_Clear+0x28>)
 80002d2:	f001 fc7b 	bl	8001bcc <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010800 	.word	0x40010800

080002e0 <LED_ClearColor>:
void LED_ClearColor(uint8_t color){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	switch (color){
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d00a      	beq.n	8000306 <LED_ClearColor+0x26>
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d00e      	beq.n	8000312 <LED_ClearColor+0x32>
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d000      	beq.n	80002fa <LED_ClearColor+0x1a>
		break;
	case BLUE:
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
		break;
	}
}
 80002f8:	e011      	b.n	800031e <LED_ClearColor+0x3e>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2101      	movs	r1, #1
 80002fe:	480a      	ldr	r0, [pc, #40]	; (8000328 <LED_ClearColor+0x48>)
 8000300:	f001 fc64 	bl	8001bcc <HAL_GPIO_WritePin>
		break;
 8000304:	e00b      	b.n	800031e <LED_ClearColor+0x3e>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2102      	movs	r1, #2
 800030a:	4807      	ldr	r0, [pc, #28]	; (8000328 <LED_ClearColor+0x48>)
 800030c:	f001 fc5e 	bl	8001bcc <HAL_GPIO_WritePin>
		break;
 8000310:	e005      	b.n	800031e <LED_ClearColor+0x3e>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2104      	movs	r1, #4
 8000316:	4804      	ldr	r0, [pc, #16]	; (8000328 <LED_ClearColor+0x48>)
 8000318:	f001 fc58 	bl	8001bcc <HAL_GPIO_WritePin>
		break;
 800031c:	bf00      	nop
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010800 	.word	0x40010800

0800032c <BUZZ_Enable>:

void BUZZ_Enable(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2108      	movs	r1, #8
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <BUZZ_Enable+0x14>)
 8000336:	f001 fc49 	bl	8001bcc <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800

08000344 <BUZZ_Disable>:
void BUZZ_Disable(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2108      	movs	r1, #8
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <BUZZ_Disable+0x14>)
 800034e:	f001 fc3d 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b5b0      	push	{r4, r5, r7, lr}
 800035e:	b096      	sub	sp, #88	; 0x58
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000362:	f001 f951 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000366:	f000 f851 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036a:	f000 f93f 	bl	80005ec <MX_GPIO_Init>
  MX_SPI1_Init();
 800036e:	f000 f891 	bl	8000494 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000372:	f000 f911 	bl	8000598 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000376:	f000 f8c3 	bl	8000500 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 800037a:	f000 fed0 	bl	800111e <MFRC522_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <main+0x98>)
 8000380:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000384:	461d      	mov	r5, r3
 8000386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800038e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f003 fb89 	bl	8003ab0 <osThreadCreate>
 800039e:	4602      	mov	r2, r0
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <main+0x9c>)
 80003a2:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReceiveData */
  osThreadDef(ReceiveData, vReceiveDataTask, osPriorityNormal, 0, 1024);
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <main+0xa0>)
 80003a6:	f107 0420 	add.w	r4, r7, #32
 80003aa:	461d      	mov	r5, r3
 80003ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiveDataHandle = osThreadCreate(osThread(ReceiveData), NULL);
 80003b8:	f107 0320 	add.w	r3, r7, #32
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 fb76 	bl	8003ab0 <osThreadCreate>
 80003c4:	4602      	mov	r2, r0
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <main+0xa4>)
 80003c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of StatusReporting */
  osThreadDef(StatusReporting, vStatusReporting, osPriorityNormal, 0, 128);
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <main+0xa8>)
 80003cc:	1d3c      	adds	r4, r7, #4
 80003ce:	461d      	mov	r5, r3
 80003d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StatusReportingHandle = osThreadCreate(osThread(StatusReporting), NULL);
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f003 fb65 	bl	8003ab0 <osThreadCreate>
 80003e6:	4602      	mov	r2, r0
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <main+0xac>)
 80003ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003ec:	f003 fb59 	bl	8003aa2 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <main+0x94>
 80003f2:	bf00      	nop
 80003f4:	0800598c 	.word	0x0800598c
 80003f8:	20003ef8 	.word	0x20003ef8
 80003fc:	080059b4 	.word	0x080059b4
 8000400:	20003f44 	.word	0x20003f44
 8000404:	080059e0 	.word	0x080059e0
 8000408:	20003f48 	.word	0x20003f48

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b090      	sub	sp, #64	; 0x40
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2228      	movs	r2, #40	; 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f004 fe7f 	bl	800511e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042e:	2301      	movs	r3, #1
 8000430:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043c:	2301      	movs	r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000440:	2302      	movs	r3, #2
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f001 fbd1 	bl	8001bfc <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000460:	f000 fc02 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2302      	movs	r3, #2
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2102      	movs	r1, #2
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fe3d 	bl	80020fc <HAL_RCC_ClockConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000488:	f000 fbee 	bl	8000c68 <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3740      	adds	r7, #64	; 0x40
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_SPI1_Init+0x64>)
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <MX_SPI1_Init+0x68>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004c8:	2208      	movs	r2, #8
 80004ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004da:	2200      	movs	r2, #0
 80004dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004e0:	220a      	movs	r2, #10
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004e6:	f001 ffd5 	bl	8002494 <HAL_SPI_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004f0:	f000 fbba 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20003f4c 	.word	0x20003f4c
 80004fc:	40013000 	.word	0x40013000

08000500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_TIM2_Init+0x94>)
 800051e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_TIM2_Init+0x94>)
 8000526:	2204      	movs	r2, #4
 8000528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_TIM2_Init+0x94>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_TIM2_Init+0x94>)
 8000532:	f242 720f 	movw	r2, #9999	; 0x270f
 8000536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_TIM2_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_TIM2_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000544:	4813      	ldr	r0, [pc, #76]	; (8000594 <MX_TIM2_Init+0x94>)
 8000546:	f002 fa30 	bl	80029aa <HAL_TIM_Base_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000550:	f000 fb8a 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	4619      	mov	r1, r3
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <MX_TIM2_Init+0x94>)
 8000562:	f002 fb78 	bl	8002c56 <HAL_TIM_ConfigClockSource>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800056c:	f000 fb7c 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_TIM2_Init+0x94>)
 800057e:	f002 fd3d 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000588:	f000 fb6e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20003fa4 	.word	0x20003fa4

08000598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_USART1_UART_Init+0x50>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005d0:	f002 fd6a 	bl	80030a8 <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005da:	f000 fb45 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20003f04 	.word	0x20003f04
 80005e8:	40013800 	.word	0x40013800

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b4e      	ldr	r3, [pc, #312]	; (800073c <MX_GPIO_Init+0x150>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a4d      	ldr	r2, [pc, #308]	; (800073c <MX_GPIO_Init+0x150>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <MX_GPIO_Init+0x150>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000618:	4b48      	ldr	r3, [pc, #288]	; (800073c <MX_GPIO_Init+0x150>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a47      	ldr	r2, [pc, #284]	; (800073c <MX_GPIO_Init+0x150>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <MX_GPIO_Init+0x150>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b42      	ldr	r3, [pc, #264]	; (800073c <MX_GPIO_Init+0x150>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a41      	ldr	r2, [pc, #260]	; (800073c <MX_GPIO_Init+0x150>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b3f      	ldr	r3, [pc, #252]	; (800073c <MX_GPIO_Init+0x150>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b3c      	ldr	r3, [pc, #240]	; (800073c <MX_GPIO_Init+0x150>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a3b      	ldr	r2, [pc, #236]	; (800073c <MX_GPIO_Init+0x150>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <MX_GPIO_Init+0x150>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4836      	ldr	r0, [pc, #216]	; (8000740 <MX_GPIO_Init+0x154>)
 8000668:	f001 fab0 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin|BUZZER_Pin 
 800066c:	2200      	movs	r2, #0
 800066e:	f240 110f 	movw	r1, #271	; 0x10f
 8000672:	4834      	ldr	r0, [pc, #208]	; (8000744 <MX_GPIO_Init+0x158>)
 8000674:	f001 faaa 	bl	8001bcc <HAL_GPIO_WritePin>
                          |RS485_TXENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2101      	movs	r1, #1
 800067c:	4832      	ldr	r0, [pc, #200]	; (8000748 <MX_GPIO_Init+0x15c>)
 800067e:	f001 faa5 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_RESET_GPIO_Port, RC522_RESET_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2102      	movs	r1, #2
 8000686:	4830      	ldr	r0, [pc, #192]	; (8000748 <MX_GPIO_Init+0x15c>)
 8000688:	f001 faa0 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUGLED_Pin */
  GPIO_InitStruct.Pin = DEBUGLED_Pin;
 800068c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUGLED_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	4826      	ldr	r0, [pc, #152]	; (8000740 <MX_GPIO_Init+0x154>)
 80006a6:	f001 f937 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin BUZZER_Pin 
                           RS485_TXENABLE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin|BUZZER_Pin 
 80006aa:	f240 130f 	movw	r3, #271	; 0x10f
 80006ae:	613b      	str	r3, [r7, #16]
                          |RS485_TXENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4820      	ldr	r0, [pc, #128]	; (8000744 <MX_GPIO_Init+0x158>)
 80006c4:	f001 f928 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <MX_GPIO_Init+0x15c>)
 80006e0:	f001 f91a 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC522_RESET_Pin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC522_RESET_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <MX_GPIO_Init+0x15c>)
 80006fc:	f001 f90c 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC522_IRQ_Pin */
  GPIO_InitStruct.Pin = RC522_IRQ_Pin;
 8000700:	2304      	movs	r3, #4
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RC522_IRQ_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_GPIO_Init+0x15c>)
 8000714:	f001 f900 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUGBTN_Pin */
  GPIO_InitStruct.Pin = DEBUGBTN_Pin;
 8000718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUGBTN_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_GPIO_Init+0x158>)
 800072e:	f001 f8f3 	bl	8001918 <HAL_GPIO_Init>

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	40011000 	.word	0x40011000
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00

0800074c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char UARTInitMsg[10];
	  snprintf(UARTInitMsg,10,"INIT\r\n");
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4a45      	ldr	r2, [pc, #276]	; (8000870 <StartDefaultTask+0x124>)
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	6018      	str	r0, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	8019      	strh	r1, [r3, #0]
 8000764:	3302      	adds	r3, #2
 8000766:	0c0a      	lsrs	r2, r1, #16
 8000768:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000770:	4840      	ldr	r0, [pc, #256]	; (8000874 <StartDefaultTask+0x128>)
 8000772:	f001 fa2b 	bl	8001bcc <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart1, (uint8_t *) UARTInitMsg, strlen(UARTInitMsg),20);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fce8 	bl	8000150 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	f107 0108 	add.w	r1, r7, #8
 8000788:	2314      	movs	r3, #20
 800078a:	483b      	ldr	r0, [pc, #236]	; (8000878 <StartDefaultTask+0x12c>)
 800078c:	f002 fcd9 	bl	8003142 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000796:	4837      	ldr	r0, [pc, #220]	; (8000874 <StartDefaultTask+0x128>)
 8000798:	f001 fa18 	bl	8001bcc <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(MFRC522_Check(cardIDarray)==MI_OK){
 800079c:	4837      	ldr	r0, [pc, #220]	; (800087c <StartDefaultTask+0x130>)
 800079e:	f000 faf3 	bl	8000d88 <MFRC522_Check>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d15f      	bne.n	8000868 <StartDefaultTask+0x11c>
			HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin,GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ae:	4834      	ldr	r0, [pc, #208]	; (8000880 <StartDefaultTask+0x134>)
 80007b0:	f001 fa0c 	bl	8001bcc <HAL_GPIO_WritePin>
			BUZZ_Enable();
 80007b4:	f7ff fdba 	bl	800032c <BUZZ_Enable>
			uint32_t cardIDdec;
			cardIDdec =  (uint32_t)cardIDarray[0] << 24;
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <StartDefaultTask+0x130>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	061b      	lsls	r3, r3, #24
 80007be:	617b      	str	r3, [r7, #20]
			cardIDdec += (uint32_t)cardIDarray[1] << 16;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <StartDefaultTask+0x130>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	041b      	lsls	r3, r3, #16
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	4413      	add	r3, r2
 80007ca:	617b      	str	r3, [r7, #20]
			cardIDdec += (uint32_t)cardIDarray[2] <<  8;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <StartDefaultTask+0x130>)
 80007ce:	789b      	ldrb	r3, [r3, #2]
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
			cardIDdec += (uint32_t)cardIDarray[3];
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <StartDefaultTask+0x130>)
 80007da:	78db      	ldrb	r3, [r3, #3]
 80007dc:	461a      	mov	r2, r3
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
			if(cardIDdec!=lastCardIDdec || (lastRFReadSystick+7000 < xTaskGetTickCount()) || lastRFReadSystick>xTaskGetTickCount()){ //dont accept 2 reads of the same card within 10 sec(ignore if systick overflowed)
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <StartDefaultTask+0x138>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d110      	bne.n	8000810 <StartDefaultTask+0xc4>
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <StartDefaultTask+0x13c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f503 54da 	add.w	r4, r3, #6976	; 0x1b40
 80007f6:	3418      	adds	r4, #24
 80007f8:	f003 fe68 	bl	80044cc <xTaskGetTickCount>
 80007fc:	4603      	mov	r3, r0
 80007fe:	429c      	cmp	r4, r3
 8000800:	d306      	bcc.n	8000810 <StartDefaultTask+0xc4>
 8000802:	f003 fe63 	bl	80044cc <xTaskGetTickCount>
 8000806:	4602      	mov	r2, r0
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <StartDefaultTask+0x13c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d220      	bcs.n	8000852 <StartDefaultTask+0x106>

				lastCardIDdec=cardIDdec;
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <StartDefaultTask+0x138>)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	6013      	str	r3, [r2, #0]
				lastRFReadSystick=xTaskGetTickCount();
 8000816:	f003 fe59 	bl	80044cc <xTaskGetTickCount>
 800081a:	4602      	mov	r2, r0
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <StartDefaultTask+0x13c>)
 800081e:	601a      	str	r2, [r3, #0]
				device_status=CONN_IN_PROGRESS;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <StartDefaultTask+0x140>)
 8000822:	2203      	movs	r2, #3
 8000824:	701a      	strb	r2, [r3, #0]
				osDelay(200);
 8000826:	20c8      	movs	r0, #200	; 0xc8
 8000828:	f003 f98e 	bl	8003b48 <osDelay>
				HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin,GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	4813      	ldr	r0, [pc, #76]	; (8000880 <StartDefaultTask+0x134>)
 8000834:	f001 f9ca 	bl	8001bcc <HAL_GPIO_WritePin>
				BUZZ_Disable();
 8000838:	f7ff fd84 	bl	8000344 <BUZZ_Disable>
				vTaskResume(ReceiveDataHandle);
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <StartDefaultTask+0x144>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fcdd 	bl	8004200 <vTaskResume>
				vTaskSuspend(defaultTaskHandle);
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <StartDefaultTask+0x148>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fc0c 	bl	8004068 <vTaskSuspend>
 8000850:	e00a      	b.n	8000868 <StartDefaultTask+0x11c>
			}
			else{
				osDelay(5);
 8000852:	2005      	movs	r0, #5
 8000854:	f003 f978 	bl	8003b48 <osDelay>
				HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin,GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4808      	ldr	r0, [pc, #32]	; (8000880 <StartDefaultTask+0x134>)
 8000860:	f001 f9b4 	bl	8001bcc <HAL_GPIO_WritePin>
				BUZZ_Disable();
 8000864:	f7ff fd6e 	bl	8000344 <BUZZ_Disable>
			}
		}

		osDelay(100);
 8000868:	2064      	movs	r0, #100	; 0x64
 800086a:	f003 f96d 	bl	8003b48 <osDelay>
		if(MFRC522_Check(cardIDarray)==MI_OK){
 800086e:	e795      	b.n	800079c <StartDefaultTask+0x50>
 8000870:	080059fc 	.word	0x080059fc
 8000874:	40010800 	.word	0x40010800
 8000878:	20003f04 	.word	0x20003f04
 800087c:	20003efc 	.word	0x20003efc
 8000880:	40011000 	.word	0x40011000
 8000884:	200002f8 	.word	0x200002f8
 8000888:	200002fc 	.word	0x200002fc
 800088c:	20000000 	.word	0x20000000
 8000890:	20003f44 	.word	0x20003f44
 8000894:	20003ef8 	.word	0x20003ef8

08000898 <vReceiveDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vReceiveDataTask */
void vReceiveDataTask(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vReceiveDataTask */
	vTaskSuspend(ReceiveDataHandle); //suspended by default until new UID is read in DefaultTask thread
 80008a0:	4b6d      	ldr	r3, [pc, #436]	; (8000a58 <vReceiveDataTask+0x1c0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fbdf 	bl	8004068 <vTaskSuspend>
	/* Infinite loop */
	for(;;)
	{
		uint8_t UARTReceiveBuffer=8;
 80008aa:	2308      	movs	r3, #8
 80008ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t* pUARTReceiveBuffer=&UARTReceiveBuffer;
 80008b0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_UART_Receive(&huart1, pUARTReceiveBuffer, 1, 100);
 80008b6:	2364      	movs	r3, #100	; 0x64
 80008b8:	2201      	movs	r2, #1
 80008ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008bc:	4867      	ldr	r0, [pc, #412]	; (8000a5c <vReceiveDataTask+0x1c4>)
 80008be:	f002 fcd9 	bl	8003274 <HAL_UART_Receive>
		//////SEND PING AND THEN CARD UID VIA RS485////
		//__HAL_UART_FLUSH_DRREGISTER(&huart1);
		char UARTSendBuffer[20];
		snprintf(UARTSendBuffer,20,"PING\r\n");
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4a66      	ldr	r2, [pc, #408]	; (8000a60 <vReceiveDataTask+0x1c8>)
 80008c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008cc:	6018      	str	r0, [r3, #0]
 80008ce:	3304      	adds	r3, #4
 80008d0:	8019      	strh	r1, [r3, #0]
 80008d2:	3302      	adds	r3, #2
 80008d4:	0c0a      	lsrs	r2, r1, #16
 80008d6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_SET); //enable TX on transceiver
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008de:	4861      	ldr	r0, [pc, #388]	; (8000a64 <vReceiveDataTask+0x1cc>)
 80008e0:	f001 f974 	bl	8001bcc <HAL_GPIO_WritePin>
		osDelay(2);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f003 f92f 	bl	8003b48 <osDelay>
		HAL_UART_Transmit(&huart1, (uint8_t *) UARTSendBuffer, strlen(UARTSendBuffer),15); //transmit in blocking mode - no need to implement DMA or interrupts
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc2e 	bl	8000150 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f107 010c 	add.w	r1, r7, #12
 80008fc:	230f      	movs	r3, #15
 80008fe:	4857      	ldr	r0, [pc, #348]	; (8000a5c <vReceiveDataTask+0x1c4>)
 8000900:	f002 fc1f 	bl	8003142 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_RESET); //RS485 transceiver is high impedance (listening for response)
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090a:	4856      	ldr	r0, [pc, #344]	; (8000a64 <vReceiveDataTask+0x1cc>)
 800090c:	f001 f95e 	bl	8001bcc <HAL_GPIO_WritePin>

		osDelay(5); //wait for indoor unit to process and reply
 8000910:	2005      	movs	r0, #5
 8000912:	f003 f919 	bl	8003b48 <osDelay>

		switch(HAL_UART_Receive(&huart1, pUARTReceiveBuffer, 1, 100)){
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	2201      	movs	r2, #1
 800091a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800091c:	484f      	ldr	r0, [pc, #316]	; (8000a5c <vReceiveDataTask+0x1c4>)
 800091e:	f002 fca9 	bl	8003274 <HAL_UART_Receive>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d008      	beq.n	800093a <vReceiveDataTask+0xa2>
 8000928:	2b03      	cmp	r3, #3
 800092a:	d002      	beq.n	8000932 <vReceiveDataTask+0x9a>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d008      	beq.n	8000942 <vReceiveDataTask+0xaa>
 8000930:	e087      	b.n	8000a42 <vReceiveDataTask+0x1aa>
		case HAL_TIMEOUT:
			device_status=CONN_TIMEOUT;
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
			break;
 8000938:	e083      	b.n	8000a42 <vReceiveDataTask+0x1aa>
		case HAL_ERROR:
			device_status=ERROR_READER;
 800093a:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <vReceiveDataTask+0x1d0>)
 800093c:	2206      	movs	r2, #6
 800093e:	701a      	strb	r2, [r3, #0]
			break;
 8000940:	e07f      	b.n	8000a42 <vReceiveDataTask+0x1aa>
		case HAL_OK:
			if(UARTReceiveBuffer=='9'){ //indoor unit responds with '9' if its ready to process new UID
 8000942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000946:	2b39      	cmp	r3, #57	; 0x39
 8000948:	d176      	bne.n	8000a38 <vReceiveDataTask+0x1a0>
				snprintf(UARTSendBuffer,20,"ID%lu\r\n",lastCardIDdec);
 800094a:	4b48      	ldr	r3, [pc, #288]	; (8000a6c <vReceiveDataTask+0x1d4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f107 000c 	add.w	r0, r7, #12
 8000952:	4a47      	ldr	r2, [pc, #284]	; (8000a70 <vReceiveDataTask+0x1d8>)
 8000954:	2114      	movs	r1, #20
 8000956:	f004 fbeb 	bl	8005130 <sniprintf>
				HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_SET); //enable TX on transceiver
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000960:	4840      	ldr	r0, [pc, #256]	; (8000a64 <vReceiveDataTask+0x1cc>)
 8000962:	f001 f933 	bl	8001bcc <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t *) UARTSendBuffer, strlen(UARTSendBuffer),15); //transmit in blocking mode - no need to implement DMA or interrupts
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fbf0 	bl	8000150 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 010c 	add.w	r1, r7, #12
 8000978:	230f      	movs	r3, #15
 800097a:	4838      	ldr	r0, [pc, #224]	; (8000a5c <vReceiveDataTask+0x1c4>)
 800097c:	f002 fbe1 	bl	8003142 <HAL_UART_Transmit>
				osDelay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f003 f8e1 	bl	8003b48 <osDelay>
				HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_RESET); //RS485 transceiver is high impedance (listening for response)
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	4835      	ldr	r0, [pc, #212]	; (8000a64 <vReceiveDataTask+0x1cc>)
 800098e:	f001 f91d 	bl	8001bcc <HAL_GPIO_WritePin>

				device_status=WAITING_FOR_RESPONSE;
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000994:	2204      	movs	r2, #4
 8000996:	701a      	strb	r2, [r3, #0]
				__HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <vReceiveDataTask+0x1c4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
				switch(HAL_UART_Receive(&huart1, pUARTReceiveBuffer, 1, 8000)){ //receiving in blocking mode to use 8s timeout if there is a problem within indoor unit
 800099e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80009a2:	2201      	movs	r2, #1
 80009a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009a6:	482d      	ldr	r0, [pc, #180]	; (8000a5c <vReceiveDataTask+0x1c4>)
 80009a8:	f002 fc64 	bl	8003274 <HAL_UART_Receive>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d039      	beq.n	8000a26 <vReceiveDataTask+0x18e>
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d002      	beq.n	80009bc <vReceiveDataTask+0x124>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d004      	beq.n	80009c4 <vReceiveDataTask+0x12c>
 80009ba:	e038      	b.n	8000a2e <vReceiveDataTask+0x196>
				case HAL_TIMEOUT:
					device_status=CONN_TIMEOUT;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <vReceiveDataTask+0x1d0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
					break;
 80009c2:	e03d      	b.n	8000a40 <vReceiveDataTask+0x1a8>
				case HAL_OK:
					//device_status=READY;
					switch(UARTReceiveBuffer){      /////////set reader state depending on received code from indoor unit
 80009c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009c8:	3b30      	subs	r3, #48	; 0x30
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	d826      	bhi.n	8000a1c <vReceiveDataTask+0x184>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <vReceiveDataTask+0x13c>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009f5 	.word	0x080009f5
 80009d8:	080009ed 	.word	0x080009ed
 80009dc:	080009fd 	.word	0x080009fd
 80009e0:	08000a05 	.word	0x08000a05
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	08000a15 	.word	0x08000a15
					case '1': 						//UID OK
						device_status=UID_VALID;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <vReceiveDataTask+0x1d0>)
 80009ee:	2205      	movs	r2, #5
 80009f0:	701a      	strb	r2, [r3, #0]
						break;
 80009f2:	e017      	b.n	8000a24 <vReceiveDataTask+0x18c>
					case '0':						//UID unknown/intruder
						device_status=UID_UNKNOWN;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <vReceiveDataTask+0x1d0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
						break;
 80009fa:	e013      	b.n	8000a24 <vReceiveDataTask+0x18c>
					case '2':						//SQL error
						device_status=ERROR_SQL;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <vReceiveDataTask+0x1d0>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	701a      	strb	r2, [r3, #0]
						break;
 8000a02:	e00f      	b.n	8000a24 <vReceiveDataTask+0x18c>
					case '3':						//HTTP ERROR
						device_status=ERROR_HTTP;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	701a      	strb	r2, [r3, #0]
						break;
 8000a0a:	e00b      	b.n	8000a24 <vReceiveDataTask+0x18c>
					case '4':						//SERVER ERROR
						device_status=ERROR_SERVER;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000a0e:	2209      	movs	r2, #9
 8000a10:	701a      	strb	r2, [r3, #0]
						break;
 8000a12:	e007      	b.n	8000a24 <vReceiveDataTask+0x18c>
					case '5':						//WIFI ERROR
						device_status=ERROR_WIFI;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000a16:	220a      	movs	r2, #10
 8000a18:	701a      	strb	r2, [r3, #0]
						break;
 8000a1a:	e003      	b.n	8000a24 <vReceiveDataTask+0x18c>
					default:
						device_status=ERROR_READER;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000a1e:	2206      	movs	r2, #6
 8000a20:	701a      	strb	r2, [r3, #0]
						break;
 8000a22:	bf00      	nop
					}
					break;
 8000a24:	e00c      	b.n	8000a40 <vReceiveDataTask+0x1a8>
					case HAL_ERROR:
						device_status=ERROR_READER;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000a28:	2206      	movs	r2, #6
 8000a2a:	701a      	strb	r2, [r3, #0]
						break;
 8000a2c:	e008      	b.n	8000a40 <vReceiveDataTask+0x1a8>
					default:
						device_status=READY;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	701a      	strb	r2, [r3, #0]
						break;
 8000a34:	bf00      	nop
 8000a36:	e003      	b.n	8000a40 <vReceiveDataTask+0x1a8>
				}
			}
			else{
				device_status=ERROR_READER;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <vReceiveDataTask+0x1d0>)
 8000a3a:	2206      	movs	r2, #6
 8000a3c:	701a      	strb	r2, [r3, #0]
				break;
 8000a3e:	e000      	b.n	8000a42 <vReceiveDataTask+0x1aa>
			}
			break;
 8000a40:	bf00      	nop
		}

		vTaskResume(defaultTaskHandle);
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <vReceiveDataTask+0x1dc>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fbda 	bl	8004200 <vTaskResume>
		vTaskSuspend(ReceiveDataHandle); //task suspended, default task is now in charge
 8000a4c:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <vReceiveDataTask+0x1c0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fb09 	bl	8004068 <vTaskSuspend>
	{
 8000a56:	e728      	b.n	80008aa <vReceiveDataTask+0x12>
 8000a58:	20003f44 	.word	0x20003f44
 8000a5c:	20003f04 	.word	0x20003f04
 8000a60:	08005a04 	.word	0x08005a04
 8000a64:	40010800 	.word	0x40010800
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	200002f8 	.word	0x200002f8
 8000a70:	08005a0c 	.word	0x08005a0c
 8000a74:	20003ef8 	.word	0x20003ef8

08000a78 <vStatusReporting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStatusReporting */
void vStatusReporting(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStatusReporting */
	osDelay(100);
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f003 f861 	bl	8003b48 <osDelay>
	LED_Init();
 8000a86:	f7ff fbb6 	bl	80001f6 <LED_Init>
  /* Infinite loop */
	for(;;)
	{
		 // HAL_TIM_StateTypeDef timstate = HAL_TIM_PWM_GetState(&htim2);
		switch(device_status){
 8000a8a:	4b6c      	ldr	r3, [pc, #432]	; (8000c3c <vStatusReporting+0x1c4>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	2b09      	cmp	r3, #9
 8000a92:	f200 80be 	bhi.w	8000c12 <vStatusReporting+0x19a>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <vStatusReporting+0x24>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000b69 	.word	0x08000b69
 8000aa0:	08000ac5 	.word	0x08000ac5
 8000aa4:	08000ad7 	.word	0x08000ad7
 8000aa8:	08000b05 	.word	0x08000b05
 8000aac:	08000b33 	.word	0x08000b33
 8000ab0:	08000c13 	.word	0x08000c13
 8000ab4:	08000b8b 	.word	0x08000b8b
 8000ab8:	08000bad 	.word	0x08000bad
 8000abc:	08000bcf 	.word	0x08000bcf
 8000ac0:	08000bf1 	.word	0x08000bf1
		case READY:
			LED_SetColor(BLUE);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fbcf 	bl	8000268 <LED_SetColor>
			osDelay(3);
 8000aca:	2003      	movs	r0, #3
 8000acc:	f003 f83c 	bl	8003b48 <osDelay>
			LED_Clear();
 8000ad0:	f7ff fbf0 	bl	80002b4 <LED_Clear>
			break;
 8000ad4:	e0ae      	b.n	8000c34 <vStatusReporting+0x1bc>
		case CONN_IN_PROGRESS:
			LED_Clear();
 8000ad6:	f7ff fbed 	bl	80002b4 <LED_Clear>
			for(uint8_t i=0;i<3;i++){
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e00d      	b.n	8000afc <vStatusReporting+0x84>
				LED_SetColor(BLUE);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff fbc1 	bl	8000268 <LED_SetColor>
				osDelay(50);
 8000ae6:	2032      	movs	r0, #50	; 0x32
 8000ae8:	f003 f82e 	bl	8003b48 <osDelay>
				LED_Clear();
 8000aec:	f7ff fbe2 	bl	80002b4 <LED_Clear>
				osDelay(200);
 8000af0:	20c8      	movs	r0, #200	; 0xc8
 8000af2:	f003 f829 	bl	8003b48 <osDelay>
			for(uint8_t i=0;i<3;i++){
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	3301      	adds	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d9ee      	bls.n	8000ae0 <vStatusReporting+0x68>
			}
			break;
 8000b02:	e097      	b.n	8000c34 <vStatusReporting+0x1bc>
		case WAITING_FOR_RESPONSE:
			LED_Clear();
 8000b04:	f7ff fbd6 	bl	80002b4 <LED_Clear>
			for(uint8_t i=0;i<3;i++){
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73bb      	strb	r3, [r7, #14]
 8000b0c:	e00d      	b.n	8000b2a <vStatusReporting+0xb2>
				LED_SetColor(BLUE);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fbaa 	bl	8000268 <LED_SetColor>
				osDelay(50);
 8000b14:	2032      	movs	r0, #50	; 0x32
 8000b16:	f003 f817 	bl	8003b48 <osDelay>
				LED_Clear();
 8000b1a:	f7ff fbcb 	bl	80002b4 <LED_Clear>
				osDelay(200);
 8000b1e:	20c8      	movs	r0, #200	; 0xc8
 8000b20:	f003 f812 	bl	8003b48 <osDelay>
			for(uint8_t i=0;i<3;i++){
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	3301      	adds	r3, #1
 8000b28:	73bb      	strb	r3, [r7, #14]
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d9ee      	bls.n	8000b0e <vStatusReporting+0x96>
			}
			break;
 8000b30:	e080      	b.n	8000c34 <vStatusReporting+0x1bc>
		case UID_VALID:
			vTaskSuspend(defaultTaskHandle);
 8000b32:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <vStatusReporting+0x1c8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fa96 	bl	8004068 <vTaskSuspend>
			LED_Clear();
 8000b3c:	f7ff fbba 	bl	80002b4 <LED_Clear>
			LED_SetColor(GREEN);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff fb91 	bl	8000268 <LED_SetColor>
			BUZZ_Enable();
 8000b46:	f7ff fbf1 	bl	800032c <BUZZ_Enable>
			osDelay(2000);
 8000b4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b4e:	f002 fffb 	bl	8003b48 <osDelay>
			device_status=READY;
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <vStatusReporting+0x1c4>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	701a      	strb	r2, [r3, #0]
			BUZZ_Disable();
 8000b58:	f7ff fbf4 	bl	8000344 <BUZZ_Disable>
			vTaskResume(defaultTaskHandle);
 8000b5c:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <vStatusReporting+0x1c8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fb4d 	bl	8004200 <vTaskResume>
			break;
 8000b66:	e065      	b.n	8000c34 <vStatusReporting+0x1bc>
////ERROR signalling with blinking RED led and buzzer/////
		case UID_UNKNOWN:
			vTaskSuspend(defaultTaskHandle);
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <vStatusReporting+0x1c8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fa7b 	bl	8004068 <vTaskSuspend>
			LED_SignalDeviceError(1); //1 beep for unknown
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fb1a 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <vStatusReporting+0x1c4>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <vStatusReporting+0x1c8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 fb3c 	bl	8004200 <vTaskResume>
			break;
 8000b88:	e054      	b.n	8000c34 <vStatusReporting+0x1bc>
		case ERROR_SQL:
			vTaskSuspend(defaultTaskHandle);
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <vStatusReporting+0x1c8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fa6a 	bl	8004068 <vTaskSuspend>
			LED_SignalDeviceError(2); //2 beeps for SQL error
 8000b94:	2002      	movs	r0, #2
 8000b96:	f7ff fb09 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <vStatusReporting+0x1c4>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <vStatusReporting+0x1c8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 fb2b 	bl	8004200 <vTaskResume>
			break;
 8000baa:	e043      	b.n	8000c34 <vStatusReporting+0x1bc>
		case ERROR_HTTP:
			vTaskSuspend(defaultTaskHandle);
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <vStatusReporting+0x1c8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fa59 	bl	8004068 <vTaskSuspend>
			LED_SignalDeviceError(3); //3 beeps for HTTP error
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f7ff faf8 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <vStatusReporting+0x1c4>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <vStatusReporting+0x1c8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fb1a 	bl	8004200 <vTaskResume>
			break;
 8000bcc:	e032      	b.n	8000c34 <vStatusReporting+0x1bc>
		case ERROR_SERVER:
			vTaskSuspend(defaultTaskHandle);
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <vStatusReporting+0x1c8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fa48 	bl	8004068 <vTaskSuspend>
			LED_SignalDeviceError(4); //4 beeps for server error
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f7ff fae7 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <vStatusReporting+0x1c4>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <vStatusReporting+0x1c8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fb09 	bl	8004200 <vTaskResume>
			break;
 8000bee:	e021      	b.n	8000c34 <vStatusReporting+0x1bc>
		case ERROR_WIFI:
			vTaskSuspend(defaultTaskHandle);
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <vStatusReporting+0x1c8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fa37 	bl	8004068 <vTaskSuspend>
			LED_SignalDeviceError(5); //5 beeps for wifi error
 8000bfa:	2005      	movs	r0, #5
 8000bfc:	f7ff fad6 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <vStatusReporting+0x1c4>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <vStatusReporting+0x1c8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 faf8 	bl	8004200 <vTaskResume>
			break;
 8000c10:	e010      	b.n	8000c34 <vStatusReporting+0x1bc>
		default:
			vTaskSuspend(defaultTaskHandle);
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <vStatusReporting+0x1c8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fa26 	bl	8004068 <vTaskSuspend>
			LED_SignalDeviceError(6); //6 beeps for other problems
 8000c1c:	2006      	movs	r0, #6
 8000c1e:	f7ff fac5 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <vStatusReporting+0x1c4>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <vStatusReporting+0x1c8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fae7 	bl	8004200 <vTaskResume>
			break;
 8000c32:	bf00      	nop
		}
		osDelay(10);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f002 ff87 	bl	8003b48 <osDelay>
		switch(device_status){
 8000c3a:	e726      	b.n	8000a8a <vStatusReporting+0x12>
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20003ef8 	.word	0x20003ef8

08000c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c56:	f000 fced 	bl	8001634 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40000800 	.word	0x40000800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi1;


uint8_t SPI1SendByte(uint8_t data) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000c82:	f107 0208 	add.w	r2, r7, #8
 8000c86:	f107 010c 	add.w	r1, r7, #12
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <SPI1SendByte+0x2c>)
 8000c92:	f001 fc60 	bl	8002556 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000c96:	7a3b      	ldrb	r3, [r7, #8]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20003f4c 	.word	0x20003f4c

08000ca4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <SPI1_WriteReg+0x3c>)
 8000cba:	f000 ff87 	bl	8001bcc <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ffd7 	bl	8000c74 <SPI1SendByte>
	SPI1SendByte(value);
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ffd3 	bl	8000c74 <SPI1SendByte>
	cs_set();
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <SPI1_WriteReg+0x3c>)
 8000cd4:	f000 ff7a 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <SPI1_ReadReg+0x3c>)
 8000cf4:	f000 ff6a 	bl	8001bcc <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffba 	bl	8000c74 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ffb7 	bl	8000c74 <SPI1SendByte>
 8000d06:	4603      	mov	r3, r0
 8000d08:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <SPI1_ReadReg+0x3c>)
 8000d10:	f000 ff5c 	bl	8001bcc <HAL_GPIO_WritePin>
	return val;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;								// Address format: 0XXXXXX0
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000d3e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ffac 	bl	8000ca4 <SPI1_WriteReg>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ffb5 	bl	8000ce4 <SPI1_ReadReg>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	return val;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);					// Find cards, return card type
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	2026      	movs	r0, #38	; 0x26
 8000d94:	f000 f849 	bl	8000e2a <MFRC522_Request>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d104      	bne.n	8000dac <MFRC522_Check+0x24>
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f935 	bl	8001012 <MFRC522_Anticoll>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();												// Command card into hibernation
 8000dac:	f000 fa01 	bl	80011b2 <MFRC522_Halt>
	return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffc1 	bl	8000d54 <MFRC522_ReadRegister>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff9f 	bl	8000d24 <MFRC522_WriteRegister>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	460a      	mov	r2, r1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffa7 	bl	8000d54 <MFRC522_ReadRegister>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b25a      	sxtb	r2, r3
 8000e0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	4013      	ands	r3, r2
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff81 	bl	8000d24 <MFRC522_WriteRegister>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af02      	add	r7, sp, #8
 8000e30:	4603      	mov	r3, r0
 8000e32:	6039      	str	r1, [r7, #0]
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;											// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8000e36:	2107      	movs	r1, #7
 8000e38:	200d      	movs	r0, #13
 8000e3a:	f7ff ff73 	bl	8000d24 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	200c      	movs	r0, #12
 8000e52:	f000 f80f 	bl	8000e74 <MFRC522_ToCard>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <MFRC522_Request+0x3c>
 8000e60:	89bb      	ldrh	r3, [r7, #12]
 8000e62:	2b10      	cmp	r3, #16
 8000e64:	d001      	beq.n	8000e6a <MFRC522_Request+0x40>
 8000e66:	2302      	movs	r3, #2
 8000e68:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	4613      	mov	r3, r2
 8000e84:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000e86:	2302      	movs	r3, #2
 8000e88:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	d007      	beq.n	8000ea8 <MFRC522_ToCard+0x34>
 8000e98:	2b0e      	cmp	r3, #14
 8000e9a:	d000      	beq.n	8000e9e <MFRC522_ToCard+0x2a>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
		break;
 8000e9c:	e009      	b.n	8000eb2 <MFRC522_ToCard+0x3e>
			irqEn = 0x12;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	757b      	strb	r3, [r7, #21]
			break;
 8000ea6:	e004      	b.n	8000eb2 <MFRC522_ToCard+0x3e>
			irqEn = 0x77;
 8000ea8:	2377      	movs	r3, #119	; 0x77
 8000eaa:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000eac:	2330      	movs	r3, #48	; 0x30
 8000eae:	757b      	strb	r3, [r7, #21]
			break;
 8000eb0:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000eb2:	7dbb      	ldrb	r3, [r7, #22]
 8000eb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4619      	mov	r1, r3
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f7ff ff31 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	2004      	movs	r0, #4
 8000ec6:	f7ff ff92 	bl	8000dee <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f7ff ff74 	bl	8000dba <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff ff25 	bl	8000d24 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000eda:	2300      	movs	r3, #0
 8000edc:	827b      	strh	r3, [r7, #18]
 8000ede:	e00a      	b.n	8000ef6 <MFRC522_ToCard+0x82>
 8000ee0:	8a7b      	ldrh	r3, [r7, #18]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2009      	movs	r0, #9
 8000eec:	f7ff ff1a 	bl	8000d24 <MFRC522_WriteRegister>
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	827b      	strh	r3, [r7, #18]
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	8a7a      	ldrh	r2, [r7, #18]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3ef      	bcc.n	8000ee0 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	4619      	mov	r1, r3
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff ff0d 	bl	8000d24 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b0c      	cmp	r3, #12
 8000f0e:	d103      	bne.n	8000f18 <MFRC522_ToCard+0xa4>
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	200d      	movs	r0, #13
 8000f14:	f7ff ff51 	bl	8000dba <MFRC522_SetBitMask>


	i = 2000;	//
 8000f18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f1c:	827b      	strh	r3, [r7, #18]
	do {

		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000f1e:	2004      	movs	r0, #4
 8000f20:	f7ff ff18 	bl	8000d54 <MFRC522_ReadRegister>
 8000f24:	4603      	mov	r3, r0
 8000f26:	753b      	strb	r3, [r7, #20]
		i--;
 8000f28:	8a7b      	ldrh	r3, [r7, #18]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000f2e:	8a7b      	ldrh	r3, [r7, #18]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00a      	beq.n	8000f4a <MFRC522_ToCard+0xd6>
 8000f34:	7d3b      	ldrb	r3, [r7, #20]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <MFRC522_ToCard+0xd6>
 8000f3e:	7d3a      	ldrb	r2, [r7, #20]
 8000f40:	7d7b      	ldrb	r3, [r7, #21]
 8000f42:	4013      	ands	r3, r2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0e9      	beq.n	8000f1e <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	200d      	movs	r0, #13
 8000f4e:	f7ff ff4e 	bl	8000dee <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000f52:	8a7b      	ldrh	r3, [r7, #18]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d057      	beq.n	8001008 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000f58:	2006      	movs	r0, #6
 8000f5a:	f7ff fefb 	bl	8000d54 <MFRC522_ReadRegister>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f003 031b 	and.w	r3, r3, #27
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d14d      	bne.n	8001004 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000f6c:	7d3a      	ldrb	r2, [r7, #20]
 8000f6e:	7dbb      	ldrb	r3, [r7, #22]
 8000f70:	4013      	ands	r3, r2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MFRC522_ToCard+0x10c>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b0c      	cmp	r3, #12
 8000f84:	d140      	bne.n	8001008 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f7ff fee4 	bl	8000d54 <MFRC522_ReadRegister>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000f90:	200c      	movs	r0, #12
 8000f92:	f7ff fedf 	bl	8000d54 <MFRC522_ReadRegister>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000f9e:	7c7b      	ldrb	r3, [r7, #17]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <MFRC522_ToCard+0x148>
 8000fa4:	7d3b      	ldrb	r3, [r7, #20]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	e005      	b.n	8000fc8 <MFRC522_ToCard+0x154>
 8000fbc:	7d3b      	ldrb	r3, [r7, #20]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000fc8:	7d3b      	ldrb	r3, [r7, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <MFRC522_ToCard+0x15e>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000fd2:	7d3b      	ldrb	r3, [r7, #20]
 8000fd4:	2b10      	cmp	r3, #16
 8000fd6:	d901      	bls.n	8000fdc <MFRC522_ToCard+0x168>
 8000fd8:	2310      	movs	r3, #16
 8000fda:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000fdc:	2300      	movs	r3, #0
 8000fde:	827b      	strh	r3, [r7, #18]
 8000fe0:	e00a      	b.n	8000ff8 <MFRC522_ToCard+0x184>
 8000fe2:	8a7b      	ldrh	r3, [r7, #18]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	18d4      	adds	r4, r2, r3
 8000fe8:	2009      	movs	r0, #9
 8000fea:	f7ff feb3 	bl	8000d54 <MFRC522_ReadRegister>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	7023      	strb	r3, [r4, #0]
 8000ff2:	8a7b      	ldrh	r3, [r7, #18]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	827b      	strh	r3, [r7, #18]
 8000ff8:	7d3b      	ldrb	r3, [r7, #20]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	8a7a      	ldrh	r2, [r7, #18]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3ef      	bcc.n	8000fe2 <MFRC522_ToCard+0x16e>
 8001002:	e001      	b.n	8001008 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001004:	2302      	movs	r3, #2
 8001006:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001008:	7dfb      	ldrb	r3, [r7, #23]
}
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}

08001012 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af02      	add	r7, sp, #8
 8001018:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800101e:	2100      	movs	r1, #0
 8001020:	200d      	movs	r0, #13
 8001022:	f7ff fe7f 	bl	8000d24 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2293      	movs	r2, #147	; 0x93
 800102a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	2220      	movs	r2, #32
 8001032:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001034:	f107 030a 	add.w	r3, r7, #10
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	200c      	movs	r0, #12
 8001042:	f7ff ff17 	bl	8000e74 <MFRC522_ToCard>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
 8001054:	e009      	b.n	800106a <MFRC522_Anticoll+0x58>
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	7b7b      	ldrb	r3, [r7, #13]
 8001060:	4053      	eors	r3, r2
 8001062:	737b      	strb	r3, [r7, #13]
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	3301      	adds	r3, #1
 8001068:	73bb      	strb	r3, [r7, #14]
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d9f2      	bls.n	8001056 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	7b7a      	ldrb	r2, [r7, #13]
 800107a:	429a      	cmp	r2, r3
 800107c:	d001      	beq.n	8001082 <MFRC522_Anticoll+0x70>
 800107e:	2302      	movs	r3, #2
 8001080:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	460b      	mov	r3, r1
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800109a:	2104      	movs	r1, #4
 800109c:	2005      	movs	r0, #5
 800109e:	f7ff fea6 	bl	8000dee <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	200a      	movs	r0, #10
 80010a6:	f7ff fe88 	bl	8000dba <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]
 80010ae:	e00a      	b.n	80010c6 <MFRC522_CalculateCRC+0x3a>
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2009      	movs	r0, #9
 80010bc:	f7ff fe32 	bl	8000d24 <MFRC522_WriteRegister>
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	3301      	adds	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
 80010c6:	7dfa      	ldrb	r2, [r7, #23]
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3f0      	bcc.n	80010b0 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80010ce:	2103      	movs	r1, #3
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff fe27 	bl	8000d24 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fe3a 	bl	8000d54 <MFRC522_ReadRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	75bb      	strb	r3, [r7, #22]
		i--;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <MFRC522_CalculateCRC+0x6e>
 80010f0:	7dbb      	ldrb	r3, [r7, #22]
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0ef      	beq.n	80010da <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80010fa:	2022      	movs	r0, #34	; 0x22
 80010fc:	f7ff fe2a 	bl	8000d54 <MFRC522_ReadRegister>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	1c5c      	adds	r4, r3, #1
 800110c:	2021      	movs	r0, #33	; 0x21
 800110e:	f7ff fe21 	bl	8000d54 <MFRC522_ReadRegister>
 8001112:	4603      	mov	r3, r0
 8001114:	7023      	strb	r3, [r4, #0]
}
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}

0800111e <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001122:	f000 f821 	bl	8001168 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x80);
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	202a      	movs	r0, #42	; 0x2a
 800112a:	f7ff fdfb 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0xA9);
 800112e:	21a9      	movs	r1, #169	; 0xa9
 8001130:	202b      	movs	r0, #43	; 0x2b
 8001132:	f7ff fdf7 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 0xE8);
 8001136:	21e8      	movs	r1, #232	; 0xe8
 8001138:	202d      	movs	r0, #45	; 0x2d
 800113a:	f7ff fdf3 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	202c      	movs	r0, #44	; 0x2c
 8001142:	f7ff fdef 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x50);				// 38dB gain
 8001146:	2150      	movs	r1, #80	; 0x50
 8001148:	2026      	movs	r0, #38	; 0x26
 800114a:	f7ff fdeb 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	2015      	movs	r0, #21
 8001152:	f7ff fde7 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001156:	213d      	movs	r1, #61	; 0x3d
 8001158:	2011      	movs	r0, #17
 800115a:	f7ff fde3 	bl	8000d24 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800115e:	f000 f813 	bl	8001188 <MFRC522_AntennaOn>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC522_RESET_GPIO_Port, RC522_RESET_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2102      	movs	r1, #2
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MFRC522_Reset+0x1c>)
 8001172:	f000 fd2b 	bl	8001bcc <HAL_GPIO_WritePin>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001176:	210f      	movs	r1, #15
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fdd3 	bl	8000d24 <MFRC522_WriteRegister>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40010c00 	.word	0x40010c00

08001188 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800118e:	2014      	movs	r0, #20
 8001190:	f7ff fde0 	bl	8000d54 <MFRC522_ReadRegister>
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
	if ((temp & 0x03)!=0x03) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d003      	beq.n	80011aa <MFRC522_AntennaOn+0x22>
 80011a2:	2103      	movs	r1, #3
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff fe08 	bl	8000dba <MFRC522_SetBitMask>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80011b8:	2350      	movs	r3, #80	; 0x50
 80011ba:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80011c0:	463b      	mov	r3, r7
 80011c2:	1c9a      	adds	r2, r3, #2
 80011c4:	463b      	mov	r3, r7
 80011c6:	2102      	movs	r1, #2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5f 	bl	800108c <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80011ce:	463a      	mov	r2, r7
 80011d0:	4639      	mov	r1, r7
 80011d2:	1dbb      	adds	r3, r7, #6
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	2204      	movs	r2, #4
 80011da:	200c      	movs	r0, #12
 80011dc:	f7ff fe4a 	bl	8000e74 <MFRC522_ToCard>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_MspInit+0x68>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_MspInit+0x68>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6193      	str	r3, [r2, #24]
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_MspInit+0x68>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_MspInit+0x68>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_MspInit+0x68>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_MspInit+0x68>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	210f      	movs	r1, #15
 8001222:	f06f 0001 	mvn.w	r0, #1
 8001226:	f000 fad6 	bl	80017d6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_MspInit+0x6c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_MspInit+0x6c>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000

08001258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d12f      	bne.n	80012d8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 800127e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012a8:	23a0      	movs	r3, #160	; 0xa0
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_SPI_MspInit+0x90>)
 80012bc:	f000 fb2c 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c0:	2340      	movs	r3, #64	; 0x40
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_SPI_MspInit+0x90>)
 80012d4:	f000 fb20 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40013000 	.word	0x40013000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800

080012ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012fc:	d113      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x44>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_TIM_Base_MspInit+0x44>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_TIM_Base_MspInit+0x44>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2105      	movs	r1, #5
 800131a:	201c      	movs	r0, #28
 800131c:	f000 fa5b 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001320:	201c      	movs	r0, #28
 8001322:	f000 fa74 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_UART_MspInit+0x9c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d139      	bne.n	80013c8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <HAL_UART_MspInit+0xa0>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_UART_MspInit+0xa0>)
 800135a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_UART_MspInit+0xa0>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_UART_MspInit+0xa0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_UART_MspInit+0xa0>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_UART_MspInit+0xa0>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001388:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4619      	mov	r1, r3
 8001398:	480f      	ldr	r0, [pc, #60]	; (80013d8 <HAL_UART_MspInit+0xa4>)
 800139a:	f000 fabd 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800139e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	4809      	ldr	r0, [pc, #36]	; (80013d8 <HAL_UART_MspInit+0xa4>)
 80013b4:	f000 fab0 	bl	8001918 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2105      	movs	r1, #5
 80013bc:	2025      	movs	r0, #37	; 0x25
 80013be:	f000 fa0a 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013c2:	2025      	movs	r0, #37	; 0x25
 80013c4:	f000 fa23 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010800 	.word	0x40010800

080013dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	201e      	movs	r0, #30
 80013f2:	f000 f9f0 	bl	80017d6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80013f6:	201e      	movs	r0, #30
 80013f8:	f000 fa09 	bl	800180e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_InitTick+0x9c>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_InitTick+0x9c>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	61d3      	str	r3, [r2, #28]
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_InitTick+0x9c>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001414:	f107 0210 	add.w	r2, r7, #16
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f000 ffea 	bl	80023f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001424:	f000 ffc0 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8001428:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <HAL_InitTick+0xa0>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	3b01      	subs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_InitTick+0xa4>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_InitTick+0xa8>)
 800143c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_InitTick+0xa4>)
 8001440:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001444:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_InitTick+0xa4>)
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_InitTick+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_InitTick+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <HAL_InitTick+0xa4>)
 800145a:	f001 faa6 	bl	80029aa <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d104      	bne.n	800146e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <HAL_InitTick+0xa4>)
 8001466:	f001 facb 	bl	8002a00 <HAL_TIM_Base_Start_IT>
 800146a:	4603      	mov	r3, r0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3730      	adds	r7, #48	; 0x30
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	431bde83 	.word	0x431bde83
 8001480:	20003fe4 	.word	0x20003fe4
 8001484:	40000800 	.word	0x40000800

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <HardFault_Handler+0x4>

0800149a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <MemManage_Handler+0x4>

080014a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <BusFault_Handler+0x4>

080014a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <UsageFault_Handler+0x4>

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
__HAL_TIM_SET_COUNTER(&htim2,0);
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <TIM2_IRQHandler+0x18>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM2_IRQHandler+0x18>)
 80014c6:	f001 fabe 	bl	8002a46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20003fa4 	.word	0x20003fa4

080014d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM4_IRQHandler+0x10>)
 80014da:	f001 fab4 	bl	8002a46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20003fe4 	.word	0x20003fe4

080014e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <USART1_IRQHandler+0x10>)
 80014ee:	f001 ff67 	bl	80033c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20003f04 	.word	0x20003f04

080014fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <_sbrk+0x50>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x16>
		heap_end = &end;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <_sbrk+0x50>)
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <_sbrk+0x54>)
 8001510:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <_sbrk+0x50>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <_sbrk+0x50>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	466a      	mov	r2, sp
 8001522:	4293      	cmp	r3, r2
 8001524:	d907      	bls.n	8001536 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001526:	f003 fdc5 	bl	80050b4 <__errno>
 800152a:	4602      	mov	r2, r0
 800152c:	230c      	movs	r3, #12
 800152e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	e006      	b.n	8001544 <_sbrk+0x48>
	}

	heap_end += incr;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <_sbrk+0x50>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a03      	ldr	r2, [pc, #12]	; (800154c <_sbrk+0x50>)
 8001540:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000300 	.word	0x20000300
 8001550:	20004030 	.word	0x20004030

08001554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <SystemInit+0x5c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <SystemInit+0x5c>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <SystemInit+0x5c>)
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4911      	ldr	r1, [pc, #68]	; (80015b0 <SystemInit+0x5c>)
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <SystemInit+0x60>)
 800156c:	4013      	ands	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <SystemInit+0x5c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <SystemInit+0x5c>)
 8001576:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800157a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <SystemInit+0x5c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SystemInit+0x5c>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <SystemInit+0x5c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <SystemInit+0x5c>)
 8001592:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001596:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SystemInit+0x5c>)
 800159a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800159e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SystemInit+0x64>)
 80015a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	f8ff0000 	.word	0xf8ff0000
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015be:	e003      	b.n	80015c8 <LoopCopyDataInit>

080015c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015c6:	3104      	adds	r1, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015d0:	d3f6      	bcc.n	80015c0 <CopyDataInit>
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015d4:	e002      	b.n	80015dc <LoopFillZerobss>

080015d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015d8:	f842 3b04 	str.w	r3, [r2], #4

080015dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015e0:	d3f9      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e2:	f7ff ffb7 	bl	8001554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f003 fd6b 	bl	80050c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7fe feb7 	bl	800035c <main>
  bx lr
 80015ee:	4770      	bx	lr
  ldr r3, =_sidata
 80015f0:	08005a84 	.word	0x08005a84
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015f8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80015fc:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001600:	2000402c 	.word	0x2000402c

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 f8d1 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fedc 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fde0 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_IncTick+0x20>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	2000000c 	.word	0x2000000c
 8001654:	20004024 	.word	0x20004024

08001658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20004024 	.word	0x20004024

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <__NVIC_EnableIRQ+0x34>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff4f 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff64 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ffb2 	bl	800175c <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff81 	bl	8001708 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff57 	bl	80016d0 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800183e:	2b02      	cmp	r3, #2
 8001840:	d005      	beq.n	800184e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2204      	movs	r2, #4
 8001846:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e051      	b.n	80018f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 020e 	bic.w	r2, r2, #14
 800185c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_DMA_Abort_IT+0xd0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d029      	beq.n	80018cc <HAL_DMA_Abort_IT+0xa0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <HAL_DMA_Abort_IT+0xd4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d022      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x9c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1f      	ldr	r2, [pc, #124]	; (8001904 <HAL_DMA_Abort_IT+0xd8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d01a      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x96>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_DMA_Abort_IT+0xdc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d012      	beq.n	80018bc <HAL_DMA_Abort_IT+0x90>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_DMA_Abort_IT+0xe0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00a      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x8a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_DMA_Abort_IT+0xe4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d102      	bne.n	80018b0 <HAL_DMA_Abort_IT+0x84>
 80018aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018ae:	e00e      	b.n	80018ce <HAL_DMA_Abort_IT+0xa2>
 80018b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b4:	e00b      	b.n	80018ce <HAL_DMA_Abort_IT+0xa2>
 80018b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ba:	e008      	b.n	80018ce <HAL_DMA_Abort_IT+0xa2>
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	e005      	b.n	80018ce <HAL_DMA_Abort_IT+0xa2>
 80018c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c6:	e002      	b.n	80018ce <HAL_DMA_Abort_IT+0xa2>
 80018c8:	2310      	movs	r3, #16
 80018ca:	e000      	b.n	80018ce <HAL_DMA_Abort_IT+0xa2>
 80018cc:	2301      	movs	r3, #1
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_DMA_Abort_IT+0xe8>)
 80018d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
    } 
  }
  return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40020008 	.word	0x40020008
 8001900:	4002001c 	.word	0x4002001c
 8001904:	40020030 	.word	0x40020030
 8001908:	40020044 	.word	0x40020044
 800190c:	40020058 	.word	0x40020058
 8001910:	4002006c 	.word	0x4002006c
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b08b      	sub	sp, #44	; 0x2c
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e127      	b.n	8001b7c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800192c:	2201      	movs	r2, #1
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8116 	bne.w	8001b76 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b12      	cmp	r3, #18
 8001950:	d034      	beq.n	80019bc <HAL_GPIO_Init+0xa4>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d80d      	bhi.n	8001972 <HAL_GPIO_Init+0x5a>
 8001956:	2b02      	cmp	r3, #2
 8001958:	d02b      	beq.n	80019b2 <HAL_GPIO_Init+0x9a>
 800195a:	2b02      	cmp	r3, #2
 800195c:	d804      	bhi.n	8001968 <HAL_GPIO_Init+0x50>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d031      	beq.n	80019c6 <HAL_GPIO_Init+0xae>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d01c      	beq.n	80019a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e048      	b.n	80019fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001968:	2b03      	cmp	r3, #3
 800196a:	d043      	beq.n	80019f4 <HAL_GPIO_Init+0xdc>
 800196c:	2b11      	cmp	r3, #17
 800196e:	d01b      	beq.n	80019a8 <HAL_GPIO_Init+0x90>
          break;
 8001970:	e043      	b.n	80019fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001972:	4a89      	ldr	r2, [pc, #548]	; (8001b98 <HAL_GPIO_Init+0x280>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d026      	beq.n	80019c6 <HAL_GPIO_Init+0xae>
 8001978:	4a87      	ldr	r2, [pc, #540]	; (8001b98 <HAL_GPIO_Init+0x280>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d806      	bhi.n	800198c <HAL_GPIO_Init+0x74>
 800197e:	4a87      	ldr	r2, [pc, #540]	; (8001b9c <HAL_GPIO_Init+0x284>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d020      	beq.n	80019c6 <HAL_GPIO_Init+0xae>
 8001984:	4a86      	ldr	r2, [pc, #536]	; (8001ba0 <HAL_GPIO_Init+0x288>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d01d      	beq.n	80019c6 <HAL_GPIO_Init+0xae>
          break;
 800198a:	e036      	b.n	80019fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800198c:	4a85      	ldr	r2, [pc, #532]	; (8001ba4 <HAL_GPIO_Init+0x28c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_GPIO_Init+0xae>
 8001992:	4a85      	ldr	r2, [pc, #532]	; (8001ba8 <HAL_GPIO_Init+0x290>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d016      	beq.n	80019c6 <HAL_GPIO_Init+0xae>
 8001998:	4a84      	ldr	r2, [pc, #528]	; (8001bac <HAL_GPIO_Init+0x294>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0xae>
          break;
 800199e:	e02c      	b.n	80019fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e028      	b.n	80019fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e023      	b.n	80019fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	3308      	adds	r3, #8
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e01e      	b.n	80019fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	330c      	adds	r3, #12
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e019      	b.n	80019fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ce:	2304      	movs	r3, #4
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e012      	b.n	80019fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	611a      	str	r2, [r3, #16]
          break;
 80019e6:	e008      	b.n	80019fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	615a      	str	r2, [r3, #20]
          break;
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2bff      	cmp	r3, #255	; 0xff
 80019fe:	d801      	bhi.n	8001a04 <HAL_GPIO_Init+0xec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	e001      	b.n	8001a08 <HAL_GPIO_Init+0xf0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2bff      	cmp	r3, #255	; 0xff
 8001a0e:	d802      	bhi.n	8001a16 <HAL_GPIO_Init+0xfe>
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	e002      	b.n	8001a1c <HAL_GPIO_Init+0x104>
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	210f      	movs	r1, #15
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	6a39      	ldr	r1, [r7, #32]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	431a      	orrs	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8096 	beq.w	8001b76 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4a:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_GPIO_Init+0x298>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_GPIO_Init+0x298>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x298>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a62:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_GPIO_Init+0x29c>)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4b      	ldr	r2, [pc, #300]	; (8001bb8 <HAL_GPIO_Init+0x2a0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0x19e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4a      	ldr	r2, [pc, #296]	; (8001bbc <HAL_GPIO_Init+0x2a4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_GPIO_Init+0x19a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a49      	ldr	r2, [pc, #292]	; (8001bc0 <HAL_GPIO_Init+0x2a8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x196>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_GPIO_Init+0x2ac>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_GPIO_Init+0x192>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x1a0>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e004      	b.n	8001ab8 <HAL_GPIO_Init+0x1a0>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_Init+0x1a0>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x1a0>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aba:	f002 0203 	and.w	r2, r2, #3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4093      	lsls	r3, r2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ac8:	493a      	ldr	r1, [pc, #232]	; (8001bb4 <HAL_GPIO_Init+0x29c>)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4938      	ldr	r1, [pc, #224]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4933      	ldr	r1, [pc, #204]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	492e      	ldr	r1, [pc, #184]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e006      	b.n	8001b26 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4929      	ldr	r1, [pc, #164]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	4924      	ldr	r1, [pc, #144]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	491f      	ldr	r1, [pc, #124]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	491a      	ldr	r1, [pc, #104]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60cb      	str	r3, [r1, #12]
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4915      	ldr	r1, [pc, #84]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f aed0 	bne.w	800192c <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	372c      	adds	r7, #44	; 0x2c
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	10210000 	.word	0x10210000
 8001b9c:	10110000 	.word	0x10110000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10310000 	.word	0x10310000
 8001ba8:	10320000 	.word	0x10320000
 8001bac:	10220000 	.word	0x10220000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40011400 	.word	0x40011400
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	611a      	str	r2, [r3, #16]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e26c      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8087 	beq.w	8001d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d00c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c28:	4b8f      	ldr	r3, [pc, #572]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d112      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5e>
 8001c34:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d10b      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c42:	4b89      	ldr	r3, [pc, #548]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d06c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x12c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d168      	bne.n	8001d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e246      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x76>
 8001c64:	4b80      	ldr	r3, [pc, #512]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a7f      	ldr	r2, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e02e      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x98>
 8001c7a:	4b7b      	ldr	r3, [pc, #492]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7a      	ldr	r2, [pc, #488]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b78      	ldr	r3, [pc, #480]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a77      	ldr	r2, [pc, #476]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01d      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xbc>
 8001c9e:	4b72      	ldr	r3, [pc, #456]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a71      	ldr	r2, [pc, #452]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6a      	ldr	r2, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fcbe 	bl	8001658 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fcba 	bl	8001658 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1fa      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe4>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fcaa 	bl	8001658 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fca6 	bl	8001658 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e1e6      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x10c>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d063      	beq.n	8001dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d42:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d11c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x18c>
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d116      	bne.n	8001d88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_RCC_OscConfig+0x176>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e1ba      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4939      	ldr	r1, [pc, #228]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	e03a      	b.n	8001dfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff fc5f 	bl	8001658 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fc5b 	bl	8001658 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e19b      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4927      	ldr	r1, [pc, #156]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
 8001dd0:	e015      	b.n	8001dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fc3e 	bl	8001658 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc3a 	bl	8001658 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e17a      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d03a      	beq.n	8001e80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d019      	beq.n	8001e46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff fc1e 	bl	8001658 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff fc1a 	bl	8001658 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e15a      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f000 fb0a 	bl	8002458 <RCC_Delay>
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fc04 	bl	8001658 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e52:	e00f      	b.n	8001e74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff fc00 	bl	8001658 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d908      	bls.n	8001e74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e140      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	42420000 	.word	0x42420000
 8001e70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	4b9e      	ldr	r3, [pc, #632]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1e9      	bne.n	8001e54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a6 	beq.w	8001fda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b97      	ldr	r3, [pc, #604]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b94      	ldr	r3, [pc, #592]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a93      	ldr	r2, [pc, #588]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b91      	ldr	r3, [pc, #580]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b8e      	ldr	r3, [pc, #568]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a8a      	ldr	r2, [pc, #552]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fbc1 	bl	8001658 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff fbbd 	bl	8001658 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0fd      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x312>
 8001f00:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a7a      	ldr	r2, [pc, #488]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	e02d      	b.n	8001f6a <HAL_RCC_OscConfig+0x36e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x334>
 8001f16:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a72      	ldr	r2, [pc, #456]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	e01c      	b.n	8001f6a <HAL_RCC_OscConfig+0x36e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x356>
 8001f38:	4b6d      	ldr	r3, [pc, #436]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a6c      	ldr	r2, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a69      	ldr	r2, [pc, #420]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x36e>
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a66      	ldr	r2, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fb71 	bl	8001658 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fb6d 	bl	8001658 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0ab      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCC_OscConfig+0x37e>
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fb5b 	bl	8001658 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff fb57 	bl	8001658 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e095      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a47      	ldr	r2, [pc, #284]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8081 	beq.w	80020e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe4:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d061      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d146      	bne.n	8002086 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_OscConfig+0x4fc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fb2b 	bl	8001658 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff fb27 	bl	8001658 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e067      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d108      	bne.n	8002040 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	492d      	ldr	r1, [pc, #180]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a19      	ldr	r1, [r3, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	430b      	orrs	r3, r1
 8002052:	4927      	ldr	r1, [pc, #156]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_OscConfig+0x4fc>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff fafb 	bl	8001658 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff faf7 	bl	8001658 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e037      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x46a>
 8002084:	e02f      	b.n	80020e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_RCC_OscConfig+0x4fc>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fae4 	bl	8001658 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff fae0 	bl	8001658 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e020      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x498>
 80020b2:	e018      	b.n	80020e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e013      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42420060 	.word	0x42420060

080020fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d0      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d910      	bls.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4965      	ldr	r1, [pc, #404]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b63      	ldr	r3, [pc, #396]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b8      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800217a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	494d      	ldr	r1, [pc, #308]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d040      	beq.n	800221c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e073      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4936      	ldr	r1, [pc, #216]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ec:	f7ff fa34 	bl	8001658 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7ff fa30 	bl	8001658 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e053      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 020c 	and.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	429a      	cmp	r2, r3
 800221a:	d1eb      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d210      	bcs.n	800224c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	4922      	ldr	r1, [pc, #136]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4916      	ldr	r1, [pc, #88]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800228a:	f000 f821 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800228e:	4601      	mov	r1, r0
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	fa21 f303 	lsr.w	r3, r1, r3
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1cc>)
 80022a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1d0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f896 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08005a30 	.word	0x08005a30
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b490      	push	{r4, r7}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022d8:	1d3c      	adds	r4, r7, #4
 80022da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022e0:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fa:	4b23      	ldr	r3, [pc, #140]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x40>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x46>
 800230e:	e02d      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002312:	623b      	str	r3, [r7, #32]
      break;
 8002314:	e02d      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002322:	4413      	add	r3, r2
 8002324:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002328:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	0c5b      	lsrs	r3, r3, #17
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002342:	4413      	add	r3, r2
 8002344:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002348:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4a0f      	ldr	r2, [pc, #60]	; (800238c <HAL_RCC_GetSysClockFreq+0xbc>)
 800234e:	fb02 f203 	mul.w	r2, r2, r3
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	e004      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	623b      	str	r3, [r7, #32]
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_RCC_GetSysClockFreq+0xbc>)
 800236e:	623b      	str	r3, [r7, #32]
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	6a3b      	ldr	r3, [r7, #32]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bc90      	pop	{r4, r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	08005a14 	.word	0x08005a14
 8002384:	08005a24 	.word	0x08005a24
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	003d0900 	.word	0x003d0900

08002394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000004 	.word	0x20000004

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023ac:	f7ff fff2 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b0:	4601      	mov	r1, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08005a40 	.word	0x08005a40

080023d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d4:	f7ff ffde 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023d8:	4601      	mov	r1, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	0adb      	lsrs	r3, r3, #11
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08005a40 	.word	0x08005a40

080023f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	220f      	movs	r2, #15
 8002406:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCC_GetClockConfig+0x58>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_RCC_GetClockConfig+0x58>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_GetClockConfig+0x58>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_RCC_GetClockConfig+0x58>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0207 	and.w	r2, r3, #7
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	40022000 	.word	0x40022000

08002458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <RCC_Delay+0x34>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <RCC_Delay+0x38>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0a5b      	lsrs	r3, r3, #9
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002474:	bf00      	nop
  }
  while (Delay --);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	60fa      	str	r2, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f9      	bne.n	8002474 <RCC_Delay+0x1c>
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000004 	.word	0x20000004
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e053      	b.n	800254e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7fe fec9 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	ea42 0103 	orr.w	r1, r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	0c1a      	lsrs	r2, r3, #16
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f002 0204 	and.w	r2, r2, #4
 800252c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b08c      	sub	sp, #48	; 0x30
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002564:	2301      	movs	r3, #1
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_SPI_TransmitReceive+0x26>
 8002578:	2302      	movs	r3, #2
 800257a:	e18a      	b.n	8002892 <HAL_SPI_TransmitReceive+0x33c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002584:	f7ff f868 	bl	8001658 <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800259e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d00f      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x70>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ac:	d107      	bne.n	80025be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <HAL_SPI_TransmitReceive+0x68>
 80025b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d003      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025be:	2302      	movs	r3, #2
 80025c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025c4:	e15b      	b.n	800287e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_SPI_TransmitReceive+0x82>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_SPI_TransmitReceive+0x82>
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025de:	e14e      	b.n	800287e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d003      	beq.n	80025f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2205      	movs	r2, #5
 80025f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	887a      	ldrh	r2, [r7, #2]
 8002616:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d007      	beq.n	8002648 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002650:	d178      	bne.n	8002744 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x10a>
 800265a:	8b7b      	ldrh	r3, [r7, #26]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d166      	bne.n	800272e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	1c9a      	adds	r2, r3, #2
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002684:	e053      	b.n	800272e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d11b      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x176>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x176>
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d113      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	881a      	ldrh	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d119      	bne.n	800270e <HAL_SPI_TransmitReceive+0x1b8>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d014      	beq.n	800270e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	b292      	uxth	r2, r2
 80026f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	1c9a      	adds	r2, r3, #2
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800270a:	2301      	movs	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800270e:	f7fe ffa3 	bl	8001658 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800271a:	429a      	cmp	r2, r3
 800271c:	d807      	bhi.n	800272e <HAL_SPI_TransmitReceive+0x1d8>
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d003      	beq.n	800272e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800272c:	e0a7      	b.n	800287e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1a6      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x130>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1a1      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x130>
 8002742:	e07c      	b.n	800283e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_SPI_TransmitReceive+0x1fc>
 800274c:	8b7b      	ldrh	r3, [r7, #26]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d16b      	bne.n	800282a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002778:	e057      	b.n	800282a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d11c      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x26c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d017      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x26c>
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d114      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d119      	bne.n	8002804 <HAL_SPI_TransmitReceive+0x2ae>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d014      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002804:	f7fe ff28 	bl	8001658 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002810:	429a      	cmp	r2, r3
 8002812:	d803      	bhi.n	800281c <HAL_SPI_TransmitReceive+0x2c6>
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d102      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x2cc>
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002828:	e029      	b.n	800287e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1a2      	bne.n	800277a <HAL_SPI_TransmitReceive+0x224>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d19d      	bne.n	800277a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f893 	bl	800296e <SPI_EndRxTxTransaction>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800285a:	e010      	b.n	800287e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10b      	bne.n	800287c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	e000      	b.n	800287e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800287c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800288e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002892:	4618      	mov	r0, r3
 8002894:	3730      	adds	r7, #48	; 0x30
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028aa:	e04c      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d048      	beq.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028b4:	f7fe fed0 	bl	8001658 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d902      	bls.n	80028ca <SPI_WaitFlagStateUntilTimeout+0x30>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d13d      	bne.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e2:	d111      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ec:	d004      	beq.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d107      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002910:	d10f      	bne.n	8002932 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00f      	b.n	8002966 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d1a3      	bne.n	80028ac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af02      	add	r7, sp, #8
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2200      	movs	r2, #0
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff ff88 	bl	800289a <SPI_WaitFlagStateUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e000      	b.n	80029a2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e01d      	b.n	80029f8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fe fc8b 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f000 fa0f 	bl	8002e0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d007      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d122      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d11b      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 0202 	mvn.w	r2, #2
 8002a72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f9a4 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002a8e:	e005      	b.n	8002a9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f997 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9a6 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d122      	bne.n	8002af6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d11b      	bne.n	8002af6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f06f 0204 	mvn.w	r2, #4
 8002ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f97a 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002ae2:	e005      	b.n	8002af0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f96d 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f97c 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d122      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11b      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f06f 0208 	mvn.w	r2, #8
 8002b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f950 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002b36:	e005      	b.n	8002b44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f943 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f952 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d122      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d11b      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f06f 0210 	mvn.w	r2, #16
 8002b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2208      	movs	r2, #8
 8002b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f926 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002b8a:	e005      	b.n	8002b98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f919 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f928 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10e      	bne.n	8002bca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0201 	mvn.w	r2, #1
 8002bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe f83d 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d10e      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d107      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fa50 	bl	8003096 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d10e      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f8ec 	bl	8002dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d10e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0220 	mvn.w	r2, #32
 8002c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fa1b 	bl	8003084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_ConfigClockSource+0x18>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e0a6      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x166>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c94:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d067      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x120>
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d80b      	bhi.n	8002cc2 <HAL_TIM_ConfigClockSource+0x6c>
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d073      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x140>
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x62>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d06f      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002cb6:	e078      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d06c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x140>
 8002cbc:	2b30      	cmp	r3, #48	; 0x30
 8002cbe:	d06a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002cc0:	e073      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cc2:	2b70      	cmp	r3, #112	; 0x70
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x8c>
 8002cc6:	2b70      	cmp	r3, #112	; 0x70
 8002cc8:	d804      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x7e>
 8002cca:	2b50      	cmp	r3, #80	; 0x50
 8002ccc:	d033      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xe0>
 8002cce:	2b60      	cmp	r3, #96	; 0x60
 8002cd0:	d041      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cd2:	e06a      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd8:	d066      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x152>
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d017      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ce0:	e063      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f000 f964 	bl	8002fbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	609a      	str	r2, [r3, #8]
      break;
 8002d0e:	e04c      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f000 f94d 	bl	8002fbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d32:	609a      	str	r2, [r3, #8]
      break;
 8002d34:	e039      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8c4 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2150      	movs	r1, #80	; 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f91b 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d54:	e029      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8e2 	bl	8002f2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2160      	movs	r1, #96	; 0x60
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f90b 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d74:	e019      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f8a4 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f8fb 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d94:	e009      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 f8f2 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002da6:	e000      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002da8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <TIM_Base_SetConfig+0xb8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <TIM_Base_SetConfig+0xbc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <TIM_Base_SetConfig+0xc0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d108      	bne.n	8002e4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <TIM_Base_SetConfig+0xb8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <TIM_Base_SetConfig+0xbc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <TIM_Base_SetConfig+0xc0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <TIM_Base_SetConfig+0xb8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800

08002ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 030a 	bic.w	r3, r3, #10
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 0210 	bic.w	r2, r3, #16
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	031b      	lsls	r3, r3, #12
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	621a      	str	r2, [r3, #32]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f043 0307 	orr.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003010:	2302      	movs	r3, #2
 8003012:	e032      	b.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e03f      	b.n	800313a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fe f930 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fbe7 	bl	80038c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b088      	sub	sp, #32
 8003146:	af02      	add	r7, sp, #8
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	f040 8083 	bne.w	800326a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_UART_Transmit+0x2e>
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e07b      	b.n	800326c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_UART_Transmit+0x40>
 800317e:	2302      	movs	r3, #2
 8003180:	e074      	b.n	800326c <HAL_UART_Transmit+0x12a>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2221      	movs	r2, #33	; 0x21
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003198:	f7fe fa5e 	bl	8001658 <HAL_GetTick>
 800319c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	88fa      	ldrh	r2, [r7, #6]
 80031a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031aa:	e042      	b.n	8003232 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	d122      	bne.n	800320a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa0d 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e046      	b.n	800326c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3302      	adds	r3, #2
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	e017      	b.n	8003232 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3301      	adds	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	e013      	b.n	8003232 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f9ea 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e023      	b.n	800326c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	60ba      	str	r2, [r7, #8]
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1b7      	bne.n	80031ac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2200      	movs	r2, #0
 8003244:	2140      	movs	r1, #64	; 0x40
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f9d1 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e00a      	b.n	800326c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b20      	cmp	r3, #32
 8003292:	f040 8090 	bne.w	80033b6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_UART_Receive+0x2e>
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e088      	b.n	80033b8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Receive+0x40>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e081      	b.n	80033b8 <HAL_UART_Receive+0x144>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2222      	movs	r2, #34	; 0x22
 80032c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032ca:	f7fe f9c5 	bl	8001658 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032dc:	e05c      	b.n	8003398 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d12b      	bne.n	800334e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2120      	movs	r1, #32
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f974 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e053      	b.n	80033b8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10c      	bne.n	8003336 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003328:	b29a      	uxth	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3302      	adds	r3, #2
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	e030      	b.n	8003398 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b29b      	uxth	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	b29a      	uxth	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3301      	adds	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	e024      	b.n	8003398 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	2120      	movs	r1, #32
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f948 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e027      	b.n	80033b8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	60ba      	str	r2, [r7, #8]
 800337c:	b2ca      	uxtb	r2, r1
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e00a      	b.n	8003398 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d19d      	bne.n	80032de <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_UART_IRQHandler+0x52>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9d7 	bl	80037be <UART_Receive_IT>
      return;
 8003410:	e0cc      	b.n	80035ac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80ab 	beq.w	8003570 <HAL_UART_IRQHandler+0x1b0>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <HAL_UART_IRQHandler+0x70>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a0 	beq.w	8003570 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_UART_IRQHandler+0x90>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_UART_IRQHandler+0xb0>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	f043 0202 	orr.w	r2, r3, #2
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_UART_IRQHandler+0xd0>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_UART_IRQHandler+0xf0>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f043 0208 	orr.w	r2, r3, #8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d078      	beq.n	80035aa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_UART_IRQHandler+0x112>
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f976 	bl	80037be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_UART_IRQHandler+0x13a>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d031      	beq.n	800355e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8c1 	bl	8003682 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d023      	beq.n	8003556 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	2b00      	cmp	r3, #0
 8003524:	d013      	beq.n	800354e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <HAL_UART_IRQHandler+0x1f4>)
 800352c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe f97a 	bl	800182c <HAL_DMA_Abort_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003548:	4610      	mov	r0, r2
 800354a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00e      	b.n	800356c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f844 	bl	80035dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e00a      	b.n	800356c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f840 	bl	80035dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e006      	b.n	800356c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f83c 	bl	80035dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800356a:	e01e      	b.n	80035aa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	bf00      	nop
    return;
 800356e:	e01c      	b.n	80035aa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_UART_IRQHandler+0x1cc>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8ad 	bl	80036e4 <UART_Transmit_IT>
    return;
 800358a:	e00f      	b.n	80035ac <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_UART_IRQHandler+0x1ec>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f8f4 	bl	800378e <UART_EndTransmit_IT>
    return;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <HAL_UART_IRQHandler+0x1ec>
    return;
 80035aa:	bf00      	nop
  }
}
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	080036bd 	.word	0x080036bd

080035b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	e02c      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d028      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0x30>
 800360e:	f7fe f823 	bl	8001658 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d21d      	bcs.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800362c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00f      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d0c3      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003698:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff ff80 	bl	80035dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b21      	cmp	r3, #33	; 0x21
 80036f6:	d144      	bne.n	8003782 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d11a      	bne.n	8003738 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003716:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	621a      	str	r2, [r3, #32]
 800372a:	e00e      	b.n	800374a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]
 8003736:	e008      	b.n	800374a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	1c59      	adds	r1, r3, #1
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6211      	str	r1, [r2, #32]
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4619      	mov	r1, r3
 8003758:	84d1      	strh	r1, [r2, #38]	; 0x26
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff02 	bl	80035b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b22      	cmp	r3, #34	; 0x22
 80037d0:	d171      	bne.n	80038b6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037da:	d123      	bne.n	8003824 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10e      	bne.n	8003808 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	1c9a      	adds	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
 8003806:	e029      	b.n	800385c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b29b      	uxth	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
 8003822:	e01b      	b.n	800385c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6858      	ldr	r0, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6291      	str	r1, [r2, #40]	; 0x28
 800383c:	b2c2      	uxtb	r2, r0
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e00c      	b.n	800385c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	1c58      	adds	r0, r3, #1
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	6288      	str	r0, [r1, #40]	; 0x28
 8003854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29b      	uxth	r3, r3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4619      	mov	r1, r3
 800386a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800386c:	2b00      	cmp	r3, #0
 800386e:	d120      	bne.n	80038b2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0220 	bic.w	r2, r2, #32
 800387e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff fe8e 	bl	80035ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e002      	b.n	80038b8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038fa:	f023 030c 	bic.w	r3, r3, #12
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	68f9      	ldr	r1, [r7, #12]
 8003904:	430b      	orrs	r3, r1
 8003906:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a52      	ldr	r2, [pc, #328]	; (8003a6c <UART_SetConfig+0x1ac>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d14e      	bne.n	80039c6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe fd52 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 800392c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	4a4a      	ldr	r2, [pc, #296]	; (8003a70 <UART_SetConfig+0x1b0>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	0119      	lsls	r1, r3, #4
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fbb2 f2f3 	udiv	r2, r2, r3
 8003964:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <UART_SetConfig+0x1b0>)
 8003966:	fba3 0302 	umull	r0, r3, r3, r2
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2064      	movs	r0, #100	; 0x64
 800396e:	fb00 f303 	mul.w	r3, r0, r3
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	3332      	adds	r3, #50	; 0x32
 8003978:	4a3d      	ldr	r2, [pc, #244]	; (8003a70 <UART_SetConfig+0x1b0>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003984:	4419      	add	r1, r3
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fbb2 f2f3 	udiv	r2, r2, r3
 800399c:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <UART_SetConfig+0x1b0>)
 800399e:	fba3 0302 	umull	r0, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2064      	movs	r0, #100	; 0x64
 80039a6:	fb00 f303 	mul.w	r3, r0, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a2f      	ldr	r2, [pc, #188]	; (8003a70 <UART_SetConfig+0x1b0>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	440a      	add	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039c4:	e04d      	b.n	8003a62 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039c6:	f7fe fcef 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 80039ca:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009a      	lsls	r2, r3, #2
 80039d6:	441a      	add	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <UART_SetConfig+0x1b0>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	0119      	lsls	r1, r3, #4
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <UART_SetConfig+0x1b0>)
 8003a04:	fba3 0302 	umull	r0, r3, r3, r2
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	2064      	movs	r0, #100	; 0x64
 8003a0c:	fb00 f303 	mul.w	r3, r0, r3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	3332      	adds	r3, #50	; 0x32
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <UART_SetConfig+0x1b0>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a22:	4419      	add	r1, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009a      	lsls	r2, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <UART_SetConfig+0x1b0>)
 8003a3c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2064      	movs	r0, #100	; 0x64
 8003a44:	fb00 f303 	mul.w	r3, r0, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <UART_SetConfig+0x1b0>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 020f 	and.w	r2, r3, #15
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	440a      	add	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	51eb851f 	.word	0x51eb851f

08003a74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a86:	2b84      	cmp	r3, #132	; 0x84
 8003a88:	d005      	beq.n	8003a96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	3303      	adds	r3, #3
 8003a94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003aa6:	f000 fc07 	bl	80042b8 <vTaskStartScheduler>
  
  return osOK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af04      	add	r7, sp, #16
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d020      	beq.n	8003b04 <osThreadCreate+0x54>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01c      	beq.n	8003b04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685c      	ldr	r4, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681d      	ldr	r5, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691e      	ldr	r6, [r3, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ffc9 	bl	8003a74 <makeFreeRtosPriority>
 8003ae2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aec:	9202      	str	r2, [sp, #8]
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	9100      	str	r1, [sp, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	4632      	mov	r2, r6
 8003af6:	4629      	mov	r1, r5
 8003af8:	4620      	mov	r0, r4
 8003afa:	f000 f8e8 	bl	8003cce <xTaskCreateStatic>
 8003afe:	4603      	mov	r3, r0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e01c      	b.n	8003b3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685c      	ldr	r4, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b10:	b29e      	uxth	r6, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ffab 	bl	8003a74 <makeFreeRtosPriority>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	9200      	str	r2, [sp, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f000 f926 	bl	8003d80 <xTaskCreate>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <osDelay+0x16>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	e000      	b.n	8003b60 <osDelay+0x18>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa4d 	bl	8004000 <vTaskDelay>
  
  return osOK;
 8003b66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f103 0208 	add.w	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295
 8003b88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f103 0208 	add.w	r2, r3, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f103 0208 	add.w	r2, r3, #8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d103      	bne.n	8003c2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e00c      	b.n	8003c46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e002      	b.n	8003c3a <vListInsert+0x2e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d2f6      	bcs.n	8003c34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6892      	ldr	r2, [r2, #8]
 8003c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6852      	ldr	r2, [r2, #4]
 8003c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d103      	bne.n	8003cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	1e5a      	subs	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b08e      	sub	sp, #56	; 0x38
 8003cd2:	af04      	add	r7, sp, #16
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	e7fe      	b.n	8003cf4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <xTaskCreateStatic+0x42>
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e7fe      	b.n	8003d0e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d10:	2364      	movs	r3, #100	; 0x64
 8003d12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d009      	beq.n	8003d2e <xTaskCreateStatic+0x60>
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	e7fe      	b.n	8003d2c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01e      	beq.n	8003d72 <xTaskCreateStatic+0xa4>
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01b      	beq.n	8003d72 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9303      	str	r3, [sp, #12]
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	9302      	str	r3, [sp, #8]
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f850 	bl	8003e0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d6c:	f000 f8da 	bl	8003f24 <prvAddNewTaskToReadyList>
 8003d70:	e001      	b.n	8003d76 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d76:	697b      	ldr	r3, [r7, #20]
	}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3728      	adds	r7, #40	; 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	; 0x30
 8003d84:	af04      	add	r7, sp, #16
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 ffb9 	bl	8004d0c <pvPortMalloc>
 8003d9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003da2:	2064      	movs	r0, #100	; 0x64
 8003da4:	f000 ffb2 	bl	8004d0c <pvPortMalloc>
 8003da8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
 8003db6:	e005      	b.n	8003dc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003db8:	6978      	ldr	r0, [r7, #20]
 8003dba:	f001 f869 	bl	8004e90 <vPortFree>
 8003dbe:	e001      	b.n	8003dc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d017      	beq.n	8003dfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9303      	str	r3, [sp, #12]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	9302      	str	r3, [sp, #8]
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f80e 	bl	8003e0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dee:	69f8      	ldr	r0, [r7, #28]
 8003df0:	f000 f898 	bl	8003f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003df4:	2301      	movs	r3, #1
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e002      	b.n	8003e00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e00:	69bb      	ldr	r3, [r7, #24]
	}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b088      	sub	sp, #32
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	461a      	mov	r2, r3
 8003e22:	21a5      	movs	r1, #165	; 0xa5
 8003e24:	f001 f97b 	bl	800511e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e32:	3b01      	subs	r3, #1
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f023 0307 	bic.w	r3, r3, #7
 8003e40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <prvInitialiseNewTask+0x56>
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e7fe      	b.n	8003e5e <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e012      	b.n	8003e92 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	7819      	ldrb	r1, [r3, #0]
 8003e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3334      	adds	r3, #52	; 0x34
 8003e7c:	460a      	mov	r2, r1
 8003e7e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b0f      	cmp	r3, #15
 8003e96:	d9e9      	bls.n	8003e6c <prvInitialiseNewTask+0x62>
 8003e98:	e000      	b.n	8003e9c <prvInitialiseNewTask+0x92>
		{
			break;
 8003e9a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d901      	bls.n	8003eae <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003eaa:	2306      	movs	r3, #6
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fe72 	bl	8003bae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	3318      	adds	r3, #24
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fe6d 	bl	8003bae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	f1c3 0207 	rsb	r2, r3, #7
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	2200      	movs	r2, #0
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	69b8      	ldr	r0, [r7, #24]
 8003f04:	f000 fd5e 	bl	80049c4 <pxPortInitialiseStack>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f1a:	bf00      	nop
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f2c:	f000 fe34 	bl	8004b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f30:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <prvAddNewTaskToReadyList+0xc0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <prvAddNewTaskToReadyList+0xc0>)
 8003f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <prvAddNewTaskToReadyList+0xc0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d110      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f50:	f000 fc14 	bl	800477c <prvInitialiseTaskLists>
 8003f54:	e00d      	b.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f56:	4b25      	ldr	r3, [pc, #148]	; (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d802      	bhi.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f72:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <prvAddNewTaskToReadyList+0xcc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <prvAddNewTaskToReadyList+0xcc>)
 8003f7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <prvAddNewTaskToReadyList+0xcc>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	2201      	movs	r2, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <prvAddNewTaskToReadyList+0xd0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <prvAddNewTaskToReadyList+0xd0>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <prvAddNewTaskToReadyList+0xd4>)
 8003fa4:	441a      	add	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7ff fe0a 	bl	8003bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fb2:	f000 fe1f 	bl	8004bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d207      	bcs.n	8003fdc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <prvAddNewTaskToReadyList+0xd8>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000404 	.word	0x20000404
 8003fe8:	20000304 	.word	0x20000304
 8003fec:	20000410 	.word	0x20000410
 8003ff0:	20000420 	.word	0x20000420
 8003ff4:	2000040c 	.word	0x2000040c
 8003ff8:	20000308 	.word	0x20000308
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <vTaskDelay+0x60>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <vTaskDelay+0x2e>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	e7fe      	b.n	800402c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800402e:	f000 f9a3 	bl	8004378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004032:	2100      	movs	r1, #0
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fc5f 	bl	80048f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800403a:	f000 f9ab 	bl	8004394 <xTaskResumeAll>
 800403e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004046:	4b07      	ldr	r3, [pc, #28]	; (8004064 <vTaskDelay+0x64>)
 8004048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2000042c 	.word	0x2000042c
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004070:	f000 fd92 	bl	8004b98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <vTaskSuspend+0x18>
 800407a:	4b3c      	ldr	r3, [pc, #240]	; (800416c <vTaskSuspend+0x104>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	e000      	b.n	8004082 <vTaskSuspend+0x1a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fdf7 	bl	8003c7c <uxListRemove>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d115      	bne.n	80040c0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4935      	ldr	r1, [pc, #212]	; (8004170 <vTaskSuspend+0x108>)
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <vTaskSuspend+0x58>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	2201      	movs	r2, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43da      	mvns	r2, r3
 80040b6:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <vTaskSuspend+0x10c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4013      	ands	r3, r2
 80040bc:	4a2d      	ldr	r2, [pc, #180]	; (8004174 <vTaskSuspend+0x10c>)
 80040be:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3318      	adds	r3, #24
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fdd5 	bl	8003c7c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4827      	ldr	r0, [pc, #156]	; (8004178 <vTaskSuspend+0x110>)
 80040da:	f7ff fd74 	bl	8003bc6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d103      	bne.n	80040f2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80040f2:	f000 fd7f 	bl	8004bf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80040f6:	4b21      	ldr	r3, [pc, #132]	; (800417c <vTaskSuspend+0x114>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80040fe:	f000 fd4b 	bl	8004b98 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004102:	f000 fbd5 	bl	80048b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004106:	f000 fd75 	bl	8004bf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800410a:	4b18      	ldr	r3, [pc, #96]	; (800416c <vTaskSuspend+0x104>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	429a      	cmp	r2, r3
 8004112:	d126      	bne.n	8004162 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <vTaskSuspend+0x114>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d016      	beq.n	800414a <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800411c:	4b18      	ldr	r3, [pc, #96]	; (8004180 <vTaskSuspend+0x118>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <vTaskSuspend+0xd0>
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	e7fe      	b.n	8004136 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <vTaskSuspend+0x11c>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004148:	e00b      	b.n	8004162 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <vTaskSuspend+0x110>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <vTaskSuspend+0x120>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d103      	bne.n	800415e <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <vTaskSuspend+0x104>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
	}
 800415c:	e001      	b.n	8004162 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800415e:	f000 fa7f 	bl	8004660 <vTaskSwitchContext>
	}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000304 	.word	0x20000304
 8004170:	20000308 	.word	0x20000308
 8004174:	2000040c 	.word	0x2000040c
 8004178:	200003f0 	.word	0x200003f0
 800417c:	20000410 	.word	0x20000410
 8004180:	2000042c 	.word	0x2000042c
 8004184:	e000ed04 	.word	0xe000ed04
 8004188:	20000404 	.word	0x20000404

0800418c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <prvTaskIsTaskSuspended+0x2a>
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e7fe      	b.n	80041b4 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <prvTaskIsTaskSuspended+0x6c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <prvTaskIsTaskSuspended+0x38>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <prvTaskIsTaskSuspended+0x3a>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00f      	beq.n	80041ea <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <prvTaskIsTaskSuspended+0x70>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00a      	beq.n	80041ea <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <prvTaskIsTaskSuspended+0x54>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <prvTaskIsTaskSuspended+0x56>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80041e6:	2301      	movs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041ea:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80041ec:	4618      	mov	r0, r3
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	200003f0 	.word	0x200003f0
 80041fc:	200003c4 	.word	0x200003c4

08004200 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <vTaskResume+0x26>
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	e7fe      	b.n	8004224 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d039      	beq.n	80042a0 <vTaskResume+0xa0>
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <vTaskResume+0xa8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	429a      	cmp	r2, r3
 8004234:	d034      	beq.n	80042a0 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8004236:	f000 fcaf 	bl	8004b98 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff ffa6 	bl	800418c <prvTaskIsTaskSuspended>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d02a      	beq.n	800429c <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fd16 	bl	8003c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	2201      	movs	r2, #1
 8004256:	409a      	lsls	r2, r3
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <vTaskResume+0xac>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4313      	orrs	r3, r2
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <vTaskResume+0xac>)
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a10      	ldr	r2, [pc, #64]	; (80042b0 <vTaskResume+0xb0>)
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7ff fca4 	bl	8003bc6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <vTaskResume+0xa8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	429a      	cmp	r2, r3
 800428a:	d307      	bcc.n	800429c <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <vTaskResume+0xb4>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800429c:	f000 fcaa 	bl	8004bf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000304 	.word	0x20000304
 80042ac:	2000040c 	.word	0x2000040c
 80042b0:	20000308 	.word	0x20000308
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042c6:	463a      	mov	r2, r7
 80042c8:	1d39      	adds	r1, r7, #4
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fb ff54 	bl	800017c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	9202      	str	r2, [sp, #8]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	2300      	movs	r3, #0
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	460a      	mov	r2, r1
 80042e6:	491e      	ldr	r1, [pc, #120]	; (8004360 <vTaskStartScheduler+0xa8>)
 80042e8:	481e      	ldr	r0, [pc, #120]	; (8004364 <vTaskStartScheduler+0xac>)
 80042ea:	f7ff fcf0 	bl	8003cce <xTaskCreateStatic>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <vTaskStartScheduler+0xb0>)
 80042f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <vTaskStartScheduler+0xb0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e001      	b.n	8004306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d117      	bne.n	800433c <vTaskStartScheduler+0x84>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <vTaskStartScheduler+0xb4>)
 8004320:	f04f 32ff 	mov.w	r2, #4294967295
 8004324:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <vTaskStartScheduler+0xb8>)
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <vTaskStartScheduler+0xbc>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004332:	f7fb ff15 	bl	8000160 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004336:	f000 fbbf 	bl	8004ab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800433a:	e00d      	b.n	8004358 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d109      	bne.n	8004358 <vTaskStartScheduler+0xa0>
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e7fe      	b.n	8004356 <vTaskStartScheduler+0x9e>
}
 8004358:	bf00      	nop
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08005a28 	.word	0x08005a28
 8004364:	0800474d 	.word	0x0800474d
 8004368:	20000428 	.word	0x20000428
 800436c:	20000424 	.word	0x20000424
 8004370:	20000410 	.word	0x20000410
 8004374:	20000408 	.word	0x20000408

08004378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <vTaskSuspendAll+0x18>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	4a03      	ldr	r2, [pc, #12]	; (8004390 <vTaskSuspendAll+0x18>)
 8004384:	6013      	str	r3, [r2, #0]
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	2000042c 	.word	0x2000042c

08004394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043a2:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <xTaskResumeAll+0x114>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <xTaskResumeAll+0x2a>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	e7fe      	b.n	80043bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043be:	f000 fbeb 	bl	8004b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <xTaskResumeAll+0x114>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	4a37      	ldr	r2, [pc, #220]	; (80044a8 <xTaskResumeAll+0x114>)
 80043ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <xTaskResumeAll+0x114>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d161      	bne.n	8004498 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043d4:	4b35      	ldr	r3, [pc, #212]	; (80044ac <xTaskResumeAll+0x118>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d05d      	beq.n	8004498 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043dc:	e02e      	b.n	800443c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80043de:	4b34      	ldr	r3, [pc, #208]	; (80044b0 <xTaskResumeAll+0x11c>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3318      	adds	r3, #24
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fc46 	bl	8003c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fc41 	bl	8003c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	2201      	movs	r2, #1
 8004400:	409a      	lsls	r2, r3
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <xTaskResumeAll+0x120>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4313      	orrs	r3, r2
 8004408:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <xTaskResumeAll+0x120>)
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <xTaskResumeAll+0x124>)
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7ff fbcf 	bl	8003bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4b23      	ldr	r3, [pc, #140]	; (80044bc <xTaskResumeAll+0x128>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004436:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <xTaskResumeAll+0x12c>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <xTaskResumeAll+0x11c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1cc      	bne.n	80043de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800444a:	f000 fa31 	bl	80048b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <xTaskResumeAll+0x130>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800445a:	f000 f845 	bl	80044e8 <xTaskIncrementTick>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004464:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <xTaskResumeAll+0x12c>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3b01      	subs	r3, #1
 800446e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f1      	bne.n	800445a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <xTaskResumeAll+0x130>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <xTaskResumeAll+0x12c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <xTaskResumeAll+0x134>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004498:	f000 fbac 	bl	8004bf4 <vPortExitCritical>

	return xAlreadyYielded;
 800449c:	68bb      	ldr	r3, [r7, #8]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000042c 	.word	0x2000042c
 80044ac:	20000404 	.word	0x20000404
 80044b0:	200003c4 	.word	0x200003c4
 80044b4:	2000040c 	.word	0x2000040c
 80044b8:	20000308 	.word	0x20000308
 80044bc:	20000304 	.word	0x20000304
 80044c0:	20000418 	.word	0x20000418
 80044c4:	20000414 	.word	0x20000414
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <xTaskGetTickCount+0x18>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044d8:	687b      	ldr	r3, [r7, #4]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20000408 	.word	0x20000408

080044e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f2:	4b50      	ldr	r3, [pc, #320]	; (8004634 <xTaskIncrementTick+0x14c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 808c 	bne.w	8004614 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044fc:	4b4e      	ldr	r3, [pc, #312]	; (8004638 <xTaskIncrementTick+0x150>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3301      	adds	r3, #1
 8004502:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004504:	4a4c      	ldr	r2, [pc, #304]	; (8004638 <xTaskIncrementTick+0x150>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11f      	bne.n	8004550 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004510:	4b4a      	ldr	r3, [pc, #296]	; (800463c <xTaskIncrementTick+0x154>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <xTaskIncrementTick+0x46>
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	e7fe      	b.n	800452c <xTaskIncrementTick+0x44>
 800452e:	4b43      	ldr	r3, [pc, #268]	; (800463c <xTaskIncrementTick+0x154>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	4b42      	ldr	r3, [pc, #264]	; (8004640 <xTaskIncrementTick+0x158>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a40      	ldr	r2, [pc, #256]	; (800463c <xTaskIncrementTick+0x154>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4a40      	ldr	r2, [pc, #256]	; (8004640 <xTaskIncrementTick+0x158>)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b40      	ldr	r3, [pc, #256]	; (8004644 <xTaskIncrementTick+0x15c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a3e      	ldr	r2, [pc, #248]	; (8004644 <xTaskIncrementTick+0x15c>)
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	f000 f9b0 	bl	80048b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004550:	4b3d      	ldr	r3, [pc, #244]	; (8004648 <xTaskIncrementTick+0x160>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	429a      	cmp	r2, r3
 8004558:	d34d      	bcc.n	80045f6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <xTaskIncrementTick+0x154>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <xTaskIncrementTick+0x80>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <xTaskIncrementTick+0x82>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456e:	4b36      	ldr	r3, [pc, #216]	; (8004648 <xTaskIncrementTick+0x160>)
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	601a      	str	r2, [r3, #0]
					break;
 8004576:	e03e      	b.n	80045f6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <xTaskIncrementTick+0x154>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d203      	bcs.n	8004598 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004590:	4a2d      	ldr	r2, [pc, #180]	; (8004648 <xTaskIncrementTick+0x160>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
						break;
 8004596:	e02e      	b.n	80045f6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3304      	adds	r3, #4
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fb6d 	bl	8003c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3318      	adds	r3, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fb64 	bl	8003c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	4b23      	ldr	r3, [pc, #140]	; (800464c <xTaskIncrementTick+0x164>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	4a22      	ldr	r2, [pc, #136]	; (800464c <xTaskIncrementTick+0x164>)
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <xTaskIncrementTick+0x168>)
 80045d4:	441a      	add	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f7ff faf2 	bl	8003bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e6:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <xTaskIncrementTick+0x16c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d3b4      	bcc.n	800455a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f4:	e7b1      	b.n	800455a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045f6:	4b17      	ldr	r3, [pc, #92]	; (8004654 <xTaskIncrementTick+0x16c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	4914      	ldr	r1, [pc, #80]	; (8004650 <xTaskIncrementTick+0x168>)
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d907      	bls.n	800461e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800460e:	2301      	movs	r3, #1
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e004      	b.n	800461e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <xTaskIncrementTick+0x170>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <xTaskIncrementTick+0x170>)
 800461c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <xTaskIncrementTick+0x174>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004626:	2301      	movs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800462a:	697b      	ldr	r3, [r7, #20]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	2000042c 	.word	0x2000042c
 8004638:	20000408 	.word	0x20000408
 800463c:	200003bc 	.word	0x200003bc
 8004640:	200003c0 	.word	0x200003c0
 8004644:	2000041c 	.word	0x2000041c
 8004648:	20000424 	.word	0x20000424
 800464c:	2000040c 	.word	0x2000040c
 8004650:	20000308 	.word	0x20000308
 8004654:	20000304 	.word	0x20000304
 8004658:	20000414 	.word	0x20000414
 800465c:	20000418 	.word	0x20000418

08004660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004666:	4b32      	ldr	r3, [pc, #200]	; (8004730 <vTaskSwitchContext+0xd0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <vTaskSwitchContext+0xd4>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004674:	e057      	b.n	8004726 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <vTaskSwitchContext+0xd4>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800467c:	f7fb fd76 	bl	800016c <getRunTimeCounterValue>
 8004680:	4602      	mov	r2, r0
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <vTaskSwitchContext+0xd8>)
 8004684:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <vTaskSwitchContext+0xd8>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b2c      	ldr	r3, [pc, #176]	; (800473c <vTaskSwitchContext+0xdc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d909      	bls.n	80046a6 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004692:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <vTaskSwitchContext+0xe0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004698:	4a27      	ldr	r2, [pc, #156]	; (8004738 <vTaskSwitchContext+0xd8>)
 800469a:	6810      	ldr	r0, [r2, #0]
 800469c:	4a27      	ldr	r2, [pc, #156]	; (800473c <vTaskSwitchContext+0xdc>)
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	1a82      	subs	r2, r0, r2
 80046a2:	440a      	add	r2, r1
 80046a4:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <vTaskSwitchContext+0xd8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a24      	ldr	r2, [pc, #144]	; (800473c <vTaskSwitchContext+0xdc>)
 80046ac:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046ae:	4b25      	ldr	r3, [pc, #148]	; (8004744 <vTaskSwitchContext+0xe4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046bc:	7afb      	ldrb	r3, [r7, #11]
 80046be:	f1c3 031f 	rsb	r3, r3, #31
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	4920      	ldr	r1, [pc, #128]	; (8004748 <vTaskSwitchContext+0xe8>)
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <vTaskSwitchContext+0x8c>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	e7fe      	b.n	80046ea <vTaskSwitchContext+0x8a>
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4a14      	ldr	r2, [pc, #80]	; (8004748 <vTaskSwitchContext+0xe8>)
 80046f8:	4413      	add	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3308      	adds	r3, #8
 800470e:	429a      	cmp	r2, r3
 8004710:	d104      	bne.n	800471c <vTaskSwitchContext+0xbc>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <vTaskSwitchContext+0xe0>)
 8004724:	6013      	str	r3, [r2, #0]
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2000042c 	.word	0x2000042c
 8004734:	20000418 	.word	0x20000418
 8004738:	20000434 	.word	0x20000434
 800473c:	20000430 	.word	0x20000430
 8004740:	20000304 	.word	0x20000304
 8004744:	2000040c 	.word	0x2000040c
 8004748:	20000308 	.word	0x20000308

0800474c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004754:	f000 f852 	bl	80047fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <prvIdleTask+0x28>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d9f9      	bls.n	8004754 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <prvIdleTask+0x2c>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004770:	e7f0      	b.n	8004754 <prvIdleTask+0x8>
 8004772:	bf00      	nop
 8004774:	20000308 	.word	0x20000308
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	e00c      	b.n	80047a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <prvInitialiseTaskLists+0x60>)
 8004794:	4413      	add	r3, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff f9ea 	bl	8003b70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3301      	adds	r3, #1
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b06      	cmp	r3, #6
 80047a6:	d9ef      	bls.n	8004788 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047a8:	480d      	ldr	r0, [pc, #52]	; (80047e0 <prvInitialiseTaskLists+0x64>)
 80047aa:	f7ff f9e1 	bl	8003b70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047ae:	480d      	ldr	r0, [pc, #52]	; (80047e4 <prvInitialiseTaskLists+0x68>)
 80047b0:	f7ff f9de 	bl	8003b70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047b4:	480c      	ldr	r0, [pc, #48]	; (80047e8 <prvInitialiseTaskLists+0x6c>)
 80047b6:	f7ff f9db 	bl	8003b70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047ba:	480c      	ldr	r0, [pc, #48]	; (80047ec <prvInitialiseTaskLists+0x70>)
 80047bc:	f7ff f9d8 	bl	8003b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047c0:	480b      	ldr	r0, [pc, #44]	; (80047f0 <prvInitialiseTaskLists+0x74>)
 80047c2:	f7ff f9d5 	bl	8003b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <prvInitialiseTaskLists+0x78>)
 80047c8:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <prvInitialiseTaskLists+0x64>)
 80047ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <prvInitialiseTaskLists+0x7c>)
 80047ce:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <prvInitialiseTaskLists+0x68>)
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000308 	.word	0x20000308
 80047e0:	20000394 	.word	0x20000394
 80047e4:	200003a8 	.word	0x200003a8
 80047e8:	200003c4 	.word	0x200003c4
 80047ec:	200003d8 	.word	0x200003d8
 80047f0:	200003f0 	.word	0x200003f0
 80047f4:	200003bc 	.word	0x200003bc
 80047f8:	200003c0 	.word	0x200003c0

080047fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004802:	e019      	b.n	8004838 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004804:	f000 f9c8 	bl	8004b98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <prvCheckTasksWaitingTermination+0x4c>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fa31 	bl	8003c7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <prvCheckTasksWaitingTermination+0x50>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3b01      	subs	r3, #1
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <prvCheckTasksWaitingTermination+0x50>)
 8004822:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <prvCheckTasksWaitingTermination+0x54>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3b01      	subs	r3, #1
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <prvCheckTasksWaitingTermination+0x54>)
 800482c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800482e:	f000 f9e1 	bl	8004bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f80e 	bl	8004854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <prvCheckTasksWaitingTermination+0x54>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e1      	bne.n	8004804 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	200003d8 	.word	0x200003d8
 800484c:	20000404 	.word	0x20000404
 8004850:	200003ec 	.word	0x200003ec

08004854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fb10 	bl	8004e90 <vPortFree>
				vPortFree( pxTCB );
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fb0d 	bl	8004e90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004876:	e017      	b.n	80048a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800487e:	2b01      	cmp	r3, #1
 8004880:	d103      	bne.n	800488a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fb04 	bl	8004e90 <vPortFree>
	}
 8004888:	e00e      	b.n	80048a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004890:	2b02      	cmp	r3, #2
 8004892:	d009      	beq.n	80048a8 <prvDeleteTCB+0x54>
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e7fe      	b.n	80048a6 <prvDeleteTCB+0x52>
	}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <prvResetNextTaskUnblockTime+0x40>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <prvResetNextTaskUnblockTime+0x14>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <prvResetNextTaskUnblockTime+0x16>
 80048c4:	2300      	movs	r3, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvResetNextTaskUnblockTime+0x44>)
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048d2:	e008      	b.n	80048e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <prvResetNextTaskUnblockTime+0x40>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <prvResetNextTaskUnblockTime+0x44>)
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	200003bc 	.word	0x200003bc
 80048f4:	20000424 	.word	0x20000424

080048f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004908:	4b28      	ldr	r3, [pc, #160]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f9b4 	bl	8003c7c <uxListRemove>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	2201      	movs	r2, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43da      	mvns	r2, r3
 8004928:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4013      	ands	r3, r2
 800492e:	4a20      	ldr	r2, [pc, #128]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004930:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d10a      	bne.n	8004950 <prvAddCurrentTaskToDelayedList+0x58>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	481a      	ldr	r0, [pc, #104]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800494a:	f7ff f93c 	bl	8003bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800494e:	e026      	b.n	800499e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	429a      	cmp	r2, r3
 8004966:	d209      	bcs.n	800497c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004968:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7ff f949 	bl	8003c0c <vListInsert>
}
 800497a:	e010      	b.n	800499e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f7ff f93f 	bl	8003c0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d202      	bcs.n	800499e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6013      	str	r3, [r2, #0]
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000408 	.word	0x20000408
 80049ac:	20000304 	.word	0x20000304
 80049b0:	2000040c 	.word	0x2000040c
 80049b4:	200003f0 	.word	0x200003f0
 80049b8:	200003c0 	.word	0x200003c0
 80049bc:	200003bc 	.word	0x200003bc
 80049c0:	20000424 	.word	0x20000424

080049c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3b04      	subs	r3, #4
 80049d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3b04      	subs	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b04      	subs	r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <pxPortInitialiseStack+0x54>)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3b14      	subs	r3, #20
 80049fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3b20      	subs	r3, #32
 8004a0a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	08004a1d 	.word	0x08004a1d

08004a1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <prvTaskExitError+0x4c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d009      	beq.n	8004a44 <prvTaskExitError+0x28>
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e7fe      	b.n	8004a42 <prvTaskExitError+0x26>
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a56:	bf00      	nop
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0fc      	beq.n	8004a58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	20000010 	.word	0x20000010
 8004a6c:	00000000 	.word	0x00000000

08004a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <pxCurrentTCBConst2>)
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	6808      	ldr	r0, [r1, #0]
 8004a76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a7a:	f380 8809 	msr	PSP, r0
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8811 	msr	BASEPRI, r0
 8004a8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a8e:	4770      	bx	lr

08004a90 <pxCurrentTCBConst2>:
 8004a90:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a98:	4806      	ldr	r0, [pc, #24]	; (8004ab4 <prvPortStartFirstTask+0x1c>)
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f380 8808 	msr	MSP, r0
 8004aa2:	b662      	cpsie	i
 8004aa4:	b661      	cpsie	f
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	df00      	svc	0
 8004ab0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ab2:	bf00      	nop
 8004ab4:	e000ed08 	.word	0xe000ed08

08004ab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004abe:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <xPortStartScheduler+0xcc>)
 8004ac0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <xPortStartScheduler+0xd0>)
 8004ae4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aec:	e009      	b.n	8004b02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	4a25      	ldr	r2, [pc, #148]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004af6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d0ef      	beq.n	8004aee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1c3 0307 	rsb	r3, r3, #7
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d009      	beq.n	8004b2e <xPortStartScheduler+0x76>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	e7fe      	b.n	8004b2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b2e:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b40:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <xPortStartScheduler+0xd4>)
 8004b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <xPortStartScheduler+0xd8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <xPortStartScheduler+0xd8>)
 8004b52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b58:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <xPortStartScheduler+0xd8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <xPortStartScheduler+0xd8>)
 8004b5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b64:	f000 f8b0 	bl	8004cc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <xPortStartScheduler+0xdc>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b6e:	f7ff ff93 	bl	8004a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b72:	f7ff fd75 	bl	8004660 <vTaskSwitchContext>
	prvTaskExitError();
 8004b76:	f7ff ff51 	bl	8004a1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	e000e400 	.word	0xe000e400
 8004b88:	20000438 	.word	0x20000438
 8004b8c:	2000043c 	.word	0x2000043c
 8004b90:	e000ed20 	.word	0xe000ed20
 8004b94:	20000010 	.word	0x20000010

08004b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <vPortEnterCritical+0x54>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	4a0d      	ldr	r2, [pc, #52]	; (8004bec <vPortEnterCritical+0x54>)
 8004bb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <vPortEnterCritical+0x54>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10e      	bne.n	8004be0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <vPortEnterCritical+0x58>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <vPortEnterCritical+0x48>
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	e7fe      	b.n	8004bde <vPortEnterCritical+0x46>
	}
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000010 	.word	0x20000010
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <vPortExitCritical+0x48>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <vPortExitCritical+0x22>
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e7fe      	b.n	8004c14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <vPortExitCritical+0x48>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <vPortExitCritical+0x48>)
 8004c1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <vPortExitCritical+0x48>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <vPortExitCritical+0x3e>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	20000010 	.word	0x20000010

08004c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c40:	f3ef 8009 	mrs	r0, PSP
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <pxCurrentTCBConst>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c50:	6010      	str	r0, [r2, #0]
 8004c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c5a:	f380 8811 	msr	BASEPRI, r0
 8004c5e:	f7ff fcff 	bl	8004660 <vTaskSwitchContext>
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	6808      	ldr	r0, [r1, #0]
 8004c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c76:	f380 8809 	msr	PSP, r0
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	4770      	bx	lr

08004c80 <pxCurrentTCBConst>:
 8004c80:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ca0:	f7ff fc22 	bl	80044e8 <xTaskIncrementTick>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <SysTick_Handler+0x3c>)
 8004cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortSetupTimerInterrupt+0x30>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <vPortSetupTimerInterrupt+0x34>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <vPortSetupTimerInterrupt+0x38>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortSetupTimerInterrupt+0x3c>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <vPortSetupTimerInterrupt+0x40>)
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cea:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <vPortSetupTimerInterrupt+0x30>)
 8004cec:	2207      	movs	r2, #7
 8004cee:	601a      	str	r2, [r3, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	e000e010 	.word	0xe000e010
 8004cfc:	e000e018 	.word	0xe000e018
 8004d00:	20000004 	.word	0x20000004
 8004d04:	10624dd3 	.word	0x10624dd3
 8004d08:	e000e014 	.word	0xe000e014

08004d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d18:	f7ff fb2e 	bl	8004378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d1c:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <pvPortMalloc+0x170>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d24:	f000 f90c 	bl	8004f40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d28:	4b55      	ldr	r3, [pc, #340]	; (8004e80 <pvPortMalloc+0x174>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 808c 	bne.w	8004e4e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01c      	beq.n	8004d76 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d013      	beq.n	8004d76 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f023 0307 	bic.w	r3, r3, #7
 8004d54:	3308      	adds	r3, #8
 8004d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <pvPortMalloc+0x6a>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e7fe      	b.n	8004d74 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d068      	beq.n	8004e4e <pvPortMalloc+0x142>
 8004d7c:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <pvPortMalloc+0x178>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d863      	bhi.n	8004e4e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d86:	4b40      	ldr	r3, [pc, #256]	; (8004e88 <pvPortMalloc+0x17c>)
 8004d88:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d8a:	4b3f      	ldr	r3, [pc, #252]	; (8004e88 <pvPortMalloc+0x17c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d90:	e004      	b.n	8004d9c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d903      	bls.n	8004dae <pvPortMalloc+0xa2>
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f1      	bne.n	8004d92 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dae:	4b33      	ldr	r3, [pc, #204]	; (8004e7c <pvPortMalloc+0x170>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d04a      	beq.n	8004e4e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	4413      	add	r3, r2
 8004dc0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	1ad2      	subs	r2, r2, r3
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d91e      	bls.n	8004e18 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <pvPortMalloc+0xf4>
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	e7fe      	b.n	8004dfe <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e12:	69b8      	ldr	r0, [r7, #24]
 8004e14:	f000 f8f6 	bl	8005004 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <pvPortMalloc+0x178>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <pvPortMalloc+0x178>)
 8004e24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e26:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <pvPortMalloc+0x178>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <pvPortMalloc+0x180>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d203      	bcs.n	8004e3a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <pvPortMalloc+0x178>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <pvPortMalloc+0x180>)
 8004e38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <pvPortMalloc+0x174>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e4e:	f7ff faa1 	bl	8004394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <pvPortMalloc+0x164>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e7fe      	b.n	8004e6e <pvPortMalloc+0x162>
	return pvReturn;
 8004e70:	69fb      	ldr	r3, [r7, #28]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3728      	adds	r7, #40	; 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20003ee0 	.word	0x20003ee0
 8004e80:	20003eec 	.word	0x20003eec
 8004e84:	20003ee4 	.word	0x20003ee4
 8004e88:	20003ed8 	.word	0x20003ed8
 8004e8c:	20003ee8 	.word	0x20003ee8

08004e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d046      	beq.n	8004f30 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	425b      	negs	r3, r3
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <vPortFree+0xa8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <vPortFree+0x42>
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e7fe      	b.n	8004ed0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <vPortFree+0x5e>
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	e7fe      	b.n	8004eec <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <vPortFree+0xa8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d019      	beq.n	8004f30 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d115      	bne.n	8004f30 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <vPortFree+0xa8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	401a      	ands	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f14:	f7ff fa30 	bl	8004378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <vPortFree+0xac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <vPortFree+0xac>)
 8004f24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f26:	6938      	ldr	r0, [r7, #16]
 8004f28:	f000 f86c 	bl	8005004 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f2c:	f7ff fa32 	bl	8004394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f30:	bf00      	nop
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20003eec 	.word	0x20003eec
 8004f3c:	20003ee4 	.word	0x20003ee4

08004f40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f46:	f643 2398 	movw	r3, #15000	; 0x3a98
 8004f4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <prvHeapInit+0xac>)
 8004f4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3307      	adds	r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <prvHeapInit+0xac>)
 8004f70:	4413      	add	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <prvHeapInit+0xb0>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ff0 <prvHeapInit+0xb0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <prvHeapInit+0xb4>)
 8004fa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <prvHeapInit+0xb4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <prvHeapInit+0xb4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <prvHeapInit+0xb4>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <prvHeapInit+0xb8>)
 8004fce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <prvHeapInit+0xbc>)
 8004fd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <prvHeapInit+0xc0>)
 8004fda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fde:	601a      	str	r2, [r3, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000440 	.word	0x20000440
 8004ff0:	20003ed8 	.word	0x20003ed8
 8004ff4:	20003ee0 	.word	0x20003ee0
 8004ff8:	20003ee8 	.word	0x20003ee8
 8004ffc:	20003ee4 	.word	0x20003ee4
 8005000:	20003eec 	.word	0x20003eec

08005004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800500c:	4b27      	ldr	r3, [pc, #156]	; (80050ac <prvInsertBlockIntoFreeList+0xa8>)
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e002      	b.n	8005018 <prvInsertBlockIntoFreeList+0x14>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d8f7      	bhi.n	8005012 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d108      	bne.n	8005046 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	441a      	add	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	441a      	add	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d118      	bne.n	800508c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <prvInsertBlockIntoFreeList+0xac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d00d      	beq.n	8005082 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e008      	b.n	8005094 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <prvInsertBlockIntoFreeList+0xac>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e003      	b.n	8005094 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d002      	beq.n	80050a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	20003ed8 	.word	0x20003ed8
 80050b0:	20003ee0 	.word	0x20003ee0

080050b4 <__errno>:
 80050b4:	4b01      	ldr	r3, [pc, #4]	; (80050bc <__errno+0x8>)
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000014 	.word	0x20000014

080050c0 <__libc_init_array>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	2500      	movs	r5, #0
 80050c4:	4e0c      	ldr	r6, [pc, #48]	; (80050f8 <__libc_init_array+0x38>)
 80050c6:	4c0d      	ldr	r4, [pc, #52]	; (80050fc <__libc_init_array+0x3c>)
 80050c8:	1ba4      	subs	r4, r4, r6
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	42a5      	cmp	r5, r4
 80050ce:	d109      	bne.n	80050e4 <__libc_init_array+0x24>
 80050d0:	f000 fc4a 	bl	8005968 <_init>
 80050d4:	2500      	movs	r5, #0
 80050d6:	4e0a      	ldr	r6, [pc, #40]	; (8005100 <__libc_init_array+0x40>)
 80050d8:	4c0a      	ldr	r4, [pc, #40]	; (8005104 <__libc_init_array+0x44>)
 80050da:	1ba4      	subs	r4, r4, r6
 80050dc:	10a4      	asrs	r4, r4, #2
 80050de:	42a5      	cmp	r5, r4
 80050e0:	d105      	bne.n	80050ee <__libc_init_array+0x2e>
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050e8:	4798      	blx	r3
 80050ea:	3501      	adds	r5, #1
 80050ec:	e7ee      	b.n	80050cc <__libc_init_array+0xc>
 80050ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050f2:	4798      	blx	r3
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7f2      	b.n	80050de <__libc_init_array+0x1e>
 80050f8:	08005a7c 	.word	0x08005a7c
 80050fc:	08005a7c 	.word	0x08005a7c
 8005100:	08005a7c 	.word	0x08005a7c
 8005104:	08005a80 	.word	0x08005a80

08005108 <memcpy>:
 8005108:	b510      	push	{r4, lr}
 800510a:	1e43      	subs	r3, r0, #1
 800510c:	440a      	add	r2, r1
 800510e:	4291      	cmp	r1, r2
 8005110:	d100      	bne.n	8005114 <memcpy+0xc>
 8005112:	bd10      	pop	{r4, pc}
 8005114:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800511c:	e7f7      	b.n	800510e <memcpy+0x6>

0800511e <memset>:
 800511e:	4603      	mov	r3, r0
 8005120:	4402      	add	r2, r0
 8005122:	4293      	cmp	r3, r2
 8005124:	d100      	bne.n	8005128 <memset+0xa>
 8005126:	4770      	bx	lr
 8005128:	f803 1b01 	strb.w	r1, [r3], #1
 800512c:	e7f9      	b.n	8005122 <memset+0x4>
	...

08005130 <sniprintf>:
 8005130:	b40c      	push	{r2, r3}
 8005132:	b530      	push	{r4, r5, lr}
 8005134:	4b17      	ldr	r3, [pc, #92]	; (8005194 <sniprintf+0x64>)
 8005136:	1e0c      	subs	r4, r1, #0
 8005138:	b09d      	sub	sp, #116	; 0x74
 800513a:	681d      	ldr	r5, [r3, #0]
 800513c:	da08      	bge.n	8005150 <sniprintf+0x20>
 800513e:	238b      	movs	r3, #139	; 0x8b
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	b01d      	add	sp, #116	; 0x74
 8005148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800514c:	b002      	add	sp, #8
 800514e:	4770      	bx	lr
 8005150:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005154:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005158:	bf0c      	ite	eq
 800515a:	4623      	moveq	r3, r4
 800515c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	9307      	str	r3, [sp, #28]
 8005164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005168:	9002      	str	r0, [sp, #8]
 800516a:	9006      	str	r0, [sp, #24]
 800516c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005170:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005172:	ab21      	add	r3, sp, #132	; 0x84
 8005174:	a902      	add	r1, sp, #8
 8005176:	4628      	mov	r0, r5
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	f000 f867 	bl	800524c <_svfiprintf_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	bfbc      	itt	lt
 8005182:	238b      	movlt	r3, #139	; 0x8b
 8005184:	602b      	strlt	r3, [r5, #0]
 8005186:	2c00      	cmp	r4, #0
 8005188:	d0dd      	beq.n	8005146 <sniprintf+0x16>
 800518a:	2200      	movs	r2, #0
 800518c:	9b02      	ldr	r3, [sp, #8]
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e7d9      	b.n	8005146 <sniprintf+0x16>
 8005192:	bf00      	nop
 8005194:	20000014 	.word	0x20000014

08005198 <__ssputs_r>:
 8005198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	688e      	ldr	r6, [r1, #8]
 800519e:	4682      	mov	sl, r0
 80051a0:	429e      	cmp	r6, r3
 80051a2:	460c      	mov	r4, r1
 80051a4:	4690      	mov	r8, r2
 80051a6:	4699      	mov	r9, r3
 80051a8:	d837      	bhi.n	800521a <__ssputs_r+0x82>
 80051aa:	898a      	ldrh	r2, [r1, #12]
 80051ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051b0:	d031      	beq.n	8005216 <__ssputs_r+0x7e>
 80051b2:	2302      	movs	r3, #2
 80051b4:	6825      	ldr	r5, [r4, #0]
 80051b6:	6909      	ldr	r1, [r1, #16]
 80051b8:	1a6f      	subs	r7, r5, r1
 80051ba:	6965      	ldr	r5, [r4, #20]
 80051bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80051c4:	f109 0301 	add.w	r3, r9, #1
 80051c8:	443b      	add	r3, r7
 80051ca:	429d      	cmp	r5, r3
 80051cc:	bf38      	it	cc
 80051ce:	461d      	movcc	r5, r3
 80051d0:	0553      	lsls	r3, r2, #21
 80051d2:	d530      	bpl.n	8005236 <__ssputs_r+0x9e>
 80051d4:	4629      	mov	r1, r5
 80051d6:	f000 fb2d 	bl	8005834 <_malloc_r>
 80051da:	4606      	mov	r6, r0
 80051dc:	b950      	cbnz	r0, 80051f4 <__ssputs_r+0x5c>
 80051de:	230c      	movs	r3, #12
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	f8ca 3000 	str.w	r3, [sl]
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f4:	463a      	mov	r2, r7
 80051f6:	6921      	ldr	r1, [r4, #16]
 80051f8:	f7ff ff86 	bl	8005108 <memcpy>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	6126      	str	r6, [r4, #16]
 800520a:	443e      	add	r6, r7
 800520c:	6026      	str	r6, [r4, #0]
 800520e:	464e      	mov	r6, r9
 8005210:	6165      	str	r5, [r4, #20]
 8005212:	1bed      	subs	r5, r5, r7
 8005214:	60a5      	str	r5, [r4, #8]
 8005216:	454e      	cmp	r6, r9
 8005218:	d900      	bls.n	800521c <__ssputs_r+0x84>
 800521a:	464e      	mov	r6, r9
 800521c:	4632      	mov	r2, r6
 800521e:	4641      	mov	r1, r8
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	f000 faa1 	bl	8005768 <memmove>
 8005226:	68a3      	ldr	r3, [r4, #8]
 8005228:	2000      	movs	r0, #0
 800522a:	1b9b      	subs	r3, r3, r6
 800522c:	60a3      	str	r3, [r4, #8]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	441e      	add	r6, r3
 8005232:	6026      	str	r6, [r4, #0]
 8005234:	e7dc      	b.n	80051f0 <__ssputs_r+0x58>
 8005236:	462a      	mov	r2, r5
 8005238:	f000 fb56 	bl	80058e8 <_realloc_r>
 800523c:	4606      	mov	r6, r0
 800523e:	2800      	cmp	r0, #0
 8005240:	d1e2      	bne.n	8005208 <__ssputs_r+0x70>
 8005242:	6921      	ldr	r1, [r4, #16]
 8005244:	4650      	mov	r0, sl
 8005246:	f000 faa9 	bl	800579c <_free_r>
 800524a:	e7c8      	b.n	80051de <__ssputs_r+0x46>

0800524c <_svfiprintf_r>:
 800524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005250:	461d      	mov	r5, r3
 8005252:	898b      	ldrh	r3, [r1, #12]
 8005254:	b09d      	sub	sp, #116	; 0x74
 8005256:	061f      	lsls	r7, r3, #24
 8005258:	4680      	mov	r8, r0
 800525a:	460c      	mov	r4, r1
 800525c:	4616      	mov	r6, r2
 800525e:	d50f      	bpl.n	8005280 <_svfiprintf_r+0x34>
 8005260:	690b      	ldr	r3, [r1, #16]
 8005262:	b96b      	cbnz	r3, 8005280 <_svfiprintf_r+0x34>
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	f000 fae5 	bl	8005834 <_malloc_r>
 800526a:	6020      	str	r0, [r4, #0]
 800526c:	6120      	str	r0, [r4, #16]
 800526e:	b928      	cbnz	r0, 800527c <_svfiprintf_r+0x30>
 8005270:	230c      	movs	r3, #12
 8005272:	f8c8 3000 	str.w	r3, [r8]
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	e0c8      	b.n	800540e <_svfiprintf_r+0x1c2>
 800527c:	2340      	movs	r3, #64	; 0x40
 800527e:	6163      	str	r3, [r4, #20]
 8005280:	2300      	movs	r3, #0
 8005282:	9309      	str	r3, [sp, #36]	; 0x24
 8005284:	2320      	movs	r3, #32
 8005286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800528a:	2330      	movs	r3, #48	; 0x30
 800528c:	f04f 0b01 	mov.w	fp, #1
 8005290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005294:	9503      	str	r5, [sp, #12]
 8005296:	4637      	mov	r7, r6
 8005298:	463d      	mov	r5, r7
 800529a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800529e:	b10b      	cbz	r3, 80052a4 <_svfiprintf_r+0x58>
 80052a0:	2b25      	cmp	r3, #37	; 0x25
 80052a2:	d13e      	bne.n	8005322 <_svfiprintf_r+0xd6>
 80052a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80052a8:	d00b      	beq.n	80052c2 <_svfiprintf_r+0x76>
 80052aa:	4653      	mov	r3, sl
 80052ac:	4632      	mov	r2, r6
 80052ae:	4621      	mov	r1, r4
 80052b0:	4640      	mov	r0, r8
 80052b2:	f7ff ff71 	bl	8005198 <__ssputs_r>
 80052b6:	3001      	adds	r0, #1
 80052b8:	f000 80a4 	beq.w	8005404 <_svfiprintf_r+0x1b8>
 80052bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052be:	4453      	add	r3, sl
 80052c0:	9309      	str	r3, [sp, #36]	; 0x24
 80052c2:	783b      	ldrb	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 809d 	beq.w	8005404 <_svfiprintf_r+0x1b8>
 80052ca:	2300      	movs	r3, #0
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	9307      	str	r3, [sp, #28]
 80052d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052dc:	931a      	str	r3, [sp, #104]	; 0x68
 80052de:	462f      	mov	r7, r5
 80052e0:	2205      	movs	r2, #5
 80052e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80052e6:	4850      	ldr	r0, [pc, #320]	; (8005428 <_svfiprintf_r+0x1dc>)
 80052e8:	f000 fa30 	bl	800574c <memchr>
 80052ec:	9b04      	ldr	r3, [sp, #16]
 80052ee:	b9d0      	cbnz	r0, 8005326 <_svfiprintf_r+0xda>
 80052f0:	06d9      	lsls	r1, r3, #27
 80052f2:	bf44      	itt	mi
 80052f4:	2220      	movmi	r2, #32
 80052f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052fa:	071a      	lsls	r2, r3, #28
 80052fc:	bf44      	itt	mi
 80052fe:	222b      	movmi	r2, #43	; 0x2b
 8005300:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005304:	782a      	ldrb	r2, [r5, #0]
 8005306:	2a2a      	cmp	r2, #42	; 0x2a
 8005308:	d015      	beq.n	8005336 <_svfiprintf_r+0xea>
 800530a:	462f      	mov	r7, r5
 800530c:	2000      	movs	r0, #0
 800530e:	250a      	movs	r5, #10
 8005310:	9a07      	ldr	r2, [sp, #28]
 8005312:	4639      	mov	r1, r7
 8005314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005318:	3b30      	subs	r3, #48	; 0x30
 800531a:	2b09      	cmp	r3, #9
 800531c:	d94d      	bls.n	80053ba <_svfiprintf_r+0x16e>
 800531e:	b1b8      	cbz	r0, 8005350 <_svfiprintf_r+0x104>
 8005320:	e00f      	b.n	8005342 <_svfiprintf_r+0xf6>
 8005322:	462f      	mov	r7, r5
 8005324:	e7b8      	b.n	8005298 <_svfiprintf_r+0x4c>
 8005326:	4a40      	ldr	r2, [pc, #256]	; (8005428 <_svfiprintf_r+0x1dc>)
 8005328:	463d      	mov	r5, r7
 800532a:	1a80      	subs	r0, r0, r2
 800532c:	fa0b f000 	lsl.w	r0, fp, r0
 8005330:	4318      	orrs	r0, r3
 8005332:	9004      	str	r0, [sp, #16]
 8005334:	e7d3      	b.n	80052de <_svfiprintf_r+0x92>
 8005336:	9a03      	ldr	r2, [sp, #12]
 8005338:	1d11      	adds	r1, r2, #4
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	9103      	str	r1, [sp, #12]
 800533e:	2a00      	cmp	r2, #0
 8005340:	db01      	blt.n	8005346 <_svfiprintf_r+0xfa>
 8005342:	9207      	str	r2, [sp, #28]
 8005344:	e004      	b.n	8005350 <_svfiprintf_r+0x104>
 8005346:	4252      	negs	r2, r2
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	9207      	str	r2, [sp, #28]
 800534e:	9304      	str	r3, [sp, #16]
 8005350:	783b      	ldrb	r3, [r7, #0]
 8005352:	2b2e      	cmp	r3, #46	; 0x2e
 8005354:	d10c      	bne.n	8005370 <_svfiprintf_r+0x124>
 8005356:	787b      	ldrb	r3, [r7, #1]
 8005358:	2b2a      	cmp	r3, #42	; 0x2a
 800535a:	d133      	bne.n	80053c4 <_svfiprintf_r+0x178>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	3702      	adds	r7, #2
 8005360:	1d1a      	adds	r2, r3, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	9203      	str	r2, [sp, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	bfb8      	it	lt
 800536a:	f04f 33ff 	movlt.w	r3, #4294967295
 800536e:	9305      	str	r3, [sp, #20]
 8005370:	4d2e      	ldr	r5, [pc, #184]	; (800542c <_svfiprintf_r+0x1e0>)
 8005372:	2203      	movs	r2, #3
 8005374:	7839      	ldrb	r1, [r7, #0]
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f9e8 	bl	800574c <memchr>
 800537c:	b138      	cbz	r0, 800538e <_svfiprintf_r+0x142>
 800537e:	2340      	movs	r3, #64	; 0x40
 8005380:	1b40      	subs	r0, r0, r5
 8005382:	fa03 f000 	lsl.w	r0, r3, r0
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	3701      	adds	r7, #1
 800538a:	4303      	orrs	r3, r0
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	7839      	ldrb	r1, [r7, #0]
 8005390:	2206      	movs	r2, #6
 8005392:	4827      	ldr	r0, [pc, #156]	; (8005430 <_svfiprintf_r+0x1e4>)
 8005394:	1c7e      	adds	r6, r7, #1
 8005396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800539a:	f000 f9d7 	bl	800574c <memchr>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d038      	beq.n	8005414 <_svfiprintf_r+0x1c8>
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <_svfiprintf_r+0x1e8>)
 80053a4:	bb13      	cbnz	r3, 80053ec <_svfiprintf_r+0x1a0>
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	3307      	adds	r3, #7
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	3308      	adds	r3, #8
 80053b0:	9303      	str	r3, [sp, #12]
 80053b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b4:	444b      	add	r3, r9
 80053b6:	9309      	str	r3, [sp, #36]	; 0x24
 80053b8:	e76d      	b.n	8005296 <_svfiprintf_r+0x4a>
 80053ba:	fb05 3202 	mla	r2, r5, r2, r3
 80053be:	2001      	movs	r0, #1
 80053c0:	460f      	mov	r7, r1
 80053c2:	e7a6      	b.n	8005312 <_svfiprintf_r+0xc6>
 80053c4:	2300      	movs	r3, #0
 80053c6:	250a      	movs	r5, #10
 80053c8:	4619      	mov	r1, r3
 80053ca:	3701      	adds	r7, #1
 80053cc:	9305      	str	r3, [sp, #20]
 80053ce:	4638      	mov	r0, r7
 80053d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d4:	3a30      	subs	r2, #48	; 0x30
 80053d6:	2a09      	cmp	r2, #9
 80053d8:	d903      	bls.n	80053e2 <_svfiprintf_r+0x196>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0c8      	beq.n	8005370 <_svfiprintf_r+0x124>
 80053de:	9105      	str	r1, [sp, #20]
 80053e0:	e7c6      	b.n	8005370 <_svfiprintf_r+0x124>
 80053e2:	fb05 2101 	mla	r1, r5, r1, r2
 80053e6:	2301      	movs	r3, #1
 80053e8:	4607      	mov	r7, r0
 80053ea:	e7f0      	b.n	80053ce <_svfiprintf_r+0x182>
 80053ec:	ab03      	add	r3, sp, #12
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4622      	mov	r2, r4
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <_svfiprintf_r+0x1ec>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	4640      	mov	r0, r8
 80053f8:	f3af 8000 	nop.w
 80053fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005400:	4681      	mov	r9, r0
 8005402:	d1d6      	bne.n	80053b2 <_svfiprintf_r+0x166>
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	065b      	lsls	r3, r3, #25
 8005408:	f53f af35 	bmi.w	8005276 <_svfiprintf_r+0x2a>
 800540c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800540e:	b01d      	add	sp, #116	; 0x74
 8005410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005414:	ab03      	add	r3, sp, #12
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	4622      	mov	r2, r4
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <_svfiprintf_r+0x1ec>)
 800541c:	a904      	add	r1, sp, #16
 800541e:	4640      	mov	r0, r8
 8005420:	f000 f882 	bl	8005528 <_printf_i>
 8005424:	e7ea      	b.n	80053fc <_svfiprintf_r+0x1b0>
 8005426:	bf00      	nop
 8005428:	08005a48 	.word	0x08005a48
 800542c:	08005a4e 	.word	0x08005a4e
 8005430:	08005a52 	.word	0x08005a52
 8005434:	00000000 	.word	0x00000000
 8005438:	08005199 	.word	0x08005199

0800543c <_printf_common>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4691      	mov	r9, r2
 8005442:	461f      	mov	r7, r3
 8005444:	688a      	ldr	r2, [r1, #8]
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	4606      	mov	r6, r0
 800544a:	4293      	cmp	r3, r2
 800544c:	bfb8      	it	lt
 800544e:	4613      	movlt	r3, r2
 8005450:	f8c9 3000 	str.w	r3, [r9]
 8005454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005458:	460c      	mov	r4, r1
 800545a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800545e:	b112      	cbz	r2, 8005466 <_printf_common+0x2a>
 8005460:	3301      	adds	r3, #1
 8005462:	f8c9 3000 	str.w	r3, [r9]
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	0699      	lsls	r1, r3, #26
 800546a:	bf42      	ittt	mi
 800546c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005470:	3302      	addmi	r3, #2
 8005472:	f8c9 3000 	strmi.w	r3, [r9]
 8005476:	6825      	ldr	r5, [r4, #0]
 8005478:	f015 0506 	ands.w	r5, r5, #6
 800547c:	d107      	bne.n	800548e <_printf_common+0x52>
 800547e:	f104 0a19 	add.w	sl, r4, #25
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	f8d9 2000 	ldr.w	r2, [r9]
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	42ab      	cmp	r3, r5
 800548c:	dc29      	bgt.n	80054e2 <_printf_common+0xa6>
 800548e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	3300      	adds	r3, #0
 8005496:	bf18      	it	ne
 8005498:	2301      	movne	r3, #1
 800549a:	0692      	lsls	r2, r2, #26
 800549c:	d42e      	bmi.n	80054fc <_printf_common+0xc0>
 800549e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054a2:	4639      	mov	r1, r7
 80054a4:	4630      	mov	r0, r6
 80054a6:	47c0      	blx	r8
 80054a8:	3001      	adds	r0, #1
 80054aa:	d021      	beq.n	80054f0 <_printf_common+0xb4>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	68e5      	ldr	r5, [r4, #12]
 80054b0:	f003 0306 	and.w	r3, r3, #6
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	bf18      	it	ne
 80054b8:	2500      	movne	r5, #0
 80054ba:	f8d9 2000 	ldr.w	r2, [r9]
 80054be:	f04f 0900 	mov.w	r9, #0
 80054c2:	bf08      	it	eq
 80054c4:	1aad      	subeq	r5, r5, r2
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	6922      	ldr	r2, [r4, #16]
 80054ca:	bf08      	it	eq
 80054cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bfc4      	itt	gt
 80054d4:	1a9b      	subgt	r3, r3, r2
 80054d6:	18ed      	addgt	r5, r5, r3
 80054d8:	341a      	adds	r4, #26
 80054da:	454d      	cmp	r5, r9
 80054dc:	d11a      	bne.n	8005514 <_printf_common+0xd8>
 80054de:	2000      	movs	r0, #0
 80054e0:	e008      	b.n	80054f4 <_printf_common+0xb8>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4652      	mov	r2, sl
 80054e6:	4639      	mov	r1, r7
 80054e8:	4630      	mov	r0, r6
 80054ea:	47c0      	blx	r8
 80054ec:	3001      	adds	r0, #1
 80054ee:	d103      	bne.n	80054f8 <_printf_common+0xbc>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f8:	3501      	adds	r5, #1
 80054fa:	e7c2      	b.n	8005482 <_printf_common+0x46>
 80054fc:	2030      	movs	r0, #48	; 0x30
 80054fe:	18e1      	adds	r1, r4, r3
 8005500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800550a:	4422      	add	r2, r4
 800550c:	3302      	adds	r3, #2
 800550e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005512:	e7c4      	b.n	800549e <_printf_common+0x62>
 8005514:	2301      	movs	r3, #1
 8005516:	4622      	mov	r2, r4
 8005518:	4639      	mov	r1, r7
 800551a:	4630      	mov	r0, r6
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d0e6      	beq.n	80054f0 <_printf_common+0xb4>
 8005522:	f109 0901 	add.w	r9, r9, #1
 8005526:	e7d8      	b.n	80054da <_printf_common+0x9e>

08005528 <_printf_i>:
 8005528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800552c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005530:	460c      	mov	r4, r1
 8005532:	7e09      	ldrb	r1, [r1, #24]
 8005534:	b085      	sub	sp, #20
 8005536:	296e      	cmp	r1, #110	; 0x6e
 8005538:	4617      	mov	r7, r2
 800553a:	4606      	mov	r6, r0
 800553c:	4698      	mov	r8, r3
 800553e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005540:	f000 80b3 	beq.w	80056aa <_printf_i+0x182>
 8005544:	d822      	bhi.n	800558c <_printf_i+0x64>
 8005546:	2963      	cmp	r1, #99	; 0x63
 8005548:	d036      	beq.n	80055b8 <_printf_i+0x90>
 800554a:	d80a      	bhi.n	8005562 <_printf_i+0x3a>
 800554c:	2900      	cmp	r1, #0
 800554e:	f000 80b9 	beq.w	80056c4 <_printf_i+0x19c>
 8005552:	2958      	cmp	r1, #88	; 0x58
 8005554:	f000 8083 	beq.w	800565e <_printf_i+0x136>
 8005558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800555c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005560:	e032      	b.n	80055c8 <_printf_i+0xa0>
 8005562:	2964      	cmp	r1, #100	; 0x64
 8005564:	d001      	beq.n	800556a <_printf_i+0x42>
 8005566:	2969      	cmp	r1, #105	; 0x69
 8005568:	d1f6      	bne.n	8005558 <_printf_i+0x30>
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	6813      	ldr	r3, [r2, #0]
 800556e:	0605      	lsls	r5, r0, #24
 8005570:	f103 0104 	add.w	r1, r3, #4
 8005574:	d52a      	bpl.n	80055cc <_printf_i+0xa4>
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6011      	str	r1, [r2, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da03      	bge.n	8005586 <_printf_i+0x5e>
 800557e:	222d      	movs	r2, #45	; 0x2d
 8005580:	425b      	negs	r3, r3
 8005582:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005586:	486f      	ldr	r0, [pc, #444]	; (8005744 <_printf_i+0x21c>)
 8005588:	220a      	movs	r2, #10
 800558a:	e039      	b.n	8005600 <_printf_i+0xd8>
 800558c:	2973      	cmp	r1, #115	; 0x73
 800558e:	f000 809d 	beq.w	80056cc <_printf_i+0x1a4>
 8005592:	d808      	bhi.n	80055a6 <_printf_i+0x7e>
 8005594:	296f      	cmp	r1, #111	; 0x6f
 8005596:	d020      	beq.n	80055da <_printf_i+0xb2>
 8005598:	2970      	cmp	r1, #112	; 0x70
 800559a:	d1dd      	bne.n	8005558 <_printf_i+0x30>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f043 0320 	orr.w	r3, r3, #32
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	e003      	b.n	80055ae <_printf_i+0x86>
 80055a6:	2975      	cmp	r1, #117	; 0x75
 80055a8:	d017      	beq.n	80055da <_printf_i+0xb2>
 80055aa:	2978      	cmp	r1, #120	; 0x78
 80055ac:	d1d4      	bne.n	8005558 <_printf_i+0x30>
 80055ae:	2378      	movs	r3, #120	; 0x78
 80055b0:	4865      	ldr	r0, [pc, #404]	; (8005748 <_printf_i+0x220>)
 80055b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055b6:	e055      	b.n	8005664 <_printf_i+0x13c>
 80055b8:	6813      	ldr	r3, [r2, #0]
 80055ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055be:	1d19      	adds	r1, r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6011      	str	r1, [r2, #0]
 80055c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c8:	2301      	movs	r3, #1
 80055ca:	e08c      	b.n	80056e6 <_printf_i+0x1be>
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055d2:	6011      	str	r1, [r2, #0]
 80055d4:	bf18      	it	ne
 80055d6:	b21b      	sxthne	r3, r3
 80055d8:	e7cf      	b.n	800557a <_printf_i+0x52>
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	6825      	ldr	r5, [r4, #0]
 80055de:	1d18      	adds	r0, r3, #4
 80055e0:	6010      	str	r0, [r2, #0]
 80055e2:	0628      	lsls	r0, r5, #24
 80055e4:	d501      	bpl.n	80055ea <_printf_i+0xc2>
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	e002      	b.n	80055f0 <_printf_i+0xc8>
 80055ea:	0668      	lsls	r0, r5, #25
 80055ec:	d5fb      	bpl.n	80055e6 <_printf_i+0xbe>
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	296f      	cmp	r1, #111	; 0x6f
 80055f2:	bf14      	ite	ne
 80055f4:	220a      	movne	r2, #10
 80055f6:	2208      	moveq	r2, #8
 80055f8:	4852      	ldr	r0, [pc, #328]	; (8005744 <_printf_i+0x21c>)
 80055fa:	2100      	movs	r1, #0
 80055fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005600:	6865      	ldr	r5, [r4, #4]
 8005602:	2d00      	cmp	r5, #0
 8005604:	60a5      	str	r5, [r4, #8]
 8005606:	f2c0 8095 	blt.w	8005734 <_printf_i+0x20c>
 800560a:	6821      	ldr	r1, [r4, #0]
 800560c:	f021 0104 	bic.w	r1, r1, #4
 8005610:	6021      	str	r1, [r4, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d13d      	bne.n	8005692 <_printf_i+0x16a>
 8005616:	2d00      	cmp	r5, #0
 8005618:	f040 808e 	bne.w	8005738 <_printf_i+0x210>
 800561c:	4665      	mov	r5, ip
 800561e:	2a08      	cmp	r2, #8
 8005620:	d10b      	bne.n	800563a <_printf_i+0x112>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	07db      	lsls	r3, r3, #31
 8005626:	d508      	bpl.n	800563a <_printf_i+0x112>
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	bfde      	ittt	le
 8005630:	2330      	movle	r3, #48	; 0x30
 8005632:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005636:	f105 35ff 	addle.w	r5, r5, #4294967295
 800563a:	ebac 0305 	sub.w	r3, ip, r5
 800563e:	6123      	str	r3, [r4, #16]
 8005640:	f8cd 8000 	str.w	r8, [sp]
 8005644:	463b      	mov	r3, r7
 8005646:	aa03      	add	r2, sp, #12
 8005648:	4621      	mov	r1, r4
 800564a:	4630      	mov	r0, r6
 800564c:	f7ff fef6 	bl	800543c <_printf_common>
 8005650:	3001      	adds	r0, #1
 8005652:	d14d      	bne.n	80056f0 <_printf_i+0x1c8>
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	b005      	add	sp, #20
 800565a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800565e:	4839      	ldr	r0, [pc, #228]	; (8005744 <_printf_i+0x21c>)
 8005660:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005664:	6813      	ldr	r3, [r2, #0]
 8005666:	6821      	ldr	r1, [r4, #0]
 8005668:	1d1d      	adds	r5, r3, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6015      	str	r5, [r2, #0]
 800566e:	060a      	lsls	r2, r1, #24
 8005670:	d50b      	bpl.n	800568a <_printf_i+0x162>
 8005672:	07ca      	lsls	r2, r1, #31
 8005674:	bf44      	itt	mi
 8005676:	f041 0120 	orrmi.w	r1, r1, #32
 800567a:	6021      	strmi	r1, [r4, #0]
 800567c:	b91b      	cbnz	r3, 8005686 <_printf_i+0x15e>
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	f022 0220 	bic.w	r2, r2, #32
 8005684:	6022      	str	r2, [r4, #0]
 8005686:	2210      	movs	r2, #16
 8005688:	e7b7      	b.n	80055fa <_printf_i+0xd2>
 800568a:	064d      	lsls	r5, r1, #25
 800568c:	bf48      	it	mi
 800568e:	b29b      	uxthmi	r3, r3
 8005690:	e7ef      	b.n	8005672 <_printf_i+0x14a>
 8005692:	4665      	mov	r5, ip
 8005694:	fbb3 f1f2 	udiv	r1, r3, r2
 8005698:	fb02 3311 	mls	r3, r2, r1, r3
 800569c:	5cc3      	ldrb	r3, [r0, r3]
 800569e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056a2:	460b      	mov	r3, r1
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d1f5      	bne.n	8005694 <_printf_i+0x16c>
 80056a8:	e7b9      	b.n	800561e <_printf_i+0xf6>
 80056aa:	6813      	ldr	r3, [r2, #0]
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	1d18      	adds	r0, r3, #4
 80056b0:	6961      	ldr	r1, [r4, #20]
 80056b2:	6010      	str	r0, [r2, #0]
 80056b4:	0628      	lsls	r0, r5, #24
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	d501      	bpl.n	80056be <_printf_i+0x196>
 80056ba:	6019      	str	r1, [r3, #0]
 80056bc:	e002      	b.n	80056c4 <_printf_i+0x19c>
 80056be:	066a      	lsls	r2, r5, #25
 80056c0:	d5fb      	bpl.n	80056ba <_printf_i+0x192>
 80056c2:	8019      	strh	r1, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	4665      	mov	r5, ip
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	e7b9      	b.n	8005640 <_printf_i+0x118>
 80056cc:	6813      	ldr	r3, [r2, #0]
 80056ce:	1d19      	adds	r1, r3, #4
 80056d0:	6011      	str	r1, [r2, #0]
 80056d2:	681d      	ldr	r5, [r3, #0]
 80056d4:	6862      	ldr	r2, [r4, #4]
 80056d6:	2100      	movs	r1, #0
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 f837 	bl	800574c <memchr>
 80056de:	b108      	cbz	r0, 80056e4 <_printf_i+0x1bc>
 80056e0:	1b40      	subs	r0, r0, r5
 80056e2:	6060      	str	r0, [r4, #4]
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	2300      	movs	r3, #0
 80056ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ee:	e7a7      	b.n	8005640 <_printf_i+0x118>
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	462a      	mov	r2, r5
 80056f4:	4639      	mov	r1, r7
 80056f6:	4630      	mov	r0, r6
 80056f8:	47c0      	blx	r8
 80056fa:	3001      	adds	r0, #1
 80056fc:	d0aa      	beq.n	8005654 <_printf_i+0x12c>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	079b      	lsls	r3, r3, #30
 8005702:	d413      	bmi.n	800572c <_printf_i+0x204>
 8005704:	68e0      	ldr	r0, [r4, #12]
 8005706:	9b03      	ldr	r3, [sp, #12]
 8005708:	4298      	cmp	r0, r3
 800570a:	bfb8      	it	lt
 800570c:	4618      	movlt	r0, r3
 800570e:	e7a3      	b.n	8005658 <_printf_i+0x130>
 8005710:	2301      	movs	r3, #1
 8005712:	464a      	mov	r2, r9
 8005714:	4639      	mov	r1, r7
 8005716:	4630      	mov	r0, r6
 8005718:	47c0      	blx	r8
 800571a:	3001      	adds	r0, #1
 800571c:	d09a      	beq.n	8005654 <_printf_i+0x12c>
 800571e:	3501      	adds	r5, #1
 8005720:	68e3      	ldr	r3, [r4, #12]
 8005722:	9a03      	ldr	r2, [sp, #12]
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	42ab      	cmp	r3, r5
 8005728:	dcf2      	bgt.n	8005710 <_printf_i+0x1e8>
 800572a:	e7eb      	b.n	8005704 <_printf_i+0x1dc>
 800572c:	2500      	movs	r5, #0
 800572e:	f104 0919 	add.w	r9, r4, #25
 8005732:	e7f5      	b.n	8005720 <_printf_i+0x1f8>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ac      	bne.n	8005692 <_printf_i+0x16a>
 8005738:	7803      	ldrb	r3, [r0, #0]
 800573a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800573e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005742:	e76c      	b.n	800561e <_printf_i+0xf6>
 8005744:	08005a59 	.word	0x08005a59
 8005748:	08005a6a 	.word	0x08005a6a

0800574c <memchr>:
 800574c:	b510      	push	{r4, lr}
 800574e:	b2c9      	uxtb	r1, r1
 8005750:	4402      	add	r2, r0
 8005752:	4290      	cmp	r0, r2
 8005754:	4603      	mov	r3, r0
 8005756:	d101      	bne.n	800575c <memchr+0x10>
 8005758:	2300      	movs	r3, #0
 800575a:	e003      	b.n	8005764 <memchr+0x18>
 800575c:	781c      	ldrb	r4, [r3, #0]
 800575e:	3001      	adds	r0, #1
 8005760:	428c      	cmp	r4, r1
 8005762:	d1f6      	bne.n	8005752 <memchr+0x6>
 8005764:	4618      	mov	r0, r3
 8005766:	bd10      	pop	{r4, pc}

08005768 <memmove>:
 8005768:	4288      	cmp	r0, r1
 800576a:	b510      	push	{r4, lr}
 800576c:	eb01 0302 	add.w	r3, r1, r2
 8005770:	d807      	bhi.n	8005782 <memmove+0x1a>
 8005772:	1e42      	subs	r2, r0, #1
 8005774:	4299      	cmp	r1, r3
 8005776:	d00a      	beq.n	800578e <memmove+0x26>
 8005778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800577c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005780:	e7f8      	b.n	8005774 <memmove+0xc>
 8005782:	4283      	cmp	r3, r0
 8005784:	d9f5      	bls.n	8005772 <memmove+0xa>
 8005786:	1881      	adds	r1, r0, r2
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	42d3      	cmn	r3, r2
 800578c:	d100      	bne.n	8005790 <memmove+0x28>
 800578e:	bd10      	pop	{r4, pc}
 8005790:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005794:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005798:	e7f7      	b.n	800578a <memmove+0x22>
	...

0800579c <_free_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4605      	mov	r5, r0
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d043      	beq.n	800582c <_free_r+0x90>
 80057a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a8:	1f0c      	subs	r4, r1, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfb8      	it	lt
 80057ae:	18e4      	addlt	r4, r4, r3
 80057b0:	f000 f8d0 	bl	8005954 <__malloc_lock>
 80057b4:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <_free_r+0x94>)
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	4610      	mov	r0, r2
 80057ba:	b933      	cbnz	r3, 80057ca <_free_r+0x2e>
 80057bc:	6063      	str	r3, [r4, #4]
 80057be:	6014      	str	r4, [r2, #0]
 80057c0:	4628      	mov	r0, r5
 80057c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c6:	f000 b8c6 	b.w	8005956 <__malloc_unlock>
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	d90b      	bls.n	80057e6 <_free_r+0x4a>
 80057ce:	6821      	ldr	r1, [r4, #0]
 80057d0:	1862      	adds	r2, r4, r1
 80057d2:	4293      	cmp	r3, r2
 80057d4:	bf01      	itttt	eq
 80057d6:	681a      	ldreq	r2, [r3, #0]
 80057d8:	685b      	ldreq	r3, [r3, #4]
 80057da:	1852      	addeq	r2, r2, r1
 80057dc:	6022      	streq	r2, [r4, #0]
 80057de:	6063      	str	r3, [r4, #4]
 80057e0:	6004      	str	r4, [r0, #0]
 80057e2:	e7ed      	b.n	80057c0 <_free_r+0x24>
 80057e4:	4613      	mov	r3, r2
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	b10a      	cbz	r2, 80057ee <_free_r+0x52>
 80057ea:	42a2      	cmp	r2, r4
 80057ec:	d9fa      	bls.n	80057e4 <_free_r+0x48>
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	1858      	adds	r0, r3, r1
 80057f2:	42a0      	cmp	r0, r4
 80057f4:	d10b      	bne.n	800580e <_free_r+0x72>
 80057f6:	6820      	ldr	r0, [r4, #0]
 80057f8:	4401      	add	r1, r0
 80057fa:	1858      	adds	r0, r3, r1
 80057fc:	4282      	cmp	r2, r0
 80057fe:	6019      	str	r1, [r3, #0]
 8005800:	d1de      	bne.n	80057c0 <_free_r+0x24>
 8005802:	6810      	ldr	r0, [r2, #0]
 8005804:	6852      	ldr	r2, [r2, #4]
 8005806:	4401      	add	r1, r0
 8005808:	6019      	str	r1, [r3, #0]
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	e7d8      	b.n	80057c0 <_free_r+0x24>
 800580e:	d902      	bls.n	8005816 <_free_r+0x7a>
 8005810:	230c      	movs	r3, #12
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	e7d4      	b.n	80057c0 <_free_r+0x24>
 8005816:	6820      	ldr	r0, [r4, #0]
 8005818:	1821      	adds	r1, r4, r0
 800581a:	428a      	cmp	r2, r1
 800581c:	bf01      	itttt	eq
 800581e:	6811      	ldreq	r1, [r2, #0]
 8005820:	6852      	ldreq	r2, [r2, #4]
 8005822:	1809      	addeq	r1, r1, r0
 8005824:	6021      	streq	r1, [r4, #0]
 8005826:	6062      	str	r2, [r4, #4]
 8005828:	605c      	str	r4, [r3, #4]
 800582a:	e7c9      	b.n	80057c0 <_free_r+0x24>
 800582c:	bd38      	pop	{r3, r4, r5, pc}
 800582e:	bf00      	nop
 8005830:	20003ef0 	.word	0x20003ef0

08005834 <_malloc_r>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	1ccd      	adds	r5, r1, #3
 8005838:	f025 0503 	bic.w	r5, r5, #3
 800583c:	3508      	adds	r5, #8
 800583e:	2d0c      	cmp	r5, #12
 8005840:	bf38      	it	cc
 8005842:	250c      	movcc	r5, #12
 8005844:	2d00      	cmp	r5, #0
 8005846:	4606      	mov	r6, r0
 8005848:	db01      	blt.n	800584e <_malloc_r+0x1a>
 800584a:	42a9      	cmp	r1, r5
 800584c:	d903      	bls.n	8005856 <_malloc_r+0x22>
 800584e:	230c      	movs	r3, #12
 8005850:	6033      	str	r3, [r6, #0]
 8005852:	2000      	movs	r0, #0
 8005854:	bd70      	pop	{r4, r5, r6, pc}
 8005856:	f000 f87d 	bl	8005954 <__malloc_lock>
 800585a:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <_malloc_r+0xac>)
 800585c:	6814      	ldr	r4, [r2, #0]
 800585e:	4621      	mov	r1, r4
 8005860:	b991      	cbnz	r1, 8005888 <_malloc_r+0x54>
 8005862:	4c20      	ldr	r4, [pc, #128]	; (80058e4 <_malloc_r+0xb0>)
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	b91b      	cbnz	r3, 8005870 <_malloc_r+0x3c>
 8005868:	4630      	mov	r0, r6
 800586a:	f000 f863 	bl	8005934 <_sbrk_r>
 800586e:	6020      	str	r0, [r4, #0]
 8005870:	4629      	mov	r1, r5
 8005872:	4630      	mov	r0, r6
 8005874:	f000 f85e 	bl	8005934 <_sbrk_r>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d124      	bne.n	80058c6 <_malloc_r+0x92>
 800587c:	230c      	movs	r3, #12
 800587e:	4630      	mov	r0, r6
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	f000 f868 	bl	8005956 <__malloc_unlock>
 8005886:	e7e4      	b.n	8005852 <_malloc_r+0x1e>
 8005888:	680b      	ldr	r3, [r1, #0]
 800588a:	1b5b      	subs	r3, r3, r5
 800588c:	d418      	bmi.n	80058c0 <_malloc_r+0x8c>
 800588e:	2b0b      	cmp	r3, #11
 8005890:	d90f      	bls.n	80058b2 <_malloc_r+0x7e>
 8005892:	600b      	str	r3, [r1, #0]
 8005894:	18cc      	adds	r4, r1, r3
 8005896:	50cd      	str	r5, [r1, r3]
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f85c 	bl	8005956 <__malloc_unlock>
 800589e:	f104 000b 	add.w	r0, r4, #11
 80058a2:	1d23      	adds	r3, r4, #4
 80058a4:	f020 0007 	bic.w	r0, r0, #7
 80058a8:	1ac3      	subs	r3, r0, r3
 80058aa:	d0d3      	beq.n	8005854 <_malloc_r+0x20>
 80058ac:	425a      	negs	r2, r3
 80058ae:	50e2      	str	r2, [r4, r3]
 80058b0:	e7d0      	b.n	8005854 <_malloc_r+0x20>
 80058b2:	684b      	ldr	r3, [r1, #4]
 80058b4:	428c      	cmp	r4, r1
 80058b6:	bf16      	itet	ne
 80058b8:	6063      	strne	r3, [r4, #4]
 80058ba:	6013      	streq	r3, [r2, #0]
 80058bc:	460c      	movne	r4, r1
 80058be:	e7eb      	b.n	8005898 <_malloc_r+0x64>
 80058c0:	460c      	mov	r4, r1
 80058c2:	6849      	ldr	r1, [r1, #4]
 80058c4:	e7cc      	b.n	8005860 <_malloc_r+0x2c>
 80058c6:	1cc4      	adds	r4, r0, #3
 80058c8:	f024 0403 	bic.w	r4, r4, #3
 80058cc:	42a0      	cmp	r0, r4
 80058ce:	d005      	beq.n	80058dc <_malloc_r+0xa8>
 80058d0:	1a21      	subs	r1, r4, r0
 80058d2:	4630      	mov	r0, r6
 80058d4:	f000 f82e 	bl	8005934 <_sbrk_r>
 80058d8:	3001      	adds	r0, #1
 80058da:	d0cf      	beq.n	800587c <_malloc_r+0x48>
 80058dc:	6025      	str	r5, [r4, #0]
 80058de:	e7db      	b.n	8005898 <_malloc_r+0x64>
 80058e0:	20003ef0 	.word	0x20003ef0
 80058e4:	20003ef4 	.word	0x20003ef4

080058e8 <_realloc_r>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	4607      	mov	r7, r0
 80058ec:	4614      	mov	r4, r2
 80058ee:	460e      	mov	r6, r1
 80058f0:	b921      	cbnz	r1, 80058fc <_realloc_r+0x14>
 80058f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058f6:	4611      	mov	r1, r2
 80058f8:	f7ff bf9c 	b.w	8005834 <_malloc_r>
 80058fc:	b922      	cbnz	r2, 8005908 <_realloc_r+0x20>
 80058fe:	f7ff ff4d 	bl	800579c <_free_r>
 8005902:	4625      	mov	r5, r4
 8005904:	4628      	mov	r0, r5
 8005906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005908:	f000 f826 	bl	8005958 <_malloc_usable_size_r>
 800590c:	42a0      	cmp	r0, r4
 800590e:	d20f      	bcs.n	8005930 <_realloc_r+0x48>
 8005910:	4621      	mov	r1, r4
 8005912:	4638      	mov	r0, r7
 8005914:	f7ff ff8e 	bl	8005834 <_malloc_r>
 8005918:	4605      	mov	r5, r0
 800591a:	2800      	cmp	r0, #0
 800591c:	d0f2      	beq.n	8005904 <_realloc_r+0x1c>
 800591e:	4631      	mov	r1, r6
 8005920:	4622      	mov	r2, r4
 8005922:	f7ff fbf1 	bl	8005108 <memcpy>
 8005926:	4631      	mov	r1, r6
 8005928:	4638      	mov	r0, r7
 800592a:	f7ff ff37 	bl	800579c <_free_r>
 800592e:	e7e9      	b.n	8005904 <_realloc_r+0x1c>
 8005930:	4635      	mov	r5, r6
 8005932:	e7e7      	b.n	8005904 <_realloc_r+0x1c>

08005934 <_sbrk_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	2300      	movs	r3, #0
 8005938:	4c05      	ldr	r4, [pc, #20]	; (8005950 <_sbrk_r+0x1c>)
 800593a:	4605      	mov	r5, r0
 800593c:	4608      	mov	r0, r1
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	f7fb fddc 	bl	80014fc <_sbrk>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_sbrk_r+0x1a>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	b103      	cbz	r3, 800594e <_sbrk_r+0x1a>
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	20004028 	.word	0x20004028

08005954 <__malloc_lock>:
 8005954:	4770      	bx	lr

08005956 <__malloc_unlock>:
 8005956:	4770      	bx	lr

08005958 <_malloc_usable_size_r>:
 8005958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595c:	1f18      	subs	r0, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	bfbc      	itt	lt
 8005962:	580b      	ldrlt	r3, [r1, r0]
 8005964:	18c0      	addlt	r0, r0, r3
 8005966:	4770      	bx	lr

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
