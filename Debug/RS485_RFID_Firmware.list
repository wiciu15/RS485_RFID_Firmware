
RS485_RFID_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005850  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a5c  08005a5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005a5c  08005a5c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a5c  08005a5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a5c  08005a5c  00015a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a60  08005a60  00015a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fb4  20000078  08005adc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000402c  08005adc  0002402c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148e9  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003018  00000000  00000000  0003498a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  000379a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00038d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d26  00000000  00000000  00039f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9bb  00000000  00000000  00050ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cde9  00000000  00000000  0005f661  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc44a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000546c  00000000  00000000  000dc4c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005948 	.word	0x08005948

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005948 	.word	0x08005948

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0

}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800016c:	b480      	push	{r7}
 800016e:	af00      	add	r7, sp, #0
return 0;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
	...

0800017c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <vApplicationGetIdleTaskMemory+0x28>)
 800018c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000192:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2280      	movs	r2, #128	; 0x80
 8000198:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000094 	.word	0x20000094
 80001a8:	200000f8 	.word	0x200000f8

080001ac <LED_SignalDeviceError>:
 *      Author: wiki1
 */

#include "led.h"

void LED_SignalDeviceError(uint8_t numOfBeeps){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<numOfBeeps;i++){
 80001b6:	2300      	movs	r3, #0
 80001b8:	73fb      	strb	r3, [r7, #15]
 80001ba:	e012      	b.n	80001e2 <LED_SignalDeviceError+0x36>
		LED_Clear();
 80001bc:	f000 f87a 	bl	80002b4 <LED_Clear>
		BUZZ_Disable();
 80001c0:	f000 f8c0 	bl	8000344 <BUZZ_Disable>
		osDelay(300);
 80001c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001c8:	f003 fcae 	bl	8003b28 <osDelay>
		LED_SetColor(RED);
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 f84b 	bl	8000268 <LED_SetColor>
		BUZZ_Enable();
 80001d2:	f000 f8ab 	bl	800032c <BUZZ_Enable>
		osDelay(200);
 80001d6:	20c8      	movs	r0, #200	; 0xc8
 80001d8:	f003 fca6 	bl	8003b28 <osDelay>
	for(uint8_t i=0;i<numOfBeeps;i++){
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
 80001de:	3301      	adds	r3, #1
 80001e0:	73fb      	strb	r3, [r7, #15]
 80001e2:	7bfa      	ldrb	r2, [r7, #15]
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d3e8      	bcc.n	80001bc <LED_SignalDeviceError+0x10>
	}
	BUZZ_Disable();
 80001ea:	f000 f8ab 	bl	8000344 <BUZZ_Disable>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}

080001f6 <LED_Init>:

void LED_Init(void){
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af00      	add	r7, sp, #0
	BUZZ_Enable();
 80001fc:	f000 f896 	bl	800032c <BUZZ_Enable>
	for(uint16_t i=0;i<2;i++){
 8000200:	2300      	movs	r3, #0
 8000202:	80fb      	strh	r3, [r7, #6]
 8000204:	e027      	b.n	8000256 <LED_Init+0x60>
		LED_SetColor(RED);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f82e 	bl	8000268 <LED_SetColor>
		osDelay(200);
 800020c:	20c8      	movs	r0, #200	; 0xc8
 800020e:	f003 fc8b 	bl	8003b28 <osDelay>
		LED_SetColor(GREEN);
 8000212:	2001      	movs	r0, #1
 8000214:	f000 f828 	bl	8000268 <LED_SetColor>
		osDelay(200);
 8000218:	20c8      	movs	r0, #200	; 0xc8
 800021a:	f003 fc85 	bl	8003b28 <osDelay>
		LED_SetColor(BLUE);
 800021e:	2002      	movs	r0, #2
 8000220:	f000 f822 	bl	8000268 <LED_SetColor>
		osDelay(200);
 8000224:	20c8      	movs	r0, #200	; 0xc8
 8000226:	f003 fc7f 	bl	8003b28 <osDelay>
		LED_ClearColor(RED);
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f858 	bl	80002e0 <LED_ClearColor>
		osDelay(200);
 8000230:	20c8      	movs	r0, #200	; 0xc8
 8000232:	f003 fc79 	bl	8003b28 <osDelay>
		LED_ClearColor(GREEN);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f852 	bl	80002e0 <LED_ClearColor>
		osDelay(200);
 800023c:	20c8      	movs	r0, #200	; 0xc8
 800023e:	f003 fc73 	bl	8003b28 <osDelay>
		LED_ClearColor(BLUE);
 8000242:	2002      	movs	r0, #2
 8000244:	f000 f84c 	bl	80002e0 <LED_ClearColor>
		osDelay(500);
 8000248:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024c:	f003 fc6c 	bl	8003b28 <osDelay>
	for(uint16_t i=0;i<2;i++){
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	3301      	adds	r3, #1
 8000254:	80fb      	strh	r3, [r7, #6]
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d9d4      	bls.n	8000206 <LED_Init+0x10>
	}
	BUZZ_Disable();
 800025c:	f000 f872 	bl	8000344 <BUZZ_Disable>
		LED_SetColor(BLUE, i*100);
		osDelay(1);
	}
	__HAL_TIM_SET_COMPARE(&htim2,BUZZER_CH,0);
	*/
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <LED_SetColor>:

void LED_SetColor(typedef_color color){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
	switch (color){
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d00a      	beq.n	800028e <LED_SetColor+0x26>
 8000278:	2b02      	cmp	r3, #2
 800027a:	d00e      	beq.n	800029a <LED_SetColor+0x32>
 800027c:	2b00      	cmp	r3, #0
 800027e:	d000      	beq.n	8000282 <LED_SetColor+0x1a>
			break;
	case BLUE:
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
			break;
	}
}
 8000280:	e011      	b.n	80002a6 <LED_SetColor+0x3e>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2101      	movs	r1, #1
 8000286:	480a      	ldr	r0, [pc, #40]	; (80002b0 <LED_SetColor+0x48>)
 8000288:	f001 fc90 	bl	8001bac <HAL_GPIO_WritePin>
		break;
 800028c:	e00b      	b.n	80002a6 <LED_SetColor+0x3e>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2102      	movs	r1, #2
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <LED_SetColor+0x48>)
 8000294:	f001 fc8a 	bl	8001bac <HAL_GPIO_WritePin>
			break;
 8000298:	e005      	b.n	80002a6 <LED_SetColor+0x3e>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2104      	movs	r1, #4
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <LED_SetColor+0x48>)
 80002a0:	f001 fc84 	bl	8001bac <HAL_GPIO_WritePin>
			break;
 80002a4:	bf00      	nop
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40010800 	.word	0x40010800

080002b4 <LED_Clear>:

void LED_Clear(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2101      	movs	r1, #1
 80002bc:	4807      	ldr	r0, [pc, #28]	; (80002dc <LED_Clear+0x28>)
 80002be:	f001 fc75 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2102      	movs	r1, #2
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <LED_Clear+0x28>)
 80002c8:	f001 fc70 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2104      	movs	r1, #4
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <LED_Clear+0x28>)
 80002d2:	f001 fc6b 	bl	8001bac <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010800 	.word	0x40010800

080002e0 <LED_ClearColor>:
void LED_ClearColor(uint8_t color){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	switch (color){
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d00a      	beq.n	8000306 <LED_ClearColor+0x26>
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d00e      	beq.n	8000312 <LED_ClearColor+0x32>
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d000      	beq.n	80002fa <LED_ClearColor+0x1a>
		break;
	case BLUE:
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
		break;
	}
}
 80002f8:	e011      	b.n	800031e <LED_ClearColor+0x3e>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2101      	movs	r1, #1
 80002fe:	480a      	ldr	r0, [pc, #40]	; (8000328 <LED_ClearColor+0x48>)
 8000300:	f001 fc54 	bl	8001bac <HAL_GPIO_WritePin>
		break;
 8000304:	e00b      	b.n	800031e <LED_ClearColor+0x3e>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2102      	movs	r1, #2
 800030a:	4807      	ldr	r0, [pc, #28]	; (8000328 <LED_ClearColor+0x48>)
 800030c:	f001 fc4e 	bl	8001bac <HAL_GPIO_WritePin>
		break;
 8000310:	e005      	b.n	800031e <LED_ClearColor+0x3e>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2104      	movs	r1, #4
 8000316:	4804      	ldr	r0, [pc, #16]	; (8000328 <LED_ClearColor+0x48>)
 8000318:	f001 fc48 	bl	8001bac <HAL_GPIO_WritePin>
		break;
 800031c:	bf00      	nop
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010800 	.word	0x40010800

0800032c <BUZZ_Enable>:

void BUZZ_Enable(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2108      	movs	r1, #8
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <BUZZ_Enable+0x14>)
 8000336:	f001 fc39 	bl	8001bac <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800

08000344 <BUZZ_Disable>:
void BUZZ_Disable(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2108      	movs	r1, #8
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <BUZZ_Disable+0x14>)
 800034e:	f001 fc2d 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b5b0      	push	{r4, r5, r7, lr}
 800035e:	b096      	sub	sp, #88	; 0x58
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000362:	f001 f941 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000366:	f000 f851 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036a:	f000 f93f 	bl	80005ec <MX_GPIO_Init>
  MX_SPI1_Init();
 800036e:	f000 f891 	bl	8000494 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000372:	f000 f911 	bl	8000598 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000376:	f000 f8c3 	bl	8000500 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 800037a:	f000 fec0 	bl	80010fe <MFRC522_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <main+0x98>)
 8000380:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000384:	461d      	mov	r5, r3
 8000386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800038e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f003 fb79 	bl	8003a90 <osThreadCreate>
 800039e:	4602      	mov	r2, r0
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <main+0x9c>)
 80003a2:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReceiveData */
  osThreadDef(ReceiveData, vReceiveDataTask, osPriorityNormal, 0, 1024);
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <main+0xa0>)
 80003a6:	f107 0420 	add.w	r4, r7, #32
 80003aa:	461d      	mov	r5, r3
 80003ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiveDataHandle = osThreadCreate(osThread(ReceiveData), NULL);
 80003b8:	f107 0320 	add.w	r3, r7, #32
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 fb66 	bl	8003a90 <osThreadCreate>
 80003c4:	4602      	mov	r2, r0
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <main+0xa4>)
 80003c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of StatusReporting */
  osThreadDef(StatusReporting, vStatusReporting, osPriorityNormal, 0, 128);
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <main+0xa8>)
 80003cc:	1d3c      	adds	r4, r7, #4
 80003ce:	461d      	mov	r5, r3
 80003d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StatusReportingHandle = osThreadCreate(osThread(StatusReporting), NULL);
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f003 fb55 	bl	8003a90 <osThreadCreate>
 80003e6:	4602      	mov	r2, r0
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <main+0xac>)
 80003ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003ec:	f003 fb49 	bl	8003a82 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <main+0x94>
 80003f2:	bf00      	nop
 80003f4:	0800596c 	.word	0x0800596c
 80003f8:	20003ef8 	.word	0x20003ef8
 80003fc:	08005994 	.word	0x08005994
 8000400:	20003f44 	.word	0x20003f44
 8000404:	080059c0 	.word	0x080059c0
 8000408:	20003f48 	.word	0x20003f48

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b090      	sub	sp, #64	; 0x40
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2228      	movs	r2, #40	; 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f004 fe6f 	bl	80050fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042e:	2301      	movs	r3, #1
 8000430:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043c:	2301      	movs	r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000440:	2302      	movs	r3, #2
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f001 fbc1 	bl	8001bdc <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000460:	f000 fbf2 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2302      	movs	r3, #2
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2102      	movs	r1, #2
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fe2d 	bl	80020dc <HAL_RCC_ClockConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000488:	f000 fbde 	bl	8000c48 <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3740      	adds	r7, #64	; 0x40
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_SPI1_Init+0x64>)
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <MX_SPI1_Init+0x68>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004c8:	2208      	movs	r2, #8
 80004ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004da:	2200      	movs	r2, #0
 80004dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004e0:	220a      	movs	r2, #10
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004e6:	f001 ffc5 	bl	8002474 <HAL_SPI_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004f0:	f000 fbaa 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20003f4c 	.word	0x20003f4c
 80004fc:	40013000 	.word	0x40013000

08000500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_TIM2_Init+0x94>)
 800051e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_TIM2_Init+0x94>)
 8000526:	2204      	movs	r2, #4
 8000528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_TIM2_Init+0x94>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_TIM2_Init+0x94>)
 8000532:	f242 720f 	movw	r2, #9999	; 0x270f
 8000536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_TIM2_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_TIM2_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000544:	4813      	ldr	r0, [pc, #76]	; (8000594 <MX_TIM2_Init+0x94>)
 8000546:	f002 fa20 	bl	800298a <HAL_TIM_Base_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000550:	f000 fb7a 	bl	8000c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	4619      	mov	r1, r3
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <MX_TIM2_Init+0x94>)
 8000562:	f002 fb68 	bl	8002c36 <HAL_TIM_ConfigClockSource>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800056c:	f000 fb6c 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_TIM2_Init+0x94>)
 800057e:	f002 fd2d 	bl	8002fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000588:	f000 fb5e 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20003fa4 	.word	0x20003fa4

08000598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_USART1_UART_Init+0x50>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005d0:	f002 fd5a 	bl	8003088 <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005da:	f000 fb35 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20003f04 	.word	0x20003f04
 80005e8:	40013800 	.word	0x40013800

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b4e      	ldr	r3, [pc, #312]	; (800073c <MX_GPIO_Init+0x150>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a4d      	ldr	r2, [pc, #308]	; (800073c <MX_GPIO_Init+0x150>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <MX_GPIO_Init+0x150>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000618:	4b48      	ldr	r3, [pc, #288]	; (800073c <MX_GPIO_Init+0x150>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a47      	ldr	r2, [pc, #284]	; (800073c <MX_GPIO_Init+0x150>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <MX_GPIO_Init+0x150>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b42      	ldr	r3, [pc, #264]	; (800073c <MX_GPIO_Init+0x150>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a41      	ldr	r2, [pc, #260]	; (800073c <MX_GPIO_Init+0x150>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b3f      	ldr	r3, [pc, #252]	; (800073c <MX_GPIO_Init+0x150>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b3c      	ldr	r3, [pc, #240]	; (800073c <MX_GPIO_Init+0x150>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a3b      	ldr	r2, [pc, #236]	; (800073c <MX_GPIO_Init+0x150>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <MX_GPIO_Init+0x150>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4836      	ldr	r0, [pc, #216]	; (8000740 <MX_GPIO_Init+0x154>)
 8000668:	f001 faa0 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin|BUZZER_Pin 
 800066c:	2200      	movs	r2, #0
 800066e:	f240 110f 	movw	r1, #271	; 0x10f
 8000672:	4834      	ldr	r0, [pc, #208]	; (8000744 <MX_GPIO_Init+0x158>)
 8000674:	f001 fa9a 	bl	8001bac <HAL_GPIO_WritePin>
                          |RS485_TXENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2101      	movs	r1, #1
 800067c:	4832      	ldr	r0, [pc, #200]	; (8000748 <MX_GPIO_Init+0x15c>)
 800067e:	f001 fa95 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_RESET_GPIO_Port, RC522_RESET_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2102      	movs	r1, #2
 8000686:	4830      	ldr	r0, [pc, #192]	; (8000748 <MX_GPIO_Init+0x15c>)
 8000688:	f001 fa90 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUGLED_Pin */
  GPIO_InitStruct.Pin = DEBUGLED_Pin;
 800068c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUGLED_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	4826      	ldr	r0, [pc, #152]	; (8000740 <MX_GPIO_Init+0x154>)
 80006a6:	f001 f927 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin BUZZER_Pin 
                           RS485_TXENABLE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin|BUZZER_Pin 
 80006aa:	f240 130f 	movw	r3, #271	; 0x10f
 80006ae:	613b      	str	r3, [r7, #16]
                          |RS485_TXENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4820      	ldr	r0, [pc, #128]	; (8000744 <MX_GPIO_Init+0x158>)
 80006c4:	f001 f918 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <MX_GPIO_Init+0x15c>)
 80006e0:	f001 f90a 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC522_RESET_Pin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC522_RESET_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <MX_GPIO_Init+0x15c>)
 80006fc:	f001 f8fc 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC522_IRQ_Pin */
  GPIO_InitStruct.Pin = RC522_IRQ_Pin;
 8000700:	2304      	movs	r3, #4
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RC522_IRQ_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_GPIO_Init+0x15c>)
 8000714:	f001 f8f0 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUGBTN_Pin */
  GPIO_InitStruct.Pin = DEBUGBTN_Pin;
 8000718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUGBTN_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_GPIO_Init+0x158>)
 800072e:	f001 f8e3 	bl	80018f8 <HAL_GPIO_Init>

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	40011000 	.word	0x40011000
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00

0800074c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char UARTInitMsg[10];
	  snprintf(UARTInitMsg,10,"INIT\r\n");
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4a45      	ldr	r2, [pc, #276]	; (8000870 <StartDefaultTask+0x124>)
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	6018      	str	r0, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	8019      	strh	r1, [r3, #0]
 8000764:	3302      	adds	r3, #2
 8000766:	0c0a      	lsrs	r2, r1, #16
 8000768:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000770:	4840      	ldr	r0, [pc, #256]	; (8000874 <StartDefaultTask+0x128>)
 8000772:	f001 fa1b 	bl	8001bac <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart1, (uint8_t *) UARTInitMsg, strlen(UARTInitMsg),20);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fce8 	bl	8000150 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	f107 0108 	add.w	r1, r7, #8
 8000788:	2314      	movs	r3, #20
 800078a:	483b      	ldr	r0, [pc, #236]	; (8000878 <StartDefaultTask+0x12c>)
 800078c:	f002 fcc9 	bl	8003122 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000796:	4837      	ldr	r0, [pc, #220]	; (8000874 <StartDefaultTask+0x128>)
 8000798:	f001 fa08 	bl	8001bac <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(MFRC522_Check(cardIDarray)==MI_OK){
 800079c:	4837      	ldr	r0, [pc, #220]	; (800087c <StartDefaultTask+0x130>)
 800079e:	f000 fae3 	bl	8000d68 <MFRC522_Check>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d15f      	bne.n	8000868 <StartDefaultTask+0x11c>
			HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin,GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ae:	4834      	ldr	r0, [pc, #208]	; (8000880 <StartDefaultTask+0x134>)
 80007b0:	f001 f9fc 	bl	8001bac <HAL_GPIO_WritePin>
			BUZZ_Enable();
 80007b4:	f7ff fdba 	bl	800032c <BUZZ_Enable>
			uint32_t cardIDdec;
			cardIDdec =  (uint32_t)cardIDarray[0] << 24;
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <StartDefaultTask+0x130>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	061b      	lsls	r3, r3, #24
 80007be:	617b      	str	r3, [r7, #20]
			cardIDdec += (uint32_t)cardIDarray[1] << 16;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <StartDefaultTask+0x130>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	041b      	lsls	r3, r3, #16
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	4413      	add	r3, r2
 80007ca:	617b      	str	r3, [r7, #20]
			cardIDdec += (uint32_t)cardIDarray[2] <<  8;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <StartDefaultTask+0x130>)
 80007ce:	789b      	ldrb	r3, [r3, #2]
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
			cardIDdec += (uint32_t)cardIDarray[3];
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <StartDefaultTask+0x130>)
 80007da:	78db      	ldrb	r3, [r3, #3]
 80007dc:	461a      	mov	r2, r3
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
			if(cardIDdec!=lastCardIDdec || (lastRFReadSystick+15000 < xTaskGetTickCount()) || lastRFReadSystick>xTaskGetTickCount()){ //dont accept 2 reads of the same card within 10 sec(ignore if systick overflowed)
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <StartDefaultTask+0x138>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d110      	bne.n	8000810 <StartDefaultTask+0xc4>
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <StartDefaultTask+0x13c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f503 546a 	add.w	r4, r3, #14976	; 0x3a80
 80007f6:	3418      	adds	r4, #24
 80007f8:	f003 fe58 	bl	80044ac <xTaskGetTickCount>
 80007fc:	4603      	mov	r3, r0
 80007fe:	429c      	cmp	r4, r3
 8000800:	d306      	bcc.n	8000810 <StartDefaultTask+0xc4>
 8000802:	f003 fe53 	bl	80044ac <xTaskGetTickCount>
 8000806:	4602      	mov	r2, r0
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <StartDefaultTask+0x13c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d220      	bcs.n	8000852 <StartDefaultTask+0x106>

				lastCardIDdec=cardIDdec;
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <StartDefaultTask+0x138>)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	6013      	str	r3, [r2, #0]
				lastRFReadSystick=xTaskGetTickCount();
 8000816:	f003 fe49 	bl	80044ac <xTaskGetTickCount>
 800081a:	4602      	mov	r2, r0
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <StartDefaultTask+0x13c>)
 800081e:	601a      	str	r2, [r3, #0]
				device_status=CONN_IN_PROGRESS;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <StartDefaultTask+0x140>)
 8000822:	2203      	movs	r2, #3
 8000824:	701a      	strb	r2, [r3, #0]
				osDelay(200);
 8000826:	20c8      	movs	r0, #200	; 0xc8
 8000828:	f003 f97e 	bl	8003b28 <osDelay>
				HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin,GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	4813      	ldr	r0, [pc, #76]	; (8000880 <StartDefaultTask+0x134>)
 8000834:	f001 f9ba 	bl	8001bac <HAL_GPIO_WritePin>
				BUZZ_Disable();
 8000838:	f7ff fd84 	bl	8000344 <BUZZ_Disable>
				vTaskResume(ReceiveDataHandle);
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <StartDefaultTask+0x144>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fccd 	bl	80041e0 <vTaskResume>
				vTaskSuspend(defaultTaskHandle);
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <StartDefaultTask+0x148>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fbfc 	bl	8004048 <vTaskSuspend>
 8000850:	e00a      	b.n	8000868 <StartDefaultTask+0x11c>
			}
			else{
				osDelay(5);
 8000852:	2005      	movs	r0, #5
 8000854:	f003 f968 	bl	8003b28 <osDelay>
				HAL_GPIO_WritePin(DEBUGLED_GPIO_Port, DEBUGLED_Pin,GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4808      	ldr	r0, [pc, #32]	; (8000880 <StartDefaultTask+0x134>)
 8000860:	f001 f9a4 	bl	8001bac <HAL_GPIO_WritePin>
				BUZZ_Disable();
 8000864:	f7ff fd6e 	bl	8000344 <BUZZ_Disable>
			}
		}

		osDelay(100);
 8000868:	2064      	movs	r0, #100	; 0x64
 800086a:	f003 f95d 	bl	8003b28 <osDelay>
		if(MFRC522_Check(cardIDarray)==MI_OK){
 800086e:	e795      	b.n	800079c <StartDefaultTask+0x50>
 8000870:	080059dc 	.word	0x080059dc
 8000874:	40010800 	.word	0x40010800
 8000878:	20003f04 	.word	0x20003f04
 800087c:	20003efc 	.word	0x20003efc
 8000880:	40011000 	.word	0x40011000
 8000884:	200002f8 	.word	0x200002f8
 8000888:	200002fc 	.word	0x200002fc
 800088c:	20000000 	.word	0x20000000
 8000890:	20003f44 	.word	0x20003f44
 8000894:	20003ef8 	.word	0x20003ef8

08000898 <vReceiveDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vReceiveDataTask */
void vReceiveDataTask(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vReceiveDataTask */
	vTaskSuspend(ReceiveDataHandle); //suspended by default until new UID is read in DefaultTask thread
 80008a0:	4b65      	ldr	r3, [pc, #404]	; (8000a38 <vReceiveDataTask+0x1a0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fbcf 	bl	8004048 <vTaskSuspend>
	/* Infinite loop */
	for(;;)
	{
		//////SEND PING AND THEN CARD UID VIA RS485////
		char UARTSendBuffer[20];
		snprintf(UARTSendBuffer,20,"PING\r\n");
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4a63      	ldr	r2, [pc, #396]	; (8000a3c <vReceiveDataTask+0x1a4>)
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	6018      	str	r0, [r3, #0]
 80008b6:	3304      	adds	r3, #4
 80008b8:	8019      	strh	r1, [r3, #0]
 80008ba:	3302      	adds	r3, #2
 80008bc:	0c0a      	lsrs	r2, r1, #16
 80008be:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_SET); //enable TX on transciever
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	485e      	ldr	r0, [pc, #376]	; (8000a40 <vReceiveDataTask+0x1a8>)
 80008c8:	f001 f970 	bl	8001bac <HAL_GPIO_WritePin>
		osDelay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f003 f92b 	bl	8003b28 <osDelay>
		HAL_UART_Transmit(&huart1, (uint8_t *) UARTSendBuffer, strlen(UARTSendBuffer),15); //transmit in blocking mode - no need to implement DMA or interrupts
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fc3a 	bl	8000150 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f107 0110 	add.w	r1, r7, #16
 80008e4:	230f      	movs	r3, #15
 80008e6:	4857      	ldr	r0, [pc, #348]	; (8000a44 <vReceiveDataTask+0x1ac>)
 80008e8:	f002 fc1b 	bl	8003122 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_RESET); //RS485 transceiver is high impedance (listening for response)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f2:	4853      	ldr	r0, [pc, #332]	; (8000a40 <vReceiveDataTask+0x1a8>)
 80008f4:	f001 f95a 	bl	8001bac <HAL_GPIO_WritePin>

		uint8_t UARTReceiveBuffer=8;
 80008f8:	2308      	movs	r3, #8
 80008fa:	73fb      	strb	r3, [r7, #15]
		uint8_t* pUARTReceiveBuffer=&UARTReceiveBuffer;
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
		//__HAL_UART_FLUSH_DRREGISTER(&huart1);
		switch(HAL_UART_Receive(&huart1, pUARTReceiveBuffer, 1, 100)){
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	2201      	movs	r2, #1
 8000906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000908:	484e      	ldr	r0, [pc, #312]	; (8000a44 <vReceiveDataTask+0x1ac>)
 800090a:	f002 fca3 	bl	8003254 <HAL_UART_Receive>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d008      	beq.n	8000926 <vReceiveDataTask+0x8e>
 8000914:	2b03      	cmp	r3, #3
 8000916:	d002      	beq.n	800091e <vReceiveDataTask+0x86>
 8000918:	2b00      	cmp	r3, #0
 800091a:	d008      	beq.n	800092e <vReceiveDataTask+0x96>
 800091c:	e081      	b.n	8000a22 <vReceiveDataTask+0x18a>
		case HAL_TIMEOUT:
			device_status=CONN_TIMEOUT;
 800091e:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <vReceiveDataTask+0x1b0>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
			break;
 8000924:	e07d      	b.n	8000a22 <vReceiveDataTask+0x18a>
		case HAL_ERROR:
			device_status=ERROR_READER;
 8000926:	4b48      	ldr	r3, [pc, #288]	; (8000a48 <vReceiveDataTask+0x1b0>)
 8000928:	2206      	movs	r2, #6
 800092a:	701a      	strb	r2, [r3, #0]
			break;
 800092c:	e079      	b.n	8000a22 <vReceiveDataTask+0x18a>
		case HAL_OK:
			if(UARTReceiveBuffer=='9'){ //indoor unit responds with '9' if its ready to process new UID
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b39      	cmp	r3, #57	; 0x39
 8000932:	d174      	bne.n	8000a1e <vReceiveDataTask+0x186>
				snprintf(UARTSendBuffer,20,"ID%lu\r\n",lastCardIDdec);
 8000934:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <vReceiveDataTask+0x1b4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f107 0010 	add.w	r0, r7, #16
 800093c:	4a44      	ldr	r2, [pc, #272]	; (8000a50 <vReceiveDataTask+0x1b8>)
 800093e:	2114      	movs	r1, #20
 8000940:	f004 fbe6 	bl	8005110 <sniprintf>
				HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_SET); //enable TX on transciever
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094a:	483d      	ldr	r0, [pc, #244]	; (8000a40 <vReceiveDataTask+0x1a8>)
 800094c:	f001 f92e 	bl	8001bac <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t *) UARTSendBuffer, strlen(UARTSendBuffer),15); //transmit in blocking mode - no need to implement DMA or interrupts
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fbfb 	bl	8000150 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	f107 0110 	add.w	r1, r7, #16
 8000962:	230f      	movs	r3, #15
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <vReceiveDataTask+0x1ac>)
 8000966:	f002 fbdc 	bl	8003122 <HAL_UART_Transmit>
				osDelay(10);
 800096a:	200a      	movs	r0, #10
 800096c:	f003 f8dc 	bl	8003b28 <osDelay>
				HAL_GPIO_WritePin(RS485_TXENABLE_GPIO_Port, RS485_TXENABLE_Pin, GPIO_PIN_RESET); //RS485 transceiver is high impedance (listening for response)
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4832      	ldr	r0, [pc, #200]	; (8000a40 <vReceiveDataTask+0x1a8>)
 8000978:	f001 f918 	bl	8001bac <HAL_GPIO_WritePin>

				device_status=WAITING_FOR_RESPONSE;
 800097c:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <vReceiveDataTask+0x1b0>)
 800097e:	2204      	movs	r2, #4
 8000980:	701a      	strb	r2, [r3, #0]
				__HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <vReceiveDataTask+0x1ac>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
				switch(HAL_UART_Receive(&huart1, pUARTReceiveBuffer, 1, 8000)){ //receiving in blocking mode to use 8s timeout if there is a problem within indoor unit
 8000988:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800098c:	2201      	movs	r2, #1
 800098e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000990:	482c      	ldr	r0, [pc, #176]	; (8000a44 <vReceiveDataTask+0x1ac>)
 8000992:	f002 fc5f 	bl	8003254 <HAL_UART_Receive>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d038      	beq.n	8000a0e <vReceiveDataTask+0x176>
 800099c:	2b03      	cmp	r3, #3
 800099e:	d002      	beq.n	80009a6 <vReceiveDataTask+0x10e>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d004      	beq.n	80009ae <vReceiveDataTask+0x116>
 80009a4:	e037      	b.n	8000a16 <vReceiveDataTask+0x17e>
				case HAL_TIMEOUT:
					device_status=CONN_TIMEOUT;
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <vReceiveDataTask+0x1b0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
					break;
 80009ac:	e038      	b.n	8000a20 <vReceiveDataTask+0x188>
				case HAL_OK:
					//device_status=READY;
					switch(UARTReceiveBuffer){      /////////set reader state depending on received code from indoor unit
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	3b30      	subs	r3, #48	; 0x30
 80009b2:	2b05      	cmp	r3, #5
 80009b4:	d826      	bhi.n	8000a04 <vReceiveDataTask+0x16c>
 80009b6:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <vReceiveDataTask+0x124>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	080009dd 	.word	0x080009dd
 80009c0:	080009d5 	.word	0x080009d5
 80009c4:	080009e5 	.word	0x080009e5
 80009c8:	080009ed 	.word	0x080009ed
 80009cc:	080009f5 	.word	0x080009f5
 80009d0:	080009fd 	.word	0x080009fd
					case '1': 						//UID OK
						device_status=UID_VALID;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <vReceiveDataTask+0x1b0>)
 80009d6:	2205      	movs	r2, #5
 80009d8:	701a      	strb	r2, [r3, #0]
						break;
 80009da:	e017      	b.n	8000a0c <vReceiveDataTask+0x174>
					case '0':						//UID unknown/intruder
						device_status=UID_UNKNOWN;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <vReceiveDataTask+0x1b0>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
						break;
 80009e2:	e013      	b.n	8000a0c <vReceiveDataTask+0x174>
					case '2':						//SQL error
						device_status=ERROR_SQL;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <vReceiveDataTask+0x1b0>)
 80009e6:	2207      	movs	r2, #7
 80009e8:	701a      	strb	r2, [r3, #0]
						break;
 80009ea:	e00f      	b.n	8000a0c <vReceiveDataTask+0x174>
					case '3':						//HTTP ERROR
						device_status=ERROR_HTTP;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <vReceiveDataTask+0x1b0>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	701a      	strb	r2, [r3, #0]
						break;
 80009f2:	e00b      	b.n	8000a0c <vReceiveDataTask+0x174>
					case '4':						//SERVER ERROR
						device_status=ERROR_SERVER;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <vReceiveDataTask+0x1b0>)
 80009f6:	2209      	movs	r2, #9
 80009f8:	701a      	strb	r2, [r3, #0]
						break;
 80009fa:	e007      	b.n	8000a0c <vReceiveDataTask+0x174>
					case '5':						//WIFI ERROR
						device_status=ERROR_WIFI;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <vReceiveDataTask+0x1b0>)
 80009fe:	220a      	movs	r2, #10
 8000a00:	701a      	strb	r2, [r3, #0]
						break;
 8000a02:	e003      	b.n	8000a0c <vReceiveDataTask+0x174>
					default:
						device_status=ERROR_READER;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <vReceiveDataTask+0x1b0>)
 8000a06:	2206      	movs	r2, #6
 8000a08:	701a      	strb	r2, [r3, #0]
						break;
 8000a0a:	bf00      	nop
					}
					break;
 8000a0c:	e008      	b.n	8000a20 <vReceiveDataTask+0x188>
					case HAL_ERROR:
						device_status=ERROR_READER;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <vReceiveDataTask+0x1b0>)
 8000a10:	2206      	movs	r2, #6
 8000a12:	701a      	strb	r2, [r3, #0]
						break;
 8000a14:	e004      	b.n	8000a20 <vReceiveDataTask+0x188>
					default:
						device_status=READY;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <vReceiveDataTask+0x1b0>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	701a      	strb	r2, [r3, #0]
						break;
 8000a1c:	e000      	b.n	8000a20 <vReceiveDataTask+0x188>
				}
			}
 8000a1e:	bf00      	nop
			break;
 8000a20:	bf00      	nop
		}

		vTaskResume(defaultTaskHandle);
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <vReceiveDataTask+0x1bc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fbda 	bl	80041e0 <vTaskResume>
		vTaskSuspend(ReceiveDataHandle); //task suspended, default task is now in charge
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <vReceiveDataTask+0x1a0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fb09 	bl	8004048 <vTaskSuspend>
	{
 8000a36:	e738      	b.n	80008aa <vReceiveDataTask+0x12>
 8000a38:	20003f44 	.word	0x20003f44
 8000a3c:	080059e4 	.word	0x080059e4
 8000a40:	40010800 	.word	0x40010800
 8000a44:	20003f04 	.word	0x20003f04
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	200002f8 	.word	0x200002f8
 8000a50:	080059ec 	.word	0x080059ec
 8000a54:	20003ef8 	.word	0x20003ef8

08000a58 <vStatusReporting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStatusReporting */
void vStatusReporting(void const * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStatusReporting */
	osDelay(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f003 f861 	bl	8003b28 <osDelay>
	LED_Init();
 8000a66:	f7ff fbc6 	bl	80001f6 <LED_Init>
  /* Infinite loop */
	for(;;)
	{
		 // HAL_TIM_StateTypeDef timstate = HAL_TIM_PWM_GetState(&htim2);
		switch(device_status){
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <vStatusReporting+0x1c4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	2b09      	cmp	r3, #9
 8000a72:	f200 80be 	bhi.w	8000bf2 <vStatusReporting+0x19a>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <vStatusReporting+0x24>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000b49 	.word	0x08000b49
 8000a80:	08000aa5 	.word	0x08000aa5
 8000a84:	08000ab7 	.word	0x08000ab7
 8000a88:	08000ae5 	.word	0x08000ae5
 8000a8c:	08000b13 	.word	0x08000b13
 8000a90:	08000bf3 	.word	0x08000bf3
 8000a94:	08000b6b 	.word	0x08000b6b
 8000a98:	08000b8d 	.word	0x08000b8d
 8000a9c:	08000baf 	.word	0x08000baf
 8000aa0:	08000bd1 	.word	0x08000bd1
		case READY:
			LED_SetColor(BLUE);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f7ff fbdf 	bl	8000268 <LED_SetColor>
			osDelay(3);
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f003 f83c 	bl	8003b28 <osDelay>
			LED_Clear();
 8000ab0:	f7ff fc00 	bl	80002b4 <LED_Clear>
			break;
 8000ab4:	e0ae      	b.n	8000c14 <vStatusReporting+0x1bc>
		case CONN_IN_PROGRESS:
			LED_Clear();
 8000ab6:	f7ff fbfd 	bl	80002b4 <LED_Clear>
			for(uint8_t i=0;i<3;i++){
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e00d      	b.n	8000adc <vStatusReporting+0x84>
				LED_SetColor(BLUE);
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f7ff fbd1 	bl	8000268 <LED_SetColor>
				osDelay(50);
 8000ac6:	2032      	movs	r0, #50	; 0x32
 8000ac8:	f003 f82e 	bl	8003b28 <osDelay>
				LED_Clear();
 8000acc:	f7ff fbf2 	bl	80002b4 <LED_Clear>
				osDelay(200);
 8000ad0:	20c8      	movs	r0, #200	; 0xc8
 8000ad2:	f003 f829 	bl	8003b28 <osDelay>
			for(uint8_t i=0;i<3;i++){
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d9ee      	bls.n	8000ac0 <vStatusReporting+0x68>
			}
			break;
 8000ae2:	e097      	b.n	8000c14 <vStatusReporting+0x1bc>
		case WAITING_FOR_RESPONSE:
			LED_Clear();
 8000ae4:	f7ff fbe6 	bl	80002b4 <LED_Clear>
			for(uint8_t i=0;i<3;i++){
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73bb      	strb	r3, [r7, #14]
 8000aec:	e00d      	b.n	8000b0a <vStatusReporting+0xb2>
				LED_SetColor(BLUE);
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fbba 	bl	8000268 <LED_SetColor>
				osDelay(50);
 8000af4:	2032      	movs	r0, #50	; 0x32
 8000af6:	f003 f817 	bl	8003b28 <osDelay>
				LED_Clear();
 8000afa:	f7ff fbdb 	bl	80002b4 <LED_Clear>
				osDelay(200);
 8000afe:	20c8      	movs	r0, #200	; 0xc8
 8000b00:	f003 f812 	bl	8003b28 <osDelay>
			for(uint8_t i=0;i<3;i++){
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	3301      	adds	r3, #1
 8000b08:	73bb      	strb	r3, [r7, #14]
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d9ee      	bls.n	8000aee <vStatusReporting+0x96>
			}
			break;
 8000b10:	e080      	b.n	8000c14 <vStatusReporting+0x1bc>
		case UID_VALID:
			vTaskSuspend(defaultTaskHandle);
 8000b12:	4b43      	ldr	r3, [pc, #268]	; (8000c20 <vStatusReporting+0x1c8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fa96 	bl	8004048 <vTaskSuspend>
			LED_Clear();
 8000b1c:	f7ff fbca 	bl	80002b4 <LED_Clear>
			LED_SetColor(GREEN);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff fba1 	bl	8000268 <LED_SetColor>
			BUZZ_Enable();
 8000b26:	f7ff fc01 	bl	800032c <BUZZ_Enable>
			osDelay(2000);
 8000b2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b2e:	f002 fffb 	bl	8003b28 <osDelay>
			device_status=READY;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <vStatusReporting+0x1c4>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	701a      	strb	r2, [r3, #0]
			BUZZ_Disable();
 8000b38:	f7ff fc04 	bl	8000344 <BUZZ_Disable>
			vTaskResume(defaultTaskHandle);
 8000b3c:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <vStatusReporting+0x1c8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fb4d 	bl	80041e0 <vTaskResume>
			break;
 8000b46:	e065      	b.n	8000c14 <vStatusReporting+0x1bc>
////ERROR signalling with blinking RED led and buzzer/////
		case UID_UNKNOWN:
			vTaskSuspend(defaultTaskHandle);
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <vStatusReporting+0x1c8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 fa7b 	bl	8004048 <vTaskSuspend>
			LED_SignalDeviceError(1); //1 beep for unknown
 8000b52:	2001      	movs	r0, #1
 8000b54:	f7ff fb2a 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000b58:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <vStatusReporting+0x1c4>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <vStatusReporting+0x1c8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 fb3c 	bl	80041e0 <vTaskResume>
			break;
 8000b68:	e054      	b.n	8000c14 <vStatusReporting+0x1bc>
		case ERROR_SQL:
			vTaskSuspend(defaultTaskHandle);
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <vStatusReporting+0x1c8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fa6a 	bl	8004048 <vTaskSuspend>
			LED_SignalDeviceError(2); //2 beeps for SQL error
 8000b74:	2002      	movs	r0, #2
 8000b76:	f7ff fb19 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <vStatusReporting+0x1c4>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <vStatusReporting+0x1c8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fb2b 	bl	80041e0 <vTaskResume>
			break;
 8000b8a:	e043      	b.n	8000c14 <vStatusReporting+0x1bc>
		case ERROR_HTTP:
			vTaskSuspend(defaultTaskHandle);
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <vStatusReporting+0x1c8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fa59 	bl	8004048 <vTaskSuspend>
			LED_SignalDeviceError(3); //3 beeps for HTTP error
 8000b96:	2003      	movs	r0, #3
 8000b98:	f7ff fb08 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <vStatusReporting+0x1c4>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <vStatusReporting+0x1c8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 fb1a 	bl	80041e0 <vTaskResume>
			break;
 8000bac:	e032      	b.n	8000c14 <vStatusReporting+0x1bc>
		case ERROR_SERVER:
			vTaskSuspend(defaultTaskHandle);
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <vStatusReporting+0x1c8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fa48 	bl	8004048 <vTaskSuspend>
			LED_SignalDeviceError(4); //4 beeps for server error
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f7ff faf7 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <vStatusReporting+0x1c4>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <vStatusReporting+0x1c8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fb09 	bl	80041e0 <vTaskResume>
			break;
 8000bce:	e021      	b.n	8000c14 <vStatusReporting+0x1bc>
		case ERROR_WIFI:
			vTaskSuspend(defaultTaskHandle);
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <vStatusReporting+0x1c8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fa37 	bl	8004048 <vTaskSuspend>
			LED_SignalDeviceError(5); //5 beeps for wifi error
 8000bda:	2005      	movs	r0, #5
 8000bdc:	f7ff fae6 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <vStatusReporting+0x1c4>)
 8000be2:	2202      	movs	r2, #2
 8000be4:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <vStatusReporting+0x1c8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 faf8 	bl	80041e0 <vTaskResume>
			break;
 8000bf0:	e010      	b.n	8000c14 <vStatusReporting+0x1bc>
		default:
			vTaskSuspend(defaultTaskHandle);
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <vStatusReporting+0x1c8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fa26 	bl	8004048 <vTaskSuspend>
			LED_SignalDeviceError(6); //6 beeps for other problems
 8000bfc:	2006      	movs	r0, #6
 8000bfe:	f7ff fad5 	bl	80001ac <LED_SignalDeviceError>
			device_status=READY;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <vStatusReporting+0x1c4>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	701a      	strb	r2, [r3, #0]
			vTaskResume(defaultTaskHandle);
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <vStatusReporting+0x1c8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fae7 	bl	80041e0 <vTaskResume>
			break;
 8000c12:	bf00      	nop
		}
		osDelay(10);
 8000c14:	200a      	movs	r0, #10
 8000c16:	f002 ff87 	bl	8003b28 <osDelay>
		switch(device_status){
 8000c1a:	e726      	b.n	8000a6a <vStatusReporting+0x12>
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20003ef8 	.word	0x20003ef8

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c36:	f000 fced 	bl	8001614 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40000800 	.word	0x40000800

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi1;


uint8_t SPI1SendByte(uint8_t data) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000c62:	f107 0208 	add.w	r2, r7, #8
 8000c66:	f107 010c 	add.w	r1, r7, #12
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <SPI1SendByte+0x2c>)
 8000c72:	f001 fc60 	bl	8002536 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000c76:	7a3b      	ldrb	r3, [r7, #8]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20003f4c 	.word	0x20003f4c

08000c84 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	4613      	mov	r3, r2
 8000c92:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000c94:	2200      	movs	r2, #0
 8000c96:	2101      	movs	r1, #1
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <SPI1_WriteReg+0x3c>)
 8000c9a:	f000 ff87 	bl	8001bac <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffd7 	bl	8000c54 <SPI1SendByte>
	SPI1SendByte(value);
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffd3 	bl	8000c54 <SPI1SendByte>
	cs_set();
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <SPI1_WriteReg+0x3c>)
 8000cb4:	f000 ff7a 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <SPI1_ReadReg+0x3c>)
 8000cd4:	f000 ff6a 	bl	8001bac <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ffba 	bl	8000c54 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ffb7 	bl	8000c54 <SPI1SendByte>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000cea:	2201      	movs	r2, #1
 8000cec:	2101      	movs	r1, #1
 8000cee:	4804      	ldr	r0, [pc, #16]	; (8000d00 <SPI1_ReadReg+0x3c>)
 8000cf0:	f000 ff5c 	bl	8001bac <HAL_GPIO_WritePin>
	return val;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;								// Address format: 0XXXXXX0
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000d1e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000d20:	79ba      	ldrb	r2, [r7, #6]
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffac 	bl	8000c84 <SPI1_WriteReg>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ffb5 	bl	8000cc4 <SPI1_ReadReg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]
	return val;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);					// Find cards, return card type
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	2026      	movs	r0, #38	; 0x26
 8000d74:	f000 f849 	bl	8000e0a <MFRC522_Request>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d104      	bne.n	8000d8c <MFRC522_Check+0x24>
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f935 	bl	8000ff2 <MFRC522_Anticoll>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();												// Command card into hibernation
 8000d8c:	f000 fa01 	bl	8001192 <MFRC522_Halt>
	return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	460a      	mov	r2, r1
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	4613      	mov	r3, r2
 8000da8:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ffc1 	bl	8000d34 <MFRC522_ReadRegister>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff9f 	bl	8000d04 <MFRC522_WriteRegister>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ffa7 	bl	8000d34 <MFRC522_ReadRegister>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b25a      	sxtb	r2, r3
 8000dea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	4013      	ands	r3, r2
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff81 	bl	8000d04 <MFRC522_WriteRegister>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af02      	add	r7, sp, #8
 8000e10:	4603      	mov	r3, r0
 8000e12:	6039      	str	r1, [r7, #0]
 8000e14:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;											// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8000e16:	2107      	movs	r1, #7
 8000e18:	200d      	movs	r0, #13
 8000e1a:	f7ff ff73 	bl	8000d04 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	200c      	movs	r0, #12
 8000e32:	f000 f80f 	bl	8000e54 <MFRC522_ToCard>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <MFRC522_Request+0x3c>
 8000e40:	89bb      	ldrh	r3, [r7, #12]
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	d001      	beq.n	8000e4a <MFRC522_Request+0x40>
 8000e46:	2302      	movs	r3, #2
 8000e48:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	4613      	mov	r3, r2
 8000e64:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000e66:	2302      	movs	r3, #2
 8000e68:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b0c      	cmp	r3, #12
 8000e76:	d007      	beq.n	8000e88 <MFRC522_ToCard+0x34>
 8000e78:	2b0e      	cmp	r3, #14
 8000e7a:	d000      	beq.n	8000e7e <MFRC522_ToCard+0x2a>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
		break;
 8000e7c:	e009      	b.n	8000e92 <MFRC522_ToCard+0x3e>
			irqEn = 0x12;
 8000e7e:	2312      	movs	r3, #18
 8000e80:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000e82:	2310      	movs	r3, #16
 8000e84:	757b      	strb	r3, [r7, #21]
			break;
 8000e86:	e004      	b.n	8000e92 <MFRC522_ToCard+0x3e>
			irqEn = 0x77;
 8000e88:	2377      	movs	r3, #119	; 0x77
 8000e8a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000e8c:	2330      	movs	r3, #48	; 0x30
 8000e8e:	757b      	strb	r3, [r7, #21]
			break;
 8000e90:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000e92:	7dbb      	ldrb	r3, [r7, #22]
 8000e94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff ff31 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f7ff ff92 	bl	8000dce <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	200a      	movs	r0, #10
 8000eae:	f7ff ff74 	bl	8000d9a <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff ff25 	bl	8000d04 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000eba:	2300      	movs	r3, #0
 8000ebc:	827b      	strh	r3, [r7, #18]
 8000ebe:	e00a      	b.n	8000ed6 <MFRC522_ToCard+0x82>
 8000ec0:	8a7b      	ldrh	r3, [r7, #18]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2009      	movs	r0, #9
 8000ecc:	f7ff ff1a 	bl	8000d04 <MFRC522_WriteRegister>
 8000ed0:	8a7b      	ldrh	r3, [r7, #18]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	827b      	strh	r3, [r7, #18]
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	8a7a      	ldrh	r2, [r7, #18]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d3ef      	bcc.n	8000ec0 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff ff0d 	bl	8000d04 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b0c      	cmp	r3, #12
 8000eee:	d103      	bne.n	8000ef8 <MFRC522_ToCard+0xa4>
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	200d      	movs	r0, #13
 8000ef4:	f7ff ff51 	bl	8000d9a <MFRC522_SetBitMask>


	i = 2000;	//
 8000ef8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000efc:	827b      	strh	r3, [r7, #18]
	do {

		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000efe:	2004      	movs	r0, #4
 8000f00:	f7ff ff18 	bl	8000d34 <MFRC522_ReadRegister>
 8000f04:	4603      	mov	r3, r0
 8000f06:	753b      	strb	r3, [r7, #20]
		i--;
 8000f08:	8a7b      	ldrh	r3, [r7, #18]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000f0e:	8a7b      	ldrh	r3, [r7, #18]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00a      	beq.n	8000f2a <MFRC522_ToCard+0xd6>
 8000f14:	7d3b      	ldrb	r3, [r7, #20]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <MFRC522_ToCard+0xd6>
 8000f1e:	7d3a      	ldrb	r2, [r7, #20]
 8000f20:	7d7b      	ldrb	r3, [r7, #21]
 8000f22:	4013      	ands	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0e9      	beq.n	8000efe <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	200d      	movs	r0, #13
 8000f2e:	f7ff ff4e 	bl	8000dce <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000f32:	8a7b      	ldrh	r3, [r7, #18]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d057      	beq.n	8000fe8 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f7ff fefb 	bl	8000d34 <MFRC522_ReadRegister>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f003 031b 	and.w	r3, r3, #27
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d14d      	bne.n	8000fe4 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000f4c:	7d3a      	ldrb	r2, [r7, #20]
 8000f4e:	7dbb      	ldrb	r3, [r7, #22]
 8000f50:	4013      	ands	r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MFRC522_ToCard+0x10c>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b0c      	cmp	r3, #12
 8000f64:	d140      	bne.n	8000fe8 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f7ff fee4 	bl	8000d34 <MFRC522_ReadRegister>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000f70:	200c      	movs	r0, #12
 8000f72:	f7ff fedf 	bl	8000d34 <MFRC522_ReadRegister>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000f7e:	7c7b      	ldrb	r3, [r7, #17]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <MFRC522_ToCard+0x148>
 8000f84:	7d3b      	ldrb	r3, [r7, #20]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	7c7b      	ldrb	r3, [r7, #17]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	e005      	b.n	8000fa8 <MFRC522_ToCard+0x154>
 8000f9c:	7d3b      	ldrb	r3, [r7, #20]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000fa8:	7d3b      	ldrb	r3, [r7, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <MFRC522_ToCard+0x15e>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000fb2:	7d3b      	ldrb	r3, [r7, #20]
 8000fb4:	2b10      	cmp	r3, #16
 8000fb6:	d901      	bls.n	8000fbc <MFRC522_ToCard+0x168>
 8000fb8:	2310      	movs	r3, #16
 8000fba:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	827b      	strh	r3, [r7, #18]
 8000fc0:	e00a      	b.n	8000fd8 <MFRC522_ToCard+0x184>
 8000fc2:	8a7b      	ldrh	r3, [r7, #18]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	18d4      	adds	r4, r2, r3
 8000fc8:	2009      	movs	r0, #9
 8000fca:	f7ff feb3 	bl	8000d34 <MFRC522_ReadRegister>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	7023      	strb	r3, [r4, #0]
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	827b      	strh	r3, [r7, #18]
 8000fd8:	7d3b      	ldrb	r3, [r7, #20]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	8a7a      	ldrh	r2, [r7, #18]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d3ef      	bcc.n	8000fc2 <MFRC522_ToCard+0x16e>
 8000fe2:	e001      	b.n	8000fe8 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}

08000ff2 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af02      	add	r7, sp, #8
 8000ff8:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000ffe:	2100      	movs	r1, #0
 8001000:	200d      	movs	r0, #13
 8001002:	f7ff fe7f 	bl	8000d04 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2293      	movs	r2, #147	; 0x93
 800100a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	2220      	movs	r2, #32
 8001012:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001014:	f107 030a 	add.w	r3, r7, #10
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2202      	movs	r2, #2
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	200c      	movs	r0, #12
 8001022:	f7ff ff17 	bl	8000e54 <MFRC522_ToCard>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d118      	bne.n	8001062 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001030:	2300      	movs	r3, #0
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	e009      	b.n	800104a <MFRC522_Anticoll+0x58>
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	4053      	eors	r3, r2
 8001042:	737b      	strb	r3, [r7, #13]
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	3301      	adds	r3, #1
 8001048:	73bb      	strb	r3, [r7, #14]
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d9f2      	bls.n	8001036 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	7b7a      	ldrb	r2, [r7, #13]
 800105a:	429a      	cmp	r2, r3
 800105c:	d001      	beq.n	8001062 <MFRC522_Anticoll+0x70>
 800105e:	2302      	movs	r3, #2
 8001060:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	460b      	mov	r3, r1
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800107a:	2104      	movs	r1, #4
 800107c:	2005      	movs	r0, #5
 800107e:	f7ff fea6 	bl	8000dce <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	200a      	movs	r0, #10
 8001086:	f7ff fe88 	bl	8000d9a <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800108a:	2300      	movs	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]
 800108e:	e00a      	b.n	80010a6 <MFRC522_CalculateCRC+0x3a>
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	2009      	movs	r0, #9
 800109c:	f7ff fe32 	bl	8000d04 <MFRC522_WriteRegister>
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	3301      	adds	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
 80010a6:	7dfa      	ldrb	r2, [r7, #23]
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3f0      	bcc.n	8001090 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80010ae:	2103      	movs	r1, #3
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fe27 	bl	8000d04 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80010ba:	2005      	movs	r0, #5
 80010bc:	f7ff fe3a 	bl	8000d34 <MFRC522_ReadRegister>
 80010c0:	4603      	mov	r3, r0
 80010c2:	75bb      	strb	r3, [r7, #22]
		i--;
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <MFRC522_CalculateCRC+0x6e>
 80010d0:	7dbb      	ldrb	r3, [r7, #22]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0ef      	beq.n	80010ba <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80010da:	2022      	movs	r0, #34	; 0x22
 80010dc:	f7ff fe2a 	bl	8000d34 <MFRC522_ReadRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1c5c      	adds	r4, r3, #1
 80010ec:	2021      	movs	r0, #33	; 0x21
 80010ee:	f7ff fe21 	bl	8000d34 <MFRC522_ReadRegister>
 80010f2:	4603      	mov	r3, r0
 80010f4:	7023      	strb	r3, [r4, #0]
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}

080010fe <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001102:	f000 f821 	bl	8001148 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x80);
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	202a      	movs	r0, #42	; 0x2a
 800110a:	f7ff fdfb 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0xA9);
 800110e:	21a9      	movs	r1, #169	; 0xa9
 8001110:	202b      	movs	r0, #43	; 0x2b
 8001112:	f7ff fdf7 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 0xE8);
 8001116:	21e8      	movs	r1, #232	; 0xe8
 8001118:	202d      	movs	r0, #45	; 0x2d
 800111a:	f7ff fdf3 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0x03);
 800111e:	2103      	movs	r1, #3
 8001120:	202c      	movs	r0, #44	; 0x2c
 8001122:	f7ff fdef 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x50);				// 38dB gain
 8001126:	2150      	movs	r1, #80	; 0x50
 8001128:	2026      	movs	r0, #38	; 0x26
 800112a:	f7ff fdeb 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	2015      	movs	r0, #21
 8001132:	f7ff fde7 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001136:	213d      	movs	r1, #61	; 0x3d
 8001138:	2011      	movs	r0, #17
 800113a:	f7ff fde3 	bl	8000d04 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800113e:	f000 f813 	bl	8001168 <MFRC522_AntennaOn>
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC522_RESET_GPIO_Port, RC522_RESET_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2102      	movs	r1, #2
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MFRC522_Reset+0x1c>)
 8001152:	f000 fd2b 	bl	8001bac <HAL_GPIO_WritePin>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001156:	210f      	movs	r1, #15
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fdd3 	bl	8000d04 <MFRC522_WriteRegister>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010c00 	.word	0x40010c00

08001168 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800116e:	2014      	movs	r0, #20
 8001170:	f7ff fde0 	bl	8000d34 <MFRC522_ReadRegister>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
	if ((temp & 0x03)!=0x03) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b03      	cmp	r3, #3
 8001180:	d003      	beq.n	800118a <MFRC522_AntennaOn+0x22>
 8001182:	2103      	movs	r1, #3
 8001184:	2014      	movs	r0, #20
 8001186:	f7ff fe08 	bl	8000d9a <MFRC522_SetBitMask>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001198:	2350      	movs	r3, #80	; 0x50
 800119a:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80011a0:	463b      	mov	r3, r7
 80011a2:	1c9a      	adds	r2, r3, #2
 80011a4:	463b      	mov	r3, r7
 80011a6:	2102      	movs	r1, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5f 	bl	800106c <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80011ae:	463a      	mov	r2, r7
 80011b0:	4639      	mov	r1, r7
 80011b2:	1dbb      	adds	r3, r7, #6
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	2204      	movs	r2, #4
 80011ba:	200c      	movs	r0, #12
 80011bc:	f7ff fe4a 	bl	8000e54 <MFRC522_ToCard>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_MspInit+0x68>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_MspInit+0x68>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6193      	str	r3, [r2, #24]
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_MspInit+0x68>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_MspInit+0x68>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_MspInit+0x68>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_MspInit+0x68>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	210f      	movs	r1, #15
 8001202:	f06f 0001 	mvn.w	r0, #1
 8001206:	f000 fad6 	bl	80017b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_MspInit+0x6c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_MspInit+0x6c>)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000

08001238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d12f      	bne.n	80012b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 800125e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <HAL_SPI_MspInit+0x90>)
 800129c:	f000 fb2c 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_SPI_MspInit+0x90>)
 80012b4:	f000 fb20 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013000 	.word	0x40013000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010800 	.word	0x40010800

080012cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012dc:	d113      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_TIM_Base_MspInit+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_TIM_Base_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_TIM_Base_MspInit+0x44>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2105      	movs	r1, #5
 80012fa:	201c      	movs	r0, #28
 80012fc:	f000 fa5b 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001300:	201c      	movs	r0, #28
 8001302:	f000 fa74 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d139      	bne.n	80013a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 800133a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4619      	mov	r1, r3
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <HAL_UART_MspInit+0xa4>)
 800137a:	f000 fabd 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_UART_MspInit+0xa4>)
 8001394:	f000 fab0 	bl	80018f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2105      	movs	r1, #5
 800139c:	2025      	movs	r0, #37	; 0x25
 800139e:	f000 fa0a 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013a2:	2025      	movs	r0, #37	; 0x25
 80013a4:	f000 fa23 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010800 	.word	0x40010800

080013bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	201e      	movs	r0, #30
 80013d2:	f000 f9f0 	bl	80017b6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80013d6:	201e      	movs	r0, #30
 80013d8:	f000 fa09 	bl	80017ee <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_InitTick+0x9c>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_InitTick+0x9c>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	61d3      	str	r3, [r2, #28]
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_InitTick+0x9c>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f4:	f107 0210 	add.w	r2, r7, #16
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ffea 	bl	80023d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001404:	f000 ffc0 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8001408:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	4a13      	ldr	r2, [pc, #76]	; (800145c <HAL_InitTick+0xa0>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0c9b      	lsrs	r3, r3, #18
 8001414:	3b01      	subs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_InitTick+0xa4>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_InitTick+0xa8>)
 800141c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_InitTick+0xa4>)
 8001420:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001424:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_InitTick+0xa4>)
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_InitTick+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_InitTick+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_InitTick+0xa4>)
 800143a:	f001 faa6 	bl	800298a <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d104      	bne.n	800144e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <HAL_InitTick+0xa4>)
 8001446:	f001 facb 	bl	80029e0 <HAL_TIM_Base_Start_IT>
 800144a:	4603      	mov	r3, r0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3730      	adds	r7, #48	; 0x30
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	431bde83 	.word	0x431bde83
 8001460:	20003fe4 	.word	0x20003fe4
 8001464:	40000800 	.word	0x40000800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <HardFault_Handler+0x4>

0800147a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <BusFault_Handler+0x4>

08001486 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <UsageFault_Handler+0x4>

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
__HAL_TIM_SET_COUNTER(&htim2,0);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <TIM2_IRQHandler+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM2_IRQHandler+0x18>)
 80014a6:	f001 fabe 	bl	8002a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20003fa4 	.word	0x20003fa4

080014b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM4_IRQHandler+0x10>)
 80014ba:	f001 fab4 	bl	8002a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20003fe4 	.word	0x20003fe4

080014c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <USART1_IRQHandler+0x10>)
 80014ce:	f001 ff67 	bl	80033a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20003f04 	.word	0x20003f04

080014dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x50>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x16>
		heap_end = &end;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <_sbrk+0x50>)
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <_sbrk+0x54>)
 80014f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <_sbrk+0x50>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <_sbrk+0x50>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	466a      	mov	r2, sp
 8001502:	4293      	cmp	r3, r2
 8001504:	d907      	bls.n	8001516 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001506:	f003 fdc5 	bl	8005094 <__errno>
 800150a:	4602      	mov	r2, r0
 800150c:	230c      	movs	r3, #12
 800150e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	e006      	b.n	8001524 <_sbrk+0x48>
	}

	heap_end += incr;
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <_sbrk+0x50>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a03      	ldr	r2, [pc, #12]	; (800152c <_sbrk+0x50>)
 8001520:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000300 	.word	0x20000300
 8001530:	20004030 	.word	0x20004030

08001534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <SystemInit+0x5c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <SystemInit+0x5c>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SystemInit+0x5c>)
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4911      	ldr	r1, [pc, #68]	; (8001590 <SystemInit+0x5c>)
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SystemInit+0x60>)
 800154c:	4013      	ands	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <SystemInit+0x5c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <SystemInit+0x5c>)
 8001556:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800155a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <SystemInit+0x5c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SystemInit+0x5c>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SystemInit+0x5c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <SystemInit+0x5c>)
 8001572:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001576:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SystemInit+0x5c>)
 800157a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800157e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SystemInit+0x64>)
 8001582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001586:	609a      	str	r2, [r3, #8]
#endif 
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	f8ff0000 	.word	0xf8ff0000
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800159c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800159e:	e003      	b.n	80015a8 <LoopCopyDataInit>

080015a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015a6:	3104      	adds	r1, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015b0:	d3f6      	bcc.n	80015a0 <CopyDataInit>
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015b4:	e002      	b.n	80015bc <LoopFillZerobss>

080015b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015b8:	f842 3b04 	str.w	r3, [r2], #4

080015bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015c0:	d3f9      	bcc.n	80015b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015c2:	f7ff ffb7 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f003 fd6b 	bl	80050a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ca:	f7fe fec7 	bl	800035c <main>
  bx lr
 80015ce:	4770      	bx	lr
  ldr r3, =_sidata
 80015d0:	08005a64 	.word	0x08005a64
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015d8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80015dc:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80015e0:	2000402c 	.word	0x2000402c

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_Init+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_Init+0x28>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f8d1 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fedc 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fde0 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x1c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x20>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_IncTick+0x20>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	2000000c 	.word	0x2000000c
 8001634:	20004024 	.word	0x20004024

08001638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <HAL_GetTick+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20004024 	.word	0x20004024

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <__NVIC_EnableIRQ+0x34>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff4f 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff64 	bl	8001694 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ffb2 	bl	800173c <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff81 	bl	80016e8 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff57 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800181e:	2b02      	cmp	r3, #2
 8001820:	d005      	beq.n	800182e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2204      	movs	r2, #4
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e051      	b.n	80018d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 020e 	bic.w	r2, r2, #14
 800183c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a22      	ldr	r2, [pc, #136]	; (80018dc <HAL_DMA_Abort_IT+0xd0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d029      	beq.n	80018ac <HAL_DMA_Abort_IT+0xa0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <HAL_DMA_Abort_IT+0xd4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d022      	beq.n	80018a8 <HAL_DMA_Abort_IT+0x9c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_DMA_Abort_IT+0xd8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d01a      	beq.n	80018a2 <HAL_DMA_Abort_IT+0x96>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <HAL_DMA_Abort_IT+0xdc>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d012      	beq.n	800189c <HAL_DMA_Abort_IT+0x90>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_DMA_Abort_IT+0xe0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00a      	beq.n	8001896 <HAL_DMA_Abort_IT+0x8a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <HAL_DMA_Abort_IT+0xe4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d102      	bne.n	8001890 <HAL_DMA_Abort_IT+0x84>
 800188a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800188e:	e00e      	b.n	80018ae <HAL_DMA_Abort_IT+0xa2>
 8001890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001894:	e00b      	b.n	80018ae <HAL_DMA_Abort_IT+0xa2>
 8001896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189a:	e008      	b.n	80018ae <HAL_DMA_Abort_IT+0xa2>
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	e005      	b.n	80018ae <HAL_DMA_Abort_IT+0xa2>
 80018a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a6:	e002      	b.n	80018ae <HAL_DMA_Abort_IT+0xa2>
 80018a8:	2310      	movs	r3, #16
 80018aa:	e000      	b.n	80018ae <HAL_DMA_Abort_IT+0xa2>
 80018ac:	2301      	movs	r3, #1
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_DMA_Abort_IT+0xe8>)
 80018b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
    } 
  }
  return status;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40020008 	.word	0x40020008
 80018e0:	4002001c 	.word	0x4002001c
 80018e4:	40020030 	.word	0x40020030
 80018e8:	40020044 	.word	0x40020044
 80018ec:	40020058 	.word	0x40020058
 80018f0:	4002006c 	.word	0x4002006c
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e127      	b.n	8001b5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800190c:	2201      	movs	r2, #1
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8116 	bne.w	8001b56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b12      	cmp	r3, #18
 8001930:	d034      	beq.n	800199c <HAL_GPIO_Init+0xa4>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d80d      	bhi.n	8001952 <HAL_GPIO_Init+0x5a>
 8001936:	2b02      	cmp	r3, #2
 8001938:	d02b      	beq.n	8001992 <HAL_GPIO_Init+0x9a>
 800193a:	2b02      	cmp	r3, #2
 800193c:	d804      	bhi.n	8001948 <HAL_GPIO_Init+0x50>
 800193e:	2b00      	cmp	r3, #0
 8001940:	d031      	beq.n	80019a6 <HAL_GPIO_Init+0xae>
 8001942:	2b01      	cmp	r3, #1
 8001944:	d01c      	beq.n	8001980 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001946:	e048      	b.n	80019da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001948:	2b03      	cmp	r3, #3
 800194a:	d043      	beq.n	80019d4 <HAL_GPIO_Init+0xdc>
 800194c:	2b11      	cmp	r3, #17
 800194e:	d01b      	beq.n	8001988 <HAL_GPIO_Init+0x90>
          break;
 8001950:	e043      	b.n	80019da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001952:	4a89      	ldr	r2, [pc, #548]	; (8001b78 <HAL_GPIO_Init+0x280>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d026      	beq.n	80019a6 <HAL_GPIO_Init+0xae>
 8001958:	4a87      	ldr	r2, [pc, #540]	; (8001b78 <HAL_GPIO_Init+0x280>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d806      	bhi.n	800196c <HAL_GPIO_Init+0x74>
 800195e:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <HAL_GPIO_Init+0x284>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d020      	beq.n	80019a6 <HAL_GPIO_Init+0xae>
 8001964:	4a86      	ldr	r2, [pc, #536]	; (8001b80 <HAL_GPIO_Init+0x288>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01d      	beq.n	80019a6 <HAL_GPIO_Init+0xae>
          break;
 800196a:	e036      	b.n	80019da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800196c:	4a85      	ldr	r2, [pc, #532]	; (8001b84 <HAL_GPIO_Init+0x28c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d019      	beq.n	80019a6 <HAL_GPIO_Init+0xae>
 8001972:	4a85      	ldr	r2, [pc, #532]	; (8001b88 <HAL_GPIO_Init+0x290>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d016      	beq.n	80019a6 <HAL_GPIO_Init+0xae>
 8001978:	4a84      	ldr	r2, [pc, #528]	; (8001b8c <HAL_GPIO_Init+0x294>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0xae>
          break;
 800197e:	e02c      	b.n	80019da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e028      	b.n	80019da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	3304      	adds	r3, #4
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e023      	b.n	80019da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	3308      	adds	r3, #8
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e01e      	b.n	80019da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	330c      	adds	r3, #12
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e019      	b.n	80019da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ae:	2304      	movs	r3, #4
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e012      	b.n	80019da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019bc:	2308      	movs	r3, #8
 80019be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	611a      	str	r2, [r3, #16]
          break;
 80019c6:	e008      	b.n	80019da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c8:	2308      	movs	r3, #8
 80019ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	615a      	str	r2, [r3, #20]
          break;
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2bff      	cmp	r3, #255	; 0xff
 80019de:	d801      	bhi.n	80019e4 <HAL_GPIO_Init+0xec>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	e001      	b.n	80019e8 <HAL_GPIO_Init+0xf0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3304      	adds	r3, #4
 80019e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2bff      	cmp	r3, #255	; 0xff
 80019ee:	d802      	bhi.n	80019f6 <HAL_GPIO_Init+0xfe>
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	e002      	b.n	80019fc <HAL_GPIO_Init+0x104>
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	3b08      	subs	r3, #8
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	210f      	movs	r1, #15
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	6a39      	ldr	r1, [r7, #32]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8096 	beq.w	8001b56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a2a:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_GPIO_Init+0x298>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_GPIO_Init+0x298>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <HAL_GPIO_Init+0x298>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a42:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_GPIO_Init+0x29c>)
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x19e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4a      	ldr	r2, [pc, #296]	; (8001b9c <HAL_GPIO_Init+0x2a4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x19a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x2a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x196>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2ac>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x192>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x1a0>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x1a0>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x1a0>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x1a0>
 8001a96:	2300      	movs	r3, #0
 8001a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aa8:	493a      	ldr	r1, [pc, #232]	; (8001b94 <HAL_GPIO_Init+0x29c>)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac2:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4938      	ldr	r1, [pc, #224]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
 8001ace:	e006      	b.n	8001ade <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b35      	ldr	r3, [pc, #212]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	4933      	ldr	r1, [pc, #204]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	492e      	ldr	r1, [pc, #184]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
 8001af6:	e006      	b.n	8001b06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4929      	ldr	r1, [pc, #164]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	4924      	ldr	r1, [pc, #144]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	491f      	ldr	r1, [pc, #124]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d006      	beq.n	8001b48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	491a      	ldr	r1, [pc, #104]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60cb      	str	r3, [r1, #12]
 8001b46:	e006      	b.n	8001b56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4915      	ldr	r1, [pc, #84]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	3301      	adds	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f47f aed0 	bne.w	800190c <HAL_GPIO_Init+0x14>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	372c      	adds	r7, #44	; 0x2c
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	10210000 	.word	0x10210000
 8001b7c:	10110000 	.word	0x10110000
 8001b80:	10120000 	.word	0x10120000
 8001b84:	10310000 	.word	0x10310000
 8001b88:	10320000 	.word	0x10320000
 8001b8c:	10220000 	.word	0x10220000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	40011400 	.word	0x40011400
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e26c      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8087 	beq.w	8001d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d00c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c08:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d112      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5e>
 8001c14:	4b8c      	ldr	r3, [pc, #560]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d10b      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c22:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d06c      	beq.n	8001d08 <HAL_RCC_OscConfig+0x12c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d168      	bne.n	8001d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e246      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x76>
 8001c44:	4b80      	ldr	r3, [pc, #512]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7f      	ldr	r2, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e02e      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x98>
 8001c5a:	4b7b      	ldr	r3, [pc, #492]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a7a      	ldr	r2, [pc, #488]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b78      	ldr	r3, [pc, #480]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a77      	ldr	r2, [pc, #476]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0xbc>
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a71      	ldr	r2, [pc, #452]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c98:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a6a      	ldr	r2, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a67      	ldr	r2, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fcbe 	bl	8001638 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fcba 	bl	8001638 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1fa      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe4>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fcaa 	bl	8001638 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fca6 	bl	8001638 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1e6      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x10c>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x18c>
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x176>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1ba      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4939      	ldr	r1, [pc, #228]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fc5f 	bl	8001638 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fc5b 	bl	8001638 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e19b      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4927      	ldr	r1, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fc3e 	bl	8001638 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fc3a 	bl	8001638 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e17a      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03a      	beq.n	8001e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d019      	beq.n	8001e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff fc1e 	bl	8001638 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fc1a 	bl	8001638 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e15a      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f000 fb0a 	bl	8002438 <RCC_Delay>
 8001e24:	e01c      	b.n	8001e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fc04 	bl	8001638 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e32:	e00f      	b.n	8001e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff fc00 	bl	8001638 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d908      	bls.n	8001e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e140      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	42420000 	.word	0x42420000
 8001e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b9e      	ldr	r3, [pc, #632]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e9      	bne.n	8001e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a6 	beq.w	8001fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b97      	ldr	r3, [pc, #604]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a93      	ldr	r2, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a8a      	ldr	r2, [pc, #552]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fbc1 	bl	8001638 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff fbbd 	bl	8001638 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	; 0x64
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0fd      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x312>
 8001ee0:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e02d      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x334>
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a72      	ldr	r2, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	e01c      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x356>
 8001f18:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a6c      	ldr	r2, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a69      	ldr	r2, [pc, #420]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e00b      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001f32:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d015      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb71 	bl	8001638 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb6d 	bl	8001638 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0ab      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ee      	beq.n	8001f5a <HAL_RCC_OscConfig+0x37e>
 8001f7c:	e014      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb5b 	bl	8001638 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fb57 	bl	8001638 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e095      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9c:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ee      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8081 	beq.w	80020c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc4:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d061      	beq.n	8002094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d146      	bne.n	8002066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fb2b 	bl	8001638 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff fb27 	bl	8001638 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e067      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff8:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d108      	bne.n	8002020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	492d      	ldr	r1, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a19      	ldr	r1, [r3, #32]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	430b      	orrs	r3, r1
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff fafb 	bl	8001638 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff faf7 	bl	8001638 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e037      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x46a>
 8002064:	e02f      	b.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fae4 	bl	8001638 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff fae0 	bl	8001638 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e020      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x498>
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e013      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42420060 	.word	0x42420060

080020dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d0      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4965      	ldr	r1, [pc, #404]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002142:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800215a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d040      	beq.n	80021fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e073      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06b      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4936      	ldr	r1, [pc, #216]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021cc:	f7ff fa34 	bl	8001638 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7ff fa30 	bl	8001638 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e053      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1eb      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d210      	bcs.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4922      	ldr	r1, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4601      	mov	r1, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	fa21 f303 	lsr.w	r3, r1, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f896 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08005a10 	.word	0x08005a10
 80022a8:	20000004 	.word	0x20000004
 80022ac:	20000008 	.word	0x20000008

080022b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b490      	push	{r4, r7}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022b8:	1d3c      	adds	r4, r7, #4
 80022ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x40>
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x46>
 80022ee:	e02d      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022f2:	623b      	str	r3, [r7, #32]
      break;
 80022f4:	e02d      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002302:	4413      	add	r3, r2
 8002304:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002308:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0c5b      	lsrs	r3, r3, #17
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002322:	4413      	add	r3, r2
 8002324:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002328:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_RCC_GetSysClockFreq+0xbc>)
 800232e:	fb02 f203 	mul.w	r2, r2, r3
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	e004      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	623b      	str	r3, [r7, #32]
      break;
 800234a:	e002      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_RCC_GetSysClockFreq+0xbc>)
 800234e:	623b      	str	r3, [r7, #32]
      break;
 8002350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002352:	6a3b      	ldr	r3, [r7, #32]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bc90      	pop	{r4, r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	080059f4 	.word	0x080059f4
 8002364:	08005a04 	.word	0x08005a04
 8002368:	40021000 	.word	0x40021000
 800236c:	007a1200 	.word	0x007a1200
 8002370:	003d0900 	.word	0x003d0900

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_RCC_GetHCLKFreq+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000004 	.word	0x20000004

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800238c:	f7ff fff2 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002390:	4601      	mov	r1, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4a03      	ldr	r2, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08005a20 	.word	0x08005a20

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b4:	f7ff ffde 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023b8:	4601      	mov	r1, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0adb      	lsrs	r3, r3, #11
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4a03      	ldr	r2, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c6:	5cd3      	ldrb	r3, [r2, r3]
 80023c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08005a20 	.word	0x08005a20

080023d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	220f      	movs	r2, #15
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_RCC_GetClockConfig+0x58>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_RCC_GetClockConfig+0x58>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_GetClockConfig+0x58>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCC_GetClockConfig+0x58>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0207 	and.w	r2, r3, #7
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40021000 	.word	0x40021000
 8002434:	40022000 	.word	0x40022000

08002438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <RCC_Delay+0x34>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <RCC_Delay+0x38>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a5b      	lsrs	r3, r3, #9
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002454:	bf00      	nop
  }
  while (Delay --);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <RCC_Delay+0x1c>
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000004 	.word	0x20000004
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e053      	b.n	800252e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7fe fec9 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	ea42 0103 	orr.w	r1, r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	0c1a      	lsrs	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 0204 	and.w	r2, r2, #4
 800250c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b08c      	sub	sp, #48	; 0x30
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_SPI_TransmitReceive+0x26>
 8002558:	2302      	movs	r3, #2
 800255a:	e18a      	b.n	8002872 <HAL_SPI_TransmitReceive+0x33c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002564:	f7ff f868 	bl	8001638 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800257e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002582:	2b01      	cmp	r3, #1
 8002584:	d00f      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x70>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800258c:	d107      	bne.n	800259e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_SPI_TransmitReceive+0x68>
 8002596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800259a:	2b04      	cmp	r3, #4
 800259c:	d003      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025a4:	e15b      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x82>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x82>
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025be:	e14e      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d003      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2205      	movs	r2, #5
 80025d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	887a      	ldrh	r2, [r7, #2]
 80025f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d007      	beq.n	8002628 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002630:	d178      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x10a>
 800263a:	8b7b      	ldrh	r3, [r7, #26]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d166      	bne.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002664:	e053      	b.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	d11b      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x176>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x176>
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d113      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	881a      	ldrh	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	1c9a      	adds	r2, r3, #2
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d119      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x1b8>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	b292      	uxth	r2, r2
 80026d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	1c9a      	adds	r2, r3, #2
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ea:	2301      	movs	r3, #1
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026ee:	f7fe ffa3 	bl	8001638 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d807      	bhi.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d003      	beq.n	800270e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800270c:	e0a7      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1a6      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x130>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1a1      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x130>
 8002722:	e07c      	b.n	800281e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x1fc>
 800272c:	8b7b      	ldrh	r3, [r7, #26]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d16b      	bne.n	800280a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002758:	e057      	b.n	800280a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11c      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x26c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d017      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x26c>
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d114      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d119      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x2ae>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027e4:	f7fe ff28 	bl	8001638 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d803      	bhi.n	80027fc <HAL_SPI_TransmitReceive+0x2c6>
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d102      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x2cc>
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002808:	e029      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1a2      	bne.n	800275a <HAL_SPI_TransmitReceive+0x224>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d19d      	bne.n	800275a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f893 	bl	800294e <SPI_EndRxTxTransaction>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800283a:	e010      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	e000      	b.n	800285e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800285c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800286e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002872:	4618      	mov	r0, r3
 8002874:	3730      	adds	r7, #48	; 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288a:	e04c      	b.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d048      	beq.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002894:	f7fe fed0 	bl	8001638 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d902      	bls.n	80028aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d13d      	bne.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c2:	d111      	bne.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028cc:	d004      	beq.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d6:	d107      	bne.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d10f      	bne.n	8002912 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e00f      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d1a3      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af02      	add	r7, sp, #8
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ff88 	bl	800287a <SPI_WaitFlagStateUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e000      	b.n	8002982 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e01d      	b.n	80029d8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fe fc8b 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f000 fa0f 	bl	8002dec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d007      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d122      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d11b      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0202 	mvn.w	r2, #2
 8002a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f9a4 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002a6e:	e005      	b.n	8002a7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f997 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9a6 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d122      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d11b      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0204 	mvn.w	r2, #4
 8002aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f97a 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002ac2:	e005      	b.n	8002ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f96d 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f97c 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d122      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f06f 0208 	mvn.w	r2, #8
 8002afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2204      	movs	r2, #4
 8002b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f950 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002b16:	e005      	b.n	8002b24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f943 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f952 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d122      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d11b      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0210 	mvn.w	r2, #16
 8002b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2208      	movs	r2, #8
 8002b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f926 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002b6a:	e005      	b.n	8002b78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f919 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f928 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0201 	mvn.w	r2, #1
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fe f83d 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fa50 	bl	8003076 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d10e      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d107      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8ec 	bl	8002dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d10e      	bne.n	8002c2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d107      	bne.n	8002c2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0220 	mvn.w	r2, #32
 8002c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fa1b 	bl	8003064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_ConfigClockSource+0x18>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0a6      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x166>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c74:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d067      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x120>
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d80b      	bhi.n	8002ca2 <HAL_TIM_ConfigClockSource+0x6c>
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d073      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x140>
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d802      	bhi.n	8002c98 <HAL_TIM_ConfigClockSource+0x62>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06f      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c96:	e078      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d06c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x140>
 8002c9c:	2b30      	cmp	r3, #48	; 0x30
 8002c9e:	d06a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ca0:	e073      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ca2:	2b70      	cmp	r3, #112	; 0x70
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x8c>
 8002ca6:	2b70      	cmp	r3, #112	; 0x70
 8002ca8:	d804      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x7e>
 8002caa:	2b50      	cmp	r3, #80	; 0x50
 8002cac:	d033      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xe0>
 8002cae:	2b60      	cmp	r3, #96	; 0x60
 8002cb0:	d041      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cb2:	e06a      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb8:	d066      	beq.n	8002d88 <HAL_TIM_ConfigClockSource+0x152>
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbe:	d017      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cc0:	e063      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f000 f964 	bl	8002f9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04c      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f000 f94d 	bl	8002f9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e039      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8c4 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f91b 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d34:	e029      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8e2 	bl	8002f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f90b 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d54:	e019      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8a4 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f8fb 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d74:	e009      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f8f2 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d86:	e000      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <TIM_Base_SetConfig+0xbc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a25      	ldr	r2, [pc, #148]	; (8002eac <TIM_Base_SetConfig+0xc0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d007      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <TIM_Base_SetConfig+0xbc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d003      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <TIM_Base_SetConfig+0xc0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d108      	bne.n	8002e60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	615a      	str	r2, [r3, #20]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0201 	bic.w	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f023 030a 	bic.w	r3, r3, #10
 8002eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 0210 	bic.w	r2, r3, #16
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f043 0307 	orr.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	021a      	lsls	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	609a      	str	r2, [r3, #8]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e032      	b.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e03f      	b.n	800311a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe f930 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fbe7 	bl	80038a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af02      	add	r7, sp, #8
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	f040 8083 	bne.w	800324a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_UART_Transmit+0x2e>
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e07b      	b.n	800324c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_UART_Transmit+0x40>
 800315e:	2302      	movs	r3, #2
 8003160:	e074      	b.n	800324c <HAL_UART_Transmit+0x12a>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2221      	movs	r2, #33	; 0x21
 8003174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003178:	f7fe fa5e 	bl	8001638 <HAL_GetTick>
 800317c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800318a:	e042      	b.n	8003212 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	d122      	bne.n	80031ea <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa0d 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e046      	b.n	800324c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3302      	adds	r3, #2
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	e017      	b.n	8003212 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3301      	adds	r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	e013      	b.n	8003212 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f9ea 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e023      	b.n	800324c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	60ba      	str	r2, [r7, #8]
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1b7      	bne.n	800318c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2200      	movs	r2, #0
 8003224:	2140      	movs	r1, #64	; 0x40
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f9d1 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e00a      	b.n	800324c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
  }
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	f040 8090 	bne.w	8003396 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_UART_Receive+0x2e>
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e088      	b.n	8003398 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_UART_Receive+0x40>
 8003290:	2302      	movs	r3, #2
 8003292:	e081      	b.n	8003398 <HAL_UART_Receive+0x144>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2222      	movs	r2, #34	; 0x22
 80032a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032aa:	f7fe f9c5 	bl	8001638 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032bc:	e05c      	b.n	8003378 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d12b      	bne.n	800332e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	2120      	movs	r1, #32
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f974 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e053      	b.n	8003398 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10c      	bne.n	8003316 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003308:	b29a      	uxth	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3302      	adds	r3, #2
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	e030      	b.n	8003378 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	b29b      	uxth	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	b29a      	uxth	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3301      	adds	r3, #1
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	e024      	b.n	8003378 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	2120      	movs	r1, #32
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f948 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e027      	b.n	8003398 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d108      	bne.n	8003362 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	60ba      	str	r2, [r7, #8]
 800335c:	b2ca      	uxtb	r2, r1
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e00a      	b.n	8003378 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d19d      	bne.n	80032be <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_UART_IRQHandler+0x52>
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f9d7 	bl	800379e <UART_Receive_IT>
      return;
 80033f0:	e0cc      	b.n	800358c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80ab 	beq.w	8003550 <HAL_UART_IRQHandler+0x1b0>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_UART_IRQHandler+0x70>
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a0 	beq.w	8003550 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_UART_IRQHandler+0x90>
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_UART_IRQHandler+0xb0>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	f043 0202 	orr.w	r2, r3, #2
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_UART_IRQHandler+0xd0>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_UART_IRQHandler+0xf0>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	f043 0208 	orr.w	r2, r3, #8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d078      	beq.n	800358a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_UART_IRQHandler+0x112>
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f976 	bl	800379e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_UART_IRQHandler+0x13a>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d031      	beq.n	800353e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8c1 	bl	8003662 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d023      	beq.n	8003536 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	2b00      	cmp	r3, #0
 8003504:	d013      	beq.n	800352e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_UART_IRQHandler+0x1f4>)
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe f97a 	bl	800180c <HAL_DMA_Abort_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003528:	4610      	mov	r0, r2
 800352a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	e00e      	b.n	800354c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f844 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	e00a      	b.n	800354c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f840 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	e006      	b.n	800354c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f83c 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800354a:	e01e      	b.n	800358a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	bf00      	nop
    return;
 800354e:	e01c      	b.n	800358a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_UART_IRQHandler+0x1cc>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8ad 	bl	80036c4 <UART_Transmit_IT>
    return;
 800356a:	e00f      	b.n	800358c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_UART_IRQHandler+0x1ec>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8f4 	bl	800376e <UART_EndTransmit_IT>
    return;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_UART_IRQHandler+0x1ec>
    return;
 800358a:	bf00      	nop
  }
}
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	0800369d 	.word	0x0800369d

08003598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e02c      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d028      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0x30>
 80035ee:	f7fe f823 	bl	8001638 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d21d      	bcs.n	800363a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800360c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e00f      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	429a      	cmp	r2, r3
 8003656:	d0c3      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003678:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ff80 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b21      	cmp	r3, #33	; 0x21
 80036d6:	d144      	bne.n	8003762 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e0:	d11a      	bne.n	8003718 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	621a      	str	r2, [r3, #32]
 800370a:	e00e      	b.n	800372a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]
 8003716:	e008      	b.n	800372a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6211      	str	r1, [r2, #32]
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4619      	mov	r1, r3
 8003738:	84d1      	strh	r1, [r2, #38]	; 0x26
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003784:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ff02 	bl	8003598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b22      	cmp	r3, #34	; 0x22
 80037b0:	d171      	bne.n	8003896 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d123      	bne.n	8003804 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10e      	bne.n	80037e8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
 80037e6:	e029      	b.n	800383c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
 8003802:	e01b      	b.n	800383c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6858      	ldr	r0, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	1c59      	adds	r1, r3, #1
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6291      	str	r1, [r2, #40]	; 0x28
 800381c:	b2c2      	uxtb	r2, r0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e00c      	b.n	800383c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	1c58      	adds	r0, r3, #1
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	6288      	str	r0, [r1, #40]	; 0x28
 8003834:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4619      	mov	r1, r3
 800384a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800384c:	2b00      	cmp	r3, #0
 800384e:	d120      	bne.n	8003892 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0220 	bic.w	r2, r2, #32
 800385e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fe8e 	bl	80035aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e002      	b.n	8003898 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038da:	f023 030c 	bic.w	r3, r3, #12
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	68f9      	ldr	r1, [r7, #12]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a52      	ldr	r2, [pc, #328]	; (8003a4c <UART_SetConfig+0x1ac>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d14e      	bne.n	80039a6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe fd52 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 800390c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009a      	lsls	r2, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <UART_SetConfig+0x1b0>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	0119      	lsls	r1, r3, #4
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f2f3 	udiv	r2, r2, r3
 8003944:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <UART_SetConfig+0x1b0>)
 8003946:	fba3 0302 	umull	r0, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2064      	movs	r0, #100	; 0x64
 800394e:	fb00 f303 	mul.w	r3, r0, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <UART_SetConfig+0x1b0>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	4419      	add	r1, r3
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f2f3 	udiv	r2, r2, r3
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <UART_SetConfig+0x1b0>)
 800397e:	fba3 0302 	umull	r0, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2064      	movs	r0, #100	; 0x64
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	3332      	adds	r3, #50	; 0x32
 8003990:	4a2f      	ldr	r2, [pc, #188]	; (8003a50 <UART_SetConfig+0x1b0>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	440a      	add	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039a4:	e04d      	b.n	8003a42 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039a6:	f7fe fcef 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 80039aa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	009a      	lsls	r2, r3, #2
 80039b6:	441a      	add	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <UART_SetConfig+0x1b0>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	0119      	lsls	r1, r3, #4
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009a      	lsls	r2, r3, #2
 80039d6:	441a      	add	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <UART_SetConfig+0x1b0>)
 80039e4:	fba3 0302 	umull	r0, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	2064      	movs	r0, #100	; 0x64
 80039ec:	fb00 f303 	mul.w	r3, r0, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	3332      	adds	r3, #50	; 0x32
 80039f6:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <UART_SetConfig+0x1b0>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a02:	4419      	add	r1, r3
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009a      	lsls	r2, r3, #2
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <UART_SetConfig+0x1b0>)
 8003a1c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	2064      	movs	r0, #100	; 0x64
 8003a24:	fb00 f303 	mul.w	r3, r0, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	3332      	adds	r3, #50	; 0x32
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <UART_SetConfig+0x1b0>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	440a      	add	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	51eb851f 	.word	0x51eb851f

08003a54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a66:	2b84      	cmp	r3, #132	; 0x84
 8003a68:	d005      	beq.n	8003a76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	3303      	adds	r3, #3
 8003a74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a86:	f000 fc07 	bl	8004298 <vTaskStartScheduler>
  
  return osOK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d020      	beq.n	8003ae4 <osThreadCreate+0x54>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01c      	beq.n	8003ae4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685c      	ldr	r4, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681d      	ldr	r5, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691e      	ldr	r6, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ffc9 	bl	8003a54 <makeFreeRtosPriority>
 8003ac2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003acc:	9202      	str	r2, [sp, #8]
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	9100      	str	r1, [sp, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 f8e8 	bl	8003cae <xTaskCreateStatic>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e01c      	b.n	8003b1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685c      	ldr	r4, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af0:	b29e      	uxth	r6, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ffab 	bl	8003a54 <makeFreeRtosPriority>
 8003afe:	4602      	mov	r2, r0
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	9200      	str	r2, [sp, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4632      	mov	r2, r6
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f000 f926 	bl	8003d60 <xTaskCreate>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <osDelay+0x16>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	e000      	b.n	8003b40 <osDelay+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fa4d 	bl	8003fe0 <vTaskDelay>
  
  return osOK;
 8003b46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d103      	bne.n	8003c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e00c      	b.n	8003c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e002      	b.n	8003c1a <vListInsert+0x2e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d2f6      	bcs.n	8003c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d103      	bne.n	8003c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08e      	sub	sp, #56	; 0x38
 8003cb2:	af04      	add	r7, sp, #16
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	e7fe      	b.n	8003cd4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <xTaskCreateStatic+0x42>
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e7fe      	b.n	8003cee <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cf0:	2364      	movs	r3, #100	; 0x64
 8003cf2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d009      	beq.n	8003d0e <xTaskCreateStatic+0x60>
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e7fe      	b.n	8003d0c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01e      	beq.n	8003d52 <xTaskCreateStatic+0xa4>
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01b      	beq.n	8003d52 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	9302      	str	r3, [sp, #8]
 8003d34:	f107 0314 	add.w	r3, r7, #20
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f850 	bl	8003dea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d4c:	f000 f8da 	bl	8003f04 <prvAddNewTaskToReadyList>
 8003d50:	e001      	b.n	8003d56 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d56:	697b      	ldr	r3, [r7, #20]
	}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af04      	add	r7, sp, #16
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 ffb9 	bl	8004cec <pvPortMalloc>
 8003d7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d82:	2064      	movs	r0, #100	; 0x64
 8003d84:	f000 ffb2 	bl	8004cec <pvPortMalloc>
 8003d88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
 8003d96:	e005      	b.n	8003da4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	f001 f869 	bl	8004e70 <vPortFree>
 8003d9e:	e001      	b.n	8003da4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	2300      	movs	r3, #0
 8003db6:	9303      	str	r3, [sp, #12]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	9302      	str	r3, [sp, #8]
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f80e 	bl	8003dea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dce:	69f8      	ldr	r0, [r7, #28]
 8003dd0:	f000 f898 	bl	8003f04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e002      	b.n	8003de0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003de0:	69bb      	ldr	r3, [r7, #24]
	}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b088      	sub	sp, #32
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	461a      	mov	r2, r3
 8003e02:	21a5      	movs	r1, #165	; 0xa5
 8003e04:	f001 f97b 	bl	80050fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e12:	3b01      	subs	r3, #1
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f023 0307 	bic.w	r3, r3, #7
 8003e20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <prvInitialiseNewTask+0x56>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e7fe      	b.n	8003e3e <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e012      	b.n	8003e72 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	7819      	ldrb	r1, [r3, #0]
 8003e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	3334      	adds	r3, #52	; 0x34
 8003e5c:	460a      	mov	r2, r1
 8003e5e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d9e9      	bls.n	8003e4c <prvInitialiseNewTask+0x62>
 8003e78:	e000      	b.n	8003e7c <prvInitialiseNewTask+0x92>
		{
			break;
 8003e7a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d901      	bls.n	8003e8e <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e8a:	2306      	movs	r3, #6
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e98:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fe72 	bl	8003b8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	3318      	adds	r3, #24
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fe6d 	bl	8003b8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	f1c3 0207 	rsb	r2, r3, #7
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	2200      	movs	r2, #0
 8003ece:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	68f9      	ldr	r1, [r7, #12]
 8003ee2:	69b8      	ldr	r0, [r7, #24]
 8003ee4:	f000 fd5e 	bl	80049a4 <pxPortInitialiseStack>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003efa:	bf00      	nop
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f0c:	f000 fe34 	bl	8004b78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <prvAddNewTaskToReadyList+0xc0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a2b      	ldr	r2, [pc, #172]	; (8003fc4 <prvAddNewTaskToReadyList+0xc0>)
 8003f18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <prvAddNewTaskToReadyList+0xc4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <prvAddNewTaskToReadyList+0xc4>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f28:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <prvAddNewTaskToReadyList+0xc0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d110      	bne.n	8003f52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f30:	f000 fc14 	bl	800475c <prvInitialiseTaskLists>
 8003f34:	e00d      	b.n	8003f52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f36:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <prvAddNewTaskToReadyList+0xc8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <prvAddNewTaskToReadyList+0xc4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d802      	bhi.n	8003f52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <prvAddNewTaskToReadyList+0xc4>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f52:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <prvAddNewTaskToReadyList+0xcc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <prvAddNewTaskToReadyList+0xcc>)
 8003f5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <prvAddNewTaskToReadyList+0xcc>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	2201      	movs	r2, #1
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <prvAddNewTaskToReadyList+0xd0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <prvAddNewTaskToReadyList+0xd0>)
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <prvAddNewTaskToReadyList+0xd4>)
 8003f84:	441a      	add	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7ff fe0a 	bl	8003ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f92:	f000 fe1f 	bl	8004bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <prvAddNewTaskToReadyList+0xc8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00e      	beq.n	8003fbc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <prvAddNewTaskToReadyList+0xc4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d207      	bcs.n	8003fbc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <prvAddNewTaskToReadyList+0xd8>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000404 	.word	0x20000404
 8003fc8:	20000304 	.word	0x20000304
 8003fcc:	20000410 	.word	0x20000410
 8003fd0:	20000420 	.word	0x20000420
 8003fd4:	2000040c 	.word	0x2000040c
 8003fd8:	20000308 	.word	0x20000308
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <vTaskDelay+0x60>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <vTaskDelay+0x2e>
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	e7fe      	b.n	800400c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800400e:	f000 f9a3 	bl	8004358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004012:	2100      	movs	r1, #0
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fc5f 	bl	80048d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800401a:	f000 f9ab 	bl	8004374 <xTaskResumeAll>
 800401e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <vTaskDelay+0x64>)
 8004028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	2000042c 	.word	0x2000042c
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004050:	f000 fd92 	bl	8004b78 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <vTaskSuspend+0x18>
 800405a:	4b3c      	ldr	r3, [pc, #240]	; (800414c <vTaskSuspend+0x104>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	e000      	b.n	8004062 <vTaskSuspend+0x1a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3304      	adds	r3, #4
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fdf7 	bl	8003c5c <uxListRemove>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d115      	bne.n	80040a0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4935      	ldr	r1, [pc, #212]	; (8004150 <vTaskSuspend+0x108>)
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <vTaskSuspend+0x58>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43da      	mvns	r2, r3
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <vTaskSuspend+0x10c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4013      	ands	r3, r2
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <vTaskSuspend+0x10c>)
 800409e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3318      	adds	r3, #24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fdd5 	bl	8003c5c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4619      	mov	r1, r3
 80040b8:	4827      	ldr	r0, [pc, #156]	; (8004158 <vTaskSuspend+0x110>)
 80040ba:	f7ff fd74 	bl	8003ba6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d103      	bne.n	80040d2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80040d2:	f000 fd7f 	bl	8004bd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <vTaskSuspend+0x114>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80040de:	f000 fd4b 	bl	8004b78 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80040e2:	f000 fbd5 	bl	8004890 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80040e6:	f000 fd75 	bl	8004bd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <vTaskSuspend+0x104>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d126      	bne.n	8004142 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <vTaskSuspend+0x114>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d016      	beq.n	800412a <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80040fc:	4b18      	ldr	r3, [pc, #96]	; (8004160 <vTaskSuspend+0x118>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d009      	beq.n	8004118 <vTaskSuspend+0xd0>
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	e7fe      	b.n	8004116 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <vTaskSuspend+0x11c>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004128:	e00b      	b.n	8004142 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <vTaskSuspend+0x110>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <vTaskSuspend+0x120>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d103      	bne.n	800413e <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <vTaskSuspend+0x104>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
	}
 800413c:	e001      	b.n	8004142 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800413e:	f000 fa7f 	bl	8004640 <vTaskSwitchContext>
	}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000304 	.word	0x20000304
 8004150:	20000308 	.word	0x20000308
 8004154:	2000040c 	.word	0x2000040c
 8004158:	200003f0 	.word	0x200003f0
 800415c:	20000410 	.word	0x20000410
 8004160:	2000042c 	.word	0x2000042c
 8004164:	e000ed04 	.word	0xe000ed04
 8004168:	20000404 	.word	0x20000404

0800416c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvTaskIsTaskSuspended+0x2a>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e7fe      	b.n	8004194 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	4a0f      	ldr	r2, [pc, #60]	; (80041d8 <prvTaskIsTaskSuspended+0x6c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <prvTaskIsTaskSuspended+0x38>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <prvTaskIsTaskSuspended+0x3a>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00f      	beq.n	80041ca <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	4a0b      	ldr	r2, [pc, #44]	; (80041dc <prvTaskIsTaskSuspended+0x70>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00a      	beq.n	80041ca <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <prvTaskIsTaskSuspended+0x54>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <prvTaskIsTaskSuspended+0x56>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041ca:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	200003f0 	.word	0x200003f0
 80041dc:	200003c4 	.word	0x200003c4

080041e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <vTaskResume+0x26>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	e7fe      	b.n	8004204 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d039      	beq.n	8004280 <vTaskResume+0xa0>
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <vTaskResume+0xa8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	429a      	cmp	r2, r3
 8004214:	d034      	beq.n	8004280 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8004216:	f000 fcaf 	bl	8004b78 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff ffa6 	bl	800416c <prvTaskIsTaskSuspended>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02a      	beq.n	800427c <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fd16 	bl	8003c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	2201      	movs	r2, #1
 8004236:	409a      	lsls	r2, r3
 8004238:	4b14      	ldr	r3, [pc, #80]	; (800428c <vTaskResume+0xac>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4313      	orrs	r3, r2
 800423e:	4a13      	ldr	r2, [pc, #76]	; (800428c <vTaskResume+0xac>)
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4a10      	ldr	r2, [pc, #64]	; (8004290 <vTaskResume+0xb0>)
 8004250:	441a      	add	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f7ff fca4 	bl	8003ba6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <vTaskResume+0xa8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	429a      	cmp	r2, r3
 800426a:	d307      	bcc.n	800427c <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <vTaskResume+0xb4>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800427c:	f000 fcaa 	bl	8004bd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000304 	.word	0x20000304
 800428c:	2000040c 	.word	0x2000040c
 8004290:	20000308 	.word	0x20000308
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042a6:	463a      	mov	r2, r7
 80042a8:	1d39      	adds	r1, r7, #4
 80042aa:	f107 0308 	add.w	r3, r7, #8
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fb ff64 	bl	800017c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042b4:	6839      	ldr	r1, [r7, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	9202      	str	r2, [sp, #8]
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	2300      	movs	r3, #0
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	2300      	movs	r3, #0
 80042c4:	460a      	mov	r2, r1
 80042c6:	491e      	ldr	r1, [pc, #120]	; (8004340 <vTaskStartScheduler+0xa8>)
 80042c8:	481e      	ldr	r0, [pc, #120]	; (8004344 <vTaskStartScheduler+0xac>)
 80042ca:	f7ff fcf0 	bl	8003cae <xTaskCreateStatic>
 80042ce:	4602      	mov	r2, r0
 80042d0:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <vTaskStartScheduler+0xb0>)
 80042d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042d4:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <vTaskStartScheduler+0xb0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042dc:	2301      	movs	r3, #1
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e001      	b.n	80042e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d117      	bne.n	800431c <vTaskStartScheduler+0x84>
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <vTaskStartScheduler+0xb4>)
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <vTaskStartScheduler+0xb8>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800430c:	4b11      	ldr	r3, [pc, #68]	; (8004354 <vTaskStartScheduler+0xbc>)
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004312:	f7fb ff25 	bl	8000160 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004316:	f000 fbbf 	bl	8004a98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800431a:	e00d      	b.n	8004338 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d109      	bne.n	8004338 <vTaskStartScheduler+0xa0>
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	e7fe      	b.n	8004336 <vTaskStartScheduler+0x9e>
}
 8004338:	bf00      	nop
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	08005a08 	.word	0x08005a08
 8004344:	0800472d 	.word	0x0800472d
 8004348:	20000428 	.word	0x20000428
 800434c:	20000424 	.word	0x20000424
 8004350:	20000410 	.word	0x20000410
 8004354:	20000408 	.word	0x20000408

08004358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <vTaskSuspendAll+0x18>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a03      	ldr	r2, [pc, #12]	; (8004370 <vTaskSuspendAll+0x18>)
 8004364:	6013      	str	r3, [r2, #0]
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	2000042c 	.word	0x2000042c

08004374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <xTaskResumeAll+0x114>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <xTaskResumeAll+0x2a>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	e7fe      	b.n	800439c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800439e:	f000 fbeb 	bl	8004b78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043a2:	4b39      	ldr	r3, [pc, #228]	; (8004488 <xTaskResumeAll+0x114>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	4a37      	ldr	r2, [pc, #220]	; (8004488 <xTaskResumeAll+0x114>)
 80043aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ac:	4b36      	ldr	r3, [pc, #216]	; (8004488 <xTaskResumeAll+0x114>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d161      	bne.n	8004478 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <xTaskResumeAll+0x118>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05d      	beq.n	8004478 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043bc:	e02e      	b.n	800441c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80043be:	4b34      	ldr	r3, [pc, #208]	; (8004490 <xTaskResumeAll+0x11c>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3318      	adds	r3, #24
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fc46 	bl	8003c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fc41 	bl	8003c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	2201      	movs	r2, #1
 80043e0:	409a      	lsls	r2, r3
 80043e2:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <xTaskResumeAll+0x120>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <xTaskResumeAll+0x120>)
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4a27      	ldr	r2, [pc, #156]	; (8004498 <xTaskResumeAll+0x124>)
 80043fa:	441a      	add	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7ff fbcf 	bl	8003ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4b23      	ldr	r3, [pc, #140]	; (800449c <xTaskResumeAll+0x128>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <xTaskResumeAll+0x12c>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <xTaskResumeAll+0x11c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1cc      	bne.n	80043be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800442a:	f000 fa31 	bl	8004890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800442e:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <xTaskResumeAll+0x130>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800443a:	f000 f845 	bl	80044c8 <xTaskIncrementTick>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004444:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <xTaskResumeAll+0x12c>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3b01      	subs	r3, #1
 800444e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f1      	bne.n	800443a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <xTaskResumeAll+0x130>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <xTaskResumeAll+0x12c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004464:	2301      	movs	r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <xTaskResumeAll+0x134>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004478:	f000 fbac 	bl	8004bd4 <vPortExitCritical>

	return xAlreadyYielded;
 800447c:	68bb      	ldr	r3, [r7, #8]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2000042c 	.word	0x2000042c
 800448c:	20000404 	.word	0x20000404
 8004490:	200003c4 	.word	0x200003c4
 8004494:	2000040c 	.word	0x2000040c
 8004498:	20000308 	.word	0x20000308
 800449c:	20000304 	.word	0x20000304
 80044a0:	20000418 	.word	0x20000418
 80044a4:	20000414 	.word	0x20000414
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <xTaskGetTickCount+0x18>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044b8:	687b      	ldr	r3, [r7, #4]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	20000408 	.word	0x20000408

080044c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d2:	4b50      	ldr	r3, [pc, #320]	; (8004614 <xTaskIncrementTick+0x14c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 808c 	bne.w	80045f4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044dc:	4b4e      	ldr	r3, [pc, #312]	; (8004618 <xTaskIncrementTick+0x150>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044e4:	4a4c      	ldr	r2, [pc, #304]	; (8004618 <xTaskIncrementTick+0x150>)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11f      	bne.n	8004530 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80044f0:	4b4a      	ldr	r3, [pc, #296]	; (800461c <xTaskIncrementTick+0x154>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <xTaskIncrementTick+0x46>
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	e7fe      	b.n	800450c <xTaskIncrementTick+0x44>
 800450e:	4b43      	ldr	r3, [pc, #268]	; (800461c <xTaskIncrementTick+0x154>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	4b42      	ldr	r3, [pc, #264]	; (8004620 <xTaskIncrementTick+0x158>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a40      	ldr	r2, [pc, #256]	; (800461c <xTaskIncrementTick+0x154>)
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4a40      	ldr	r2, [pc, #256]	; (8004620 <xTaskIncrementTick+0x158>)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b40      	ldr	r3, [pc, #256]	; (8004624 <xTaskIncrementTick+0x15c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	4a3e      	ldr	r2, [pc, #248]	; (8004624 <xTaskIncrementTick+0x15c>)
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	f000 f9b0 	bl	8004890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004530:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <xTaskIncrementTick+0x160>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	429a      	cmp	r2, r3
 8004538:	d34d      	bcc.n	80045d6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800453a:	4b38      	ldr	r3, [pc, #224]	; (800461c <xTaskIncrementTick+0x154>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <xTaskIncrementTick+0x80>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <xTaskIncrementTick+0x82>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <xTaskIncrementTick+0x160>)
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	601a      	str	r2, [r3, #0]
					break;
 8004556:	e03e      	b.n	80045d6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <xTaskIncrementTick+0x154>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d203      	bcs.n	8004578 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <xTaskIncrementTick+0x160>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6013      	str	r3, [r2, #0]
						break;
 8004576:	e02e      	b.n	80045d6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fb6d 	bl	8003c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3318      	adds	r3, #24
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fb64 	bl	8003c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <xTaskIncrementTick+0x164>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	4a22      	ldr	r2, [pc, #136]	; (800462c <xTaskIncrementTick+0x164>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <xTaskIncrementTick+0x168>)
 80045b4:	441a      	add	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7ff faf2 	bl	8003ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <xTaskIncrementTick+0x16c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d3b4      	bcc.n	800453a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d4:	e7b1      	b.n	800453a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045d6:	4b17      	ldr	r3, [pc, #92]	; (8004634 <xTaskIncrementTick+0x16c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	4914      	ldr	r1, [pc, #80]	; (8004630 <xTaskIncrementTick+0x168>)
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d907      	bls.n	80045fe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80045ee:	2301      	movs	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e004      	b.n	80045fe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045f4:	4b10      	ldr	r3, [pc, #64]	; (8004638 <xTaskIncrementTick+0x170>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	4a0f      	ldr	r2, [pc, #60]	; (8004638 <xTaskIncrementTick+0x170>)
 80045fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <xTaskIncrementTick+0x174>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004606:	2301      	movs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800460a:	697b      	ldr	r3, [r7, #20]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	2000042c 	.word	0x2000042c
 8004618:	20000408 	.word	0x20000408
 800461c:	200003bc 	.word	0x200003bc
 8004620:	200003c0 	.word	0x200003c0
 8004624:	2000041c 	.word	0x2000041c
 8004628:	20000424 	.word	0x20000424
 800462c:	2000040c 	.word	0x2000040c
 8004630:	20000308 	.word	0x20000308
 8004634:	20000304 	.word	0x20000304
 8004638:	20000414 	.word	0x20000414
 800463c:	20000418 	.word	0x20000418

08004640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <vTaskSwitchContext+0xd0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800464e:	4b31      	ldr	r3, [pc, #196]	; (8004714 <vTaskSwitchContext+0xd4>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004654:	e057      	b.n	8004706 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8004656:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <vTaskSwitchContext+0xd4>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800465c:	f7fb fd86 	bl	800016c <getRunTimeCounterValue>
 8004660:	4602      	mov	r2, r0
 8004662:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <vTaskSwitchContext+0xd8>)
 8004664:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004666:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <vTaskSwitchContext+0xd8>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b2c      	ldr	r3, [pc, #176]	; (800471c <vTaskSwitchContext+0xdc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d909      	bls.n	8004686 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004672:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <vTaskSwitchContext+0xe0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004678:	4a27      	ldr	r2, [pc, #156]	; (8004718 <vTaskSwitchContext+0xd8>)
 800467a:	6810      	ldr	r0, [r2, #0]
 800467c:	4a27      	ldr	r2, [pc, #156]	; (800471c <vTaskSwitchContext+0xdc>)
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	1a82      	subs	r2, r0, r2
 8004682:	440a      	add	r2, r1
 8004684:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <vTaskSwitchContext+0xd8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a24      	ldr	r2, [pc, #144]	; (800471c <vTaskSwitchContext+0xdc>)
 800468c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800468e:	4b25      	ldr	r3, [pc, #148]	; (8004724 <vTaskSwitchContext+0xe4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800469c:	7afb      	ldrb	r3, [r7, #11]
 800469e:	f1c3 031f 	rsb	r3, r3, #31
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	4920      	ldr	r1, [pc, #128]	; (8004728 <vTaskSwitchContext+0xe8>)
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <vTaskSwitchContext+0x8c>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	e7fe      	b.n	80046ca <vTaskSwitchContext+0x8a>
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4a14      	ldr	r2, [pc, #80]	; (8004728 <vTaskSwitchContext+0xe8>)
 80046d8:	4413      	add	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3308      	adds	r3, #8
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d104      	bne.n	80046fc <vTaskSwitchContext+0xbc>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	4a07      	ldr	r2, [pc, #28]	; (8004720 <vTaskSwitchContext+0xe0>)
 8004704:	6013      	str	r3, [r2, #0]
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	2000042c 	.word	0x2000042c
 8004714:	20000418 	.word	0x20000418
 8004718:	20000434 	.word	0x20000434
 800471c:	20000430 	.word	0x20000430
 8004720:	20000304 	.word	0x20000304
 8004724:	2000040c 	.word	0x2000040c
 8004728:	20000308 	.word	0x20000308

0800472c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004734:	f000 f852 	bl	80047dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <prvIdleTask+0x28>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d9f9      	bls.n	8004734 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <prvIdleTask+0x2c>)
 8004742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004750:	e7f0      	b.n	8004734 <prvIdleTask+0x8>
 8004752:	bf00      	nop
 8004754:	20000308 	.word	0x20000308
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	e00c      	b.n	8004782 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4a12      	ldr	r2, [pc, #72]	; (80047bc <prvInitialiseTaskLists+0x60>)
 8004774:	4413      	add	r3, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff f9ea 	bl	8003b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3301      	adds	r3, #1
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b06      	cmp	r3, #6
 8004786:	d9ef      	bls.n	8004768 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004788:	480d      	ldr	r0, [pc, #52]	; (80047c0 <prvInitialiseTaskLists+0x64>)
 800478a:	f7ff f9e1 	bl	8003b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800478e:	480d      	ldr	r0, [pc, #52]	; (80047c4 <prvInitialiseTaskLists+0x68>)
 8004790:	f7ff f9de 	bl	8003b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004794:	480c      	ldr	r0, [pc, #48]	; (80047c8 <prvInitialiseTaskLists+0x6c>)
 8004796:	f7ff f9db 	bl	8003b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800479a:	480c      	ldr	r0, [pc, #48]	; (80047cc <prvInitialiseTaskLists+0x70>)
 800479c:	f7ff f9d8 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047a0:	480b      	ldr	r0, [pc, #44]	; (80047d0 <prvInitialiseTaskLists+0x74>)
 80047a2:	f7ff f9d5 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <prvInitialiseTaskLists+0x78>)
 80047a8:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <prvInitialiseTaskLists+0x64>)
 80047aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <prvInitialiseTaskLists+0x7c>)
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <prvInitialiseTaskLists+0x68>)
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000308 	.word	0x20000308
 80047c0:	20000394 	.word	0x20000394
 80047c4:	200003a8 	.word	0x200003a8
 80047c8:	200003c4 	.word	0x200003c4
 80047cc:	200003d8 	.word	0x200003d8
 80047d0:	200003f0 	.word	0x200003f0
 80047d4:	200003bc 	.word	0x200003bc
 80047d8:	200003c0 	.word	0x200003c0

080047dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047e2:	e019      	b.n	8004818 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047e4:	f000 f9c8 	bl	8004b78 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <prvCheckTasksWaitingTermination+0x4c>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fa31 	bl	8003c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <prvCheckTasksWaitingTermination+0x50>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3b01      	subs	r3, #1
 8004800:	4a0a      	ldr	r2, [pc, #40]	; (800482c <prvCheckTasksWaitingTermination+0x50>)
 8004802:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <prvCheckTasksWaitingTermination+0x54>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3b01      	subs	r3, #1
 800480a:	4a09      	ldr	r2, [pc, #36]	; (8004830 <prvCheckTasksWaitingTermination+0x54>)
 800480c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800480e:	f000 f9e1 	bl	8004bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f80e 	bl	8004834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <prvCheckTasksWaitingTermination+0x54>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e1      	bne.n	80047e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	200003d8 	.word	0x200003d8
 800482c:	20000404 	.word	0x20000404
 8004830:	200003ec 	.word	0x200003ec

08004834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fb10 	bl	8004e70 <vPortFree>
				vPortFree( pxTCB );
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb0d 	bl	8004e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004856:	e017      	b.n	8004888 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800485e:	2b01      	cmp	r3, #1
 8004860:	d103      	bne.n	800486a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fb04 	bl	8004e70 <vPortFree>
	}
 8004868:	e00e      	b.n	8004888 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004870:	2b02      	cmp	r3, #2
 8004872:	d009      	beq.n	8004888 <prvDeleteTCB+0x54>
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e7fe      	b.n	8004886 <prvDeleteTCB+0x52>
	}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004896:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <prvResetNextTaskUnblockTime+0x40>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <prvResetNextTaskUnblockTime+0x14>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <prvResetNextTaskUnblockTime+0x16>
 80048a4:	2300      	movs	r3, #0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <prvResetNextTaskUnblockTime+0x44>)
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048b2:	e008      	b.n	80048c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <prvResetNextTaskUnblockTime+0x40>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <prvResetNextTaskUnblockTime+0x44>)
 80048c4:	6013      	str	r3, [r2, #0]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	200003bc 	.word	0x200003bc
 80048d4:	20000424 	.word	0x20000424

080048d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <prvAddCurrentTaskToDelayedList+0xb0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048e8:	4b28      	ldr	r3, [pc, #160]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff f9b4 	bl	8003c5c <uxListRemove>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	2201      	movs	r2, #1
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43da      	mvns	r2, r3
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <prvAddCurrentTaskToDelayedList+0xb8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4013      	ands	r3, r2
 800490e:	4a20      	ldr	r2, [pc, #128]	; (8004990 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004910:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d10a      	bne.n	8004930 <prvAddCurrentTaskToDelayedList+0x58>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	481a      	ldr	r0, [pc, #104]	; (8004994 <prvAddCurrentTaskToDelayedList+0xbc>)
 800492a:	f7ff f93c 	bl	8003ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800492e:	e026      	b.n	800497e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004938:	4b14      	ldr	r3, [pc, #80]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	429a      	cmp	r2, r3
 8004946:	d209      	bcs.n	800495c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <prvAddCurrentTaskToDelayedList+0xc0>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7ff f949 	bl	8003bec <vListInsert>
}
 800495a:	e010      	b.n	800497e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <prvAddCurrentTaskToDelayedList+0xc4>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7ff f93f 	bl	8003bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	429a      	cmp	r2, r3
 8004976:	d202      	bcs.n	800497e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004978:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6013      	str	r3, [r2, #0]
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000408 	.word	0x20000408
 800498c:	20000304 	.word	0x20000304
 8004990:	2000040c 	.word	0x2000040c
 8004994:	200003f0 	.word	0x200003f0
 8004998:	200003c0 	.word	0x200003c0
 800499c:	200003bc 	.word	0x200003bc
 80049a0:	20000424 	.word	0x20000424

080049a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b04      	subs	r3, #4
 80049b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b04      	subs	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <pxPortInitialiseStack+0x54>)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b14      	subs	r3, #20
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b20      	subs	r3, #32
 80049ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049ec:	68fb      	ldr	r3, [r7, #12]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	080049fd 	.word	0x080049fd

080049fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <prvTaskExitError+0x4c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d009      	beq.n	8004a24 <prvTaskExitError+0x28>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e7fe      	b.n	8004a22 <prvTaskExitError+0x26>
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a36:	bf00      	nop
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0fc      	beq.n	8004a38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	20000010 	.word	0x20000010
 8004a4c:	00000000 	.word	0x00000000

08004a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pxCurrentTCBConst2>)
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a5a:	f380 8809 	msr	PSP, r0
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8811 	msr	BASEPRI, r0
 8004a6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a6e:	4770      	bx	lr

08004a70 <pxCurrentTCBConst2>:
 8004a70:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a78:	4806      	ldr	r0, [pc, #24]	; (8004a94 <prvPortStartFirstTask+0x1c>)
 8004a7a:	6800      	ldr	r0, [r0, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f380 8808 	msr	MSP, r0
 8004a82:	b662      	cpsie	i
 8004a84:	b661      	cpsie	f
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	df00      	svc	0
 8004a90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a92:	bf00      	nop
 8004a94:	e000ed08 	.word	0xe000ed08

08004a98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a9e:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <xPortStartScheduler+0xcc>)
 8004aa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	22ff      	movs	r2, #255	; 0xff
 8004aae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <xPortStartScheduler+0xd0>)
 8004ac4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ac6:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004ac8:	2207      	movs	r2, #7
 8004aca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004acc:	e009      	b.n	8004ae2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004ace:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004ad6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b80      	cmp	r3, #128	; 0x80
 8004aec:	d0ef      	beq.n	8004ace <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aee:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1c3 0307 	rsb	r3, r3, #7
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d009      	beq.n	8004b0e <xPortStartScheduler+0x76>
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	e7fe      	b.n	8004b0c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b20:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <xPortStartScheduler+0xd4>)
 8004b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b2c:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <xPortStartScheduler+0xd8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0f      	ldr	r2, [pc, #60]	; (8004b70 <xPortStartScheduler+0xd8>)
 8004b32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b38:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <xPortStartScheduler+0xd8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <xPortStartScheduler+0xd8>)
 8004b3e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b44:	f000 f8b0 	bl	8004ca8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <xPortStartScheduler+0xdc>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b4e:	f7ff ff93 	bl	8004a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b52:	f7ff fd75 	bl	8004640 <vTaskSwitchContext>
	prvTaskExitError();
 8004b56:	f7ff ff51 	bl	80049fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	e000e400 	.word	0xe000e400
 8004b68:	20000438 	.word	0x20000438
 8004b6c:	2000043c 	.word	0x2000043c
 8004b70:	e000ed20 	.word	0xe000ed20
 8004b74:	20000010 	.word	0x20000010

08004b78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <vPortEnterCritical+0x54>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <vPortEnterCritical+0x54>)
 8004b98:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <vPortEnterCritical+0x54>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10e      	bne.n	8004bc0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <vPortEnterCritical+0x58>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <vPortEnterCritical+0x48>
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	e7fe      	b.n	8004bbe <vPortEnterCritical+0x46>
	}
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000010 	.word	0x20000010
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <vPortExitCritical+0x48>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <vPortExitCritical+0x22>
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	607b      	str	r3, [r7, #4]
 8004bf4:	e7fe      	b.n	8004bf4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <vPortExitCritical+0x48>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <vPortExitCritical+0x48>)
 8004bfe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <vPortExitCritical+0x48>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <vPortExitCritical+0x3e>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	20000010 	.word	0x20000010

08004c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c20:	f3ef 8009 	mrs	r0, PSP
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <pxCurrentTCBConst>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c30:	6010      	str	r0, [r2, #0]
 8004c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c3a:	f380 8811 	msr	BASEPRI, r0
 8004c3e:	f7ff fcff 	bl	8004640 <vTaskSwitchContext>
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c56:	f380 8809 	msr	PSP, r0
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	4770      	bx	lr

08004c60 <pxCurrentTCBConst>:
 8004c60:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c80:	f7ff fc22 	bl	80044c8 <xTaskIncrementTick>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <SysTick_Handler+0x3c>)
 8004c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	2300      	movs	r3, #0
 8004c94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <vPortSetupTimerInterrupt+0x30>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <vPortSetupTimerInterrupt+0x34>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <vPortSetupTimerInterrupt+0x38>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <vPortSetupTimerInterrupt+0x3c>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <vPortSetupTimerInterrupt+0x40>)
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cca:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <vPortSetupTimerInterrupt+0x30>)
 8004ccc:	2207      	movs	r2, #7
 8004cce:	601a      	str	r2, [r3, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	e000e010 	.word	0xe000e010
 8004cdc:	e000e018 	.word	0xe000e018
 8004ce0:	20000004 	.word	0x20000004
 8004ce4:	10624dd3 	.word	0x10624dd3
 8004ce8:	e000e014 	.word	0xe000e014

08004cec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cf8:	f7ff fb2e 	bl	8004358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cfc:	4b57      	ldr	r3, [pc, #348]	; (8004e5c <pvPortMalloc+0x170>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d04:	f000 f90c 	bl	8004f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d08:	4b55      	ldr	r3, [pc, #340]	; (8004e60 <pvPortMalloc+0x174>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 808c 	bne.w	8004e2e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01c      	beq.n	8004d56 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d013      	beq.n	8004d56 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f023 0307 	bic.w	r3, r3, #7
 8004d34:	3308      	adds	r3, #8
 8004d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <pvPortMalloc+0x6a>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e7fe      	b.n	8004d54 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d068      	beq.n	8004e2e <pvPortMalloc+0x142>
 8004d5c:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <pvPortMalloc+0x178>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d863      	bhi.n	8004e2e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d66:	4b40      	ldr	r3, [pc, #256]	; (8004e68 <pvPortMalloc+0x17c>)
 8004d68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <pvPortMalloc+0x17c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d70:	e004      	b.n	8004d7c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d903      	bls.n	8004d8e <pvPortMalloc+0xa2>
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f1      	bne.n	8004d72 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d8e:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <pvPortMalloc+0x170>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d04a      	beq.n	8004e2e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	4413      	add	r3, r2
 8004da0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1ad2      	subs	r2, r2, r3
 8004db2:	2308      	movs	r3, #8
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d91e      	bls.n	8004df8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <pvPortMalloc+0xf4>
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	e7fe      	b.n	8004dde <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004df2:	69b8      	ldr	r0, [r7, #24]
 8004df4:	f000 f8f6 	bl	8004fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004df8:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <pvPortMalloc+0x178>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <pvPortMalloc+0x178>)
 8004e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e06:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <pvPortMalloc+0x178>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <pvPortMalloc+0x180>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d203      	bcs.n	8004e1a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <pvPortMalloc+0x178>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <pvPortMalloc+0x180>)
 8004e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <pvPortMalloc+0x174>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e2e:	f7ff faa1 	bl	8004374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <pvPortMalloc+0x164>
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e7fe      	b.n	8004e4e <pvPortMalloc+0x162>
	return pvReturn;
 8004e50:	69fb      	ldr	r3, [r7, #28]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3728      	adds	r7, #40	; 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20003ee0 	.word	0x20003ee0
 8004e60:	20003eec 	.word	0x20003eec
 8004e64:	20003ee4 	.word	0x20003ee4
 8004e68:	20003ed8 	.word	0x20003ed8
 8004e6c:	20003ee8 	.word	0x20003ee8

08004e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d046      	beq.n	8004f10 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e82:	2308      	movs	r3, #8
 8004e84:	425b      	negs	r3, r3
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4413      	add	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <vPortFree+0xa8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <vPortFree+0x42>
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e7fe      	b.n	8004eb0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <vPortFree+0x5e>
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	e7fe      	b.n	8004ecc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <vPortFree+0xa8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d019      	beq.n	8004f10 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d115      	bne.n	8004f10 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <vPortFree+0xa8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	401a      	ands	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ef4:	f7ff fa30 	bl	8004358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <vPortFree+0xac>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	4a06      	ldr	r2, [pc, #24]	; (8004f1c <vPortFree+0xac>)
 8004f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f06:	6938      	ldr	r0, [r7, #16]
 8004f08:	f000 f86c 	bl	8004fe4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f0c:	f7ff fa32 	bl	8004374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20003eec 	.word	0x20003eec
 8004f1c:	20003ee4 	.word	0x20003ee4

08004f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f26:	f643 2398 	movw	r3, #15000	; 0x3a98
 8004f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <prvHeapInit+0xac>)
 8004f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3307      	adds	r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0307 	bic.w	r3, r3, #7
 8004f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <prvHeapInit+0xac>)
 8004f50:	4413      	add	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f58:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <prvHeapInit+0xb0>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <prvHeapInit+0xb0>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	4413      	add	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <prvHeapInit+0xb4>)
 8004f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f82:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <prvHeapInit+0xb4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <prvHeapInit+0xb4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	1ad2      	subs	r2, r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <prvHeapInit+0xb4>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <prvHeapInit+0xb8>)
 8004fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <prvHeapInit+0xbc>)
 8004fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fb8:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <prvHeapInit+0xc0>)
 8004fba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fbe:	601a      	str	r2, [r3, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000440 	.word	0x20000440
 8004fd0:	20003ed8 	.word	0x20003ed8
 8004fd4:	20003ee0 	.word	0x20003ee0
 8004fd8:	20003ee8 	.word	0x20003ee8
 8004fdc:	20003ee4 	.word	0x20003ee4
 8004fe0:	20003eec 	.word	0x20003eec

08004fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fec:	4b27      	ldr	r3, [pc, #156]	; (800508c <prvInsertBlockIntoFreeList+0xa8>)
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e002      	b.n	8004ff8 <prvInsertBlockIntoFreeList+0x14>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d8f7      	bhi.n	8004ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d108      	bne.n	8005026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	441a      	add	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d118      	bne.n	800506c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <prvInsertBlockIntoFreeList+0xac>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d00d      	beq.n	8005062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	441a      	add	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e008      	b.n	8005074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <prvInsertBlockIntoFreeList+0xac>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	e003      	b.n	8005074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	d002      	beq.n	8005082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	20003ed8 	.word	0x20003ed8
 8005090:	20003ee0 	.word	0x20003ee0

08005094 <__errno>:
 8005094:	4b01      	ldr	r3, [pc, #4]	; (800509c <__errno+0x8>)
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000014 	.word	0x20000014

080050a0 <__libc_init_array>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	2500      	movs	r5, #0
 80050a4:	4e0c      	ldr	r6, [pc, #48]	; (80050d8 <__libc_init_array+0x38>)
 80050a6:	4c0d      	ldr	r4, [pc, #52]	; (80050dc <__libc_init_array+0x3c>)
 80050a8:	1ba4      	subs	r4, r4, r6
 80050aa:	10a4      	asrs	r4, r4, #2
 80050ac:	42a5      	cmp	r5, r4
 80050ae:	d109      	bne.n	80050c4 <__libc_init_array+0x24>
 80050b0:	f000 fc4a 	bl	8005948 <_init>
 80050b4:	2500      	movs	r5, #0
 80050b6:	4e0a      	ldr	r6, [pc, #40]	; (80050e0 <__libc_init_array+0x40>)
 80050b8:	4c0a      	ldr	r4, [pc, #40]	; (80050e4 <__libc_init_array+0x44>)
 80050ba:	1ba4      	subs	r4, r4, r6
 80050bc:	10a4      	asrs	r4, r4, #2
 80050be:	42a5      	cmp	r5, r4
 80050c0:	d105      	bne.n	80050ce <__libc_init_array+0x2e>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050c8:	4798      	blx	r3
 80050ca:	3501      	adds	r5, #1
 80050cc:	e7ee      	b.n	80050ac <__libc_init_array+0xc>
 80050ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050d2:	4798      	blx	r3
 80050d4:	3501      	adds	r5, #1
 80050d6:	e7f2      	b.n	80050be <__libc_init_array+0x1e>
 80050d8:	08005a5c 	.word	0x08005a5c
 80050dc:	08005a5c 	.word	0x08005a5c
 80050e0:	08005a5c 	.word	0x08005a5c
 80050e4:	08005a60 	.word	0x08005a60

080050e8 <memcpy>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	1e43      	subs	r3, r0, #1
 80050ec:	440a      	add	r2, r1
 80050ee:	4291      	cmp	r1, r2
 80050f0:	d100      	bne.n	80050f4 <memcpy+0xc>
 80050f2:	bd10      	pop	{r4, pc}
 80050f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050fc:	e7f7      	b.n	80050ee <memcpy+0x6>

080050fe <memset>:
 80050fe:	4603      	mov	r3, r0
 8005100:	4402      	add	r2, r0
 8005102:	4293      	cmp	r3, r2
 8005104:	d100      	bne.n	8005108 <memset+0xa>
 8005106:	4770      	bx	lr
 8005108:	f803 1b01 	strb.w	r1, [r3], #1
 800510c:	e7f9      	b.n	8005102 <memset+0x4>
	...

08005110 <sniprintf>:
 8005110:	b40c      	push	{r2, r3}
 8005112:	b530      	push	{r4, r5, lr}
 8005114:	4b17      	ldr	r3, [pc, #92]	; (8005174 <sniprintf+0x64>)
 8005116:	1e0c      	subs	r4, r1, #0
 8005118:	b09d      	sub	sp, #116	; 0x74
 800511a:	681d      	ldr	r5, [r3, #0]
 800511c:	da08      	bge.n	8005130 <sniprintf+0x20>
 800511e:	238b      	movs	r3, #139	; 0x8b
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	b01d      	add	sp, #116	; 0x74
 8005128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800512c:	b002      	add	sp, #8
 800512e:	4770      	bx	lr
 8005130:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005134:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005138:	bf0c      	ite	eq
 800513a:	4623      	moveq	r3, r4
 800513c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005140:	9304      	str	r3, [sp, #16]
 8005142:	9307      	str	r3, [sp, #28]
 8005144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005148:	9002      	str	r0, [sp, #8]
 800514a:	9006      	str	r0, [sp, #24]
 800514c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005150:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005152:	ab21      	add	r3, sp, #132	; 0x84
 8005154:	a902      	add	r1, sp, #8
 8005156:	4628      	mov	r0, r5
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	f000 f867 	bl	800522c <_svfiprintf_r>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	bfbc      	itt	lt
 8005162:	238b      	movlt	r3, #139	; 0x8b
 8005164:	602b      	strlt	r3, [r5, #0]
 8005166:	2c00      	cmp	r4, #0
 8005168:	d0dd      	beq.n	8005126 <sniprintf+0x16>
 800516a:	2200      	movs	r2, #0
 800516c:	9b02      	ldr	r3, [sp, #8]
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e7d9      	b.n	8005126 <sniprintf+0x16>
 8005172:	bf00      	nop
 8005174:	20000014 	.word	0x20000014

08005178 <__ssputs_r>:
 8005178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	688e      	ldr	r6, [r1, #8]
 800517e:	4682      	mov	sl, r0
 8005180:	429e      	cmp	r6, r3
 8005182:	460c      	mov	r4, r1
 8005184:	4690      	mov	r8, r2
 8005186:	4699      	mov	r9, r3
 8005188:	d837      	bhi.n	80051fa <__ssputs_r+0x82>
 800518a:	898a      	ldrh	r2, [r1, #12]
 800518c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005190:	d031      	beq.n	80051f6 <__ssputs_r+0x7e>
 8005192:	2302      	movs	r3, #2
 8005194:	6825      	ldr	r5, [r4, #0]
 8005196:	6909      	ldr	r1, [r1, #16]
 8005198:	1a6f      	subs	r7, r5, r1
 800519a:	6965      	ldr	r5, [r4, #20]
 800519c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80051a4:	f109 0301 	add.w	r3, r9, #1
 80051a8:	443b      	add	r3, r7
 80051aa:	429d      	cmp	r5, r3
 80051ac:	bf38      	it	cc
 80051ae:	461d      	movcc	r5, r3
 80051b0:	0553      	lsls	r3, r2, #21
 80051b2:	d530      	bpl.n	8005216 <__ssputs_r+0x9e>
 80051b4:	4629      	mov	r1, r5
 80051b6:	f000 fb2d 	bl	8005814 <_malloc_r>
 80051ba:	4606      	mov	r6, r0
 80051bc:	b950      	cbnz	r0, 80051d4 <__ssputs_r+0x5c>
 80051be:	230c      	movs	r3, #12
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	f8ca 3000 	str.w	r3, [sl]
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	463a      	mov	r2, r7
 80051d6:	6921      	ldr	r1, [r4, #16]
 80051d8:	f7ff ff86 	bl	80050e8 <memcpy>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	6126      	str	r6, [r4, #16]
 80051ea:	443e      	add	r6, r7
 80051ec:	6026      	str	r6, [r4, #0]
 80051ee:	464e      	mov	r6, r9
 80051f0:	6165      	str	r5, [r4, #20]
 80051f2:	1bed      	subs	r5, r5, r7
 80051f4:	60a5      	str	r5, [r4, #8]
 80051f6:	454e      	cmp	r6, r9
 80051f8:	d900      	bls.n	80051fc <__ssputs_r+0x84>
 80051fa:	464e      	mov	r6, r9
 80051fc:	4632      	mov	r2, r6
 80051fe:	4641      	mov	r1, r8
 8005200:	6820      	ldr	r0, [r4, #0]
 8005202:	f000 faa1 	bl	8005748 <memmove>
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	2000      	movs	r0, #0
 800520a:	1b9b      	subs	r3, r3, r6
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	441e      	add	r6, r3
 8005212:	6026      	str	r6, [r4, #0]
 8005214:	e7dc      	b.n	80051d0 <__ssputs_r+0x58>
 8005216:	462a      	mov	r2, r5
 8005218:	f000 fb56 	bl	80058c8 <_realloc_r>
 800521c:	4606      	mov	r6, r0
 800521e:	2800      	cmp	r0, #0
 8005220:	d1e2      	bne.n	80051e8 <__ssputs_r+0x70>
 8005222:	6921      	ldr	r1, [r4, #16]
 8005224:	4650      	mov	r0, sl
 8005226:	f000 faa9 	bl	800577c <_free_r>
 800522a:	e7c8      	b.n	80051be <__ssputs_r+0x46>

0800522c <_svfiprintf_r>:
 800522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	461d      	mov	r5, r3
 8005232:	898b      	ldrh	r3, [r1, #12]
 8005234:	b09d      	sub	sp, #116	; 0x74
 8005236:	061f      	lsls	r7, r3, #24
 8005238:	4680      	mov	r8, r0
 800523a:	460c      	mov	r4, r1
 800523c:	4616      	mov	r6, r2
 800523e:	d50f      	bpl.n	8005260 <_svfiprintf_r+0x34>
 8005240:	690b      	ldr	r3, [r1, #16]
 8005242:	b96b      	cbnz	r3, 8005260 <_svfiprintf_r+0x34>
 8005244:	2140      	movs	r1, #64	; 0x40
 8005246:	f000 fae5 	bl	8005814 <_malloc_r>
 800524a:	6020      	str	r0, [r4, #0]
 800524c:	6120      	str	r0, [r4, #16]
 800524e:	b928      	cbnz	r0, 800525c <_svfiprintf_r+0x30>
 8005250:	230c      	movs	r3, #12
 8005252:	f8c8 3000 	str.w	r3, [r8]
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
 800525a:	e0c8      	b.n	80053ee <_svfiprintf_r+0x1c2>
 800525c:	2340      	movs	r3, #64	; 0x40
 800525e:	6163      	str	r3, [r4, #20]
 8005260:	2300      	movs	r3, #0
 8005262:	9309      	str	r3, [sp, #36]	; 0x24
 8005264:	2320      	movs	r3, #32
 8005266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800526a:	2330      	movs	r3, #48	; 0x30
 800526c:	f04f 0b01 	mov.w	fp, #1
 8005270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005274:	9503      	str	r5, [sp, #12]
 8005276:	4637      	mov	r7, r6
 8005278:	463d      	mov	r5, r7
 800527a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800527e:	b10b      	cbz	r3, 8005284 <_svfiprintf_r+0x58>
 8005280:	2b25      	cmp	r3, #37	; 0x25
 8005282:	d13e      	bne.n	8005302 <_svfiprintf_r+0xd6>
 8005284:	ebb7 0a06 	subs.w	sl, r7, r6
 8005288:	d00b      	beq.n	80052a2 <_svfiprintf_r+0x76>
 800528a:	4653      	mov	r3, sl
 800528c:	4632      	mov	r2, r6
 800528e:	4621      	mov	r1, r4
 8005290:	4640      	mov	r0, r8
 8005292:	f7ff ff71 	bl	8005178 <__ssputs_r>
 8005296:	3001      	adds	r0, #1
 8005298:	f000 80a4 	beq.w	80053e4 <_svfiprintf_r+0x1b8>
 800529c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529e:	4453      	add	r3, sl
 80052a0:	9309      	str	r3, [sp, #36]	; 0x24
 80052a2:	783b      	ldrb	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 809d 	beq.w	80053e4 <_svfiprintf_r+0x1b8>
 80052aa:	2300      	movs	r3, #0
 80052ac:	f04f 32ff 	mov.w	r2, #4294967295
 80052b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	9307      	str	r3, [sp, #28]
 80052b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052bc:	931a      	str	r3, [sp, #104]	; 0x68
 80052be:	462f      	mov	r7, r5
 80052c0:	2205      	movs	r2, #5
 80052c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80052c6:	4850      	ldr	r0, [pc, #320]	; (8005408 <_svfiprintf_r+0x1dc>)
 80052c8:	f000 fa30 	bl	800572c <memchr>
 80052cc:	9b04      	ldr	r3, [sp, #16]
 80052ce:	b9d0      	cbnz	r0, 8005306 <_svfiprintf_r+0xda>
 80052d0:	06d9      	lsls	r1, r3, #27
 80052d2:	bf44      	itt	mi
 80052d4:	2220      	movmi	r2, #32
 80052d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052da:	071a      	lsls	r2, r3, #28
 80052dc:	bf44      	itt	mi
 80052de:	222b      	movmi	r2, #43	; 0x2b
 80052e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052e4:	782a      	ldrb	r2, [r5, #0]
 80052e6:	2a2a      	cmp	r2, #42	; 0x2a
 80052e8:	d015      	beq.n	8005316 <_svfiprintf_r+0xea>
 80052ea:	462f      	mov	r7, r5
 80052ec:	2000      	movs	r0, #0
 80052ee:	250a      	movs	r5, #10
 80052f0:	9a07      	ldr	r2, [sp, #28]
 80052f2:	4639      	mov	r1, r7
 80052f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f8:	3b30      	subs	r3, #48	; 0x30
 80052fa:	2b09      	cmp	r3, #9
 80052fc:	d94d      	bls.n	800539a <_svfiprintf_r+0x16e>
 80052fe:	b1b8      	cbz	r0, 8005330 <_svfiprintf_r+0x104>
 8005300:	e00f      	b.n	8005322 <_svfiprintf_r+0xf6>
 8005302:	462f      	mov	r7, r5
 8005304:	e7b8      	b.n	8005278 <_svfiprintf_r+0x4c>
 8005306:	4a40      	ldr	r2, [pc, #256]	; (8005408 <_svfiprintf_r+0x1dc>)
 8005308:	463d      	mov	r5, r7
 800530a:	1a80      	subs	r0, r0, r2
 800530c:	fa0b f000 	lsl.w	r0, fp, r0
 8005310:	4318      	orrs	r0, r3
 8005312:	9004      	str	r0, [sp, #16]
 8005314:	e7d3      	b.n	80052be <_svfiprintf_r+0x92>
 8005316:	9a03      	ldr	r2, [sp, #12]
 8005318:	1d11      	adds	r1, r2, #4
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	9103      	str	r1, [sp, #12]
 800531e:	2a00      	cmp	r2, #0
 8005320:	db01      	blt.n	8005326 <_svfiprintf_r+0xfa>
 8005322:	9207      	str	r2, [sp, #28]
 8005324:	e004      	b.n	8005330 <_svfiprintf_r+0x104>
 8005326:	4252      	negs	r2, r2
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	9207      	str	r2, [sp, #28]
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	783b      	ldrb	r3, [r7, #0]
 8005332:	2b2e      	cmp	r3, #46	; 0x2e
 8005334:	d10c      	bne.n	8005350 <_svfiprintf_r+0x124>
 8005336:	787b      	ldrb	r3, [r7, #1]
 8005338:	2b2a      	cmp	r3, #42	; 0x2a
 800533a:	d133      	bne.n	80053a4 <_svfiprintf_r+0x178>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	3702      	adds	r7, #2
 8005340:	1d1a      	adds	r2, r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	9203      	str	r2, [sp, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	bfb8      	it	lt
 800534a:	f04f 33ff 	movlt.w	r3, #4294967295
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	4d2e      	ldr	r5, [pc, #184]	; (800540c <_svfiprintf_r+0x1e0>)
 8005352:	2203      	movs	r2, #3
 8005354:	7839      	ldrb	r1, [r7, #0]
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f9e8 	bl	800572c <memchr>
 800535c:	b138      	cbz	r0, 800536e <_svfiprintf_r+0x142>
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	1b40      	subs	r0, r0, r5
 8005362:	fa03 f000 	lsl.w	r0, r3, r0
 8005366:	9b04      	ldr	r3, [sp, #16]
 8005368:	3701      	adds	r7, #1
 800536a:	4303      	orrs	r3, r0
 800536c:	9304      	str	r3, [sp, #16]
 800536e:	7839      	ldrb	r1, [r7, #0]
 8005370:	2206      	movs	r2, #6
 8005372:	4827      	ldr	r0, [pc, #156]	; (8005410 <_svfiprintf_r+0x1e4>)
 8005374:	1c7e      	adds	r6, r7, #1
 8005376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800537a:	f000 f9d7 	bl	800572c <memchr>
 800537e:	2800      	cmp	r0, #0
 8005380:	d038      	beq.n	80053f4 <_svfiprintf_r+0x1c8>
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <_svfiprintf_r+0x1e8>)
 8005384:	bb13      	cbnz	r3, 80053cc <_svfiprintf_r+0x1a0>
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	3307      	adds	r3, #7
 800538a:	f023 0307 	bic.w	r3, r3, #7
 800538e:	3308      	adds	r3, #8
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005394:	444b      	add	r3, r9
 8005396:	9309      	str	r3, [sp, #36]	; 0x24
 8005398:	e76d      	b.n	8005276 <_svfiprintf_r+0x4a>
 800539a:	fb05 3202 	mla	r2, r5, r2, r3
 800539e:	2001      	movs	r0, #1
 80053a0:	460f      	mov	r7, r1
 80053a2:	e7a6      	b.n	80052f2 <_svfiprintf_r+0xc6>
 80053a4:	2300      	movs	r3, #0
 80053a6:	250a      	movs	r5, #10
 80053a8:	4619      	mov	r1, r3
 80053aa:	3701      	adds	r7, #1
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	4638      	mov	r0, r7
 80053b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b4:	3a30      	subs	r2, #48	; 0x30
 80053b6:	2a09      	cmp	r2, #9
 80053b8:	d903      	bls.n	80053c2 <_svfiprintf_r+0x196>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0c8      	beq.n	8005350 <_svfiprintf_r+0x124>
 80053be:	9105      	str	r1, [sp, #20]
 80053c0:	e7c6      	b.n	8005350 <_svfiprintf_r+0x124>
 80053c2:	fb05 2101 	mla	r1, r5, r1, r2
 80053c6:	2301      	movs	r3, #1
 80053c8:	4607      	mov	r7, r0
 80053ca:	e7f0      	b.n	80053ae <_svfiprintf_r+0x182>
 80053cc:	ab03      	add	r3, sp, #12
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	4622      	mov	r2, r4
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <_svfiprintf_r+0x1ec>)
 80053d4:	a904      	add	r1, sp, #16
 80053d6:	4640      	mov	r0, r8
 80053d8:	f3af 8000 	nop.w
 80053dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053e0:	4681      	mov	r9, r0
 80053e2:	d1d6      	bne.n	8005392 <_svfiprintf_r+0x166>
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	065b      	lsls	r3, r3, #25
 80053e8:	f53f af35 	bmi.w	8005256 <_svfiprintf_r+0x2a>
 80053ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ee:	b01d      	add	sp, #116	; 0x74
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	ab03      	add	r3, sp, #12
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	4622      	mov	r2, r4
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <_svfiprintf_r+0x1ec>)
 80053fc:	a904      	add	r1, sp, #16
 80053fe:	4640      	mov	r0, r8
 8005400:	f000 f882 	bl	8005508 <_printf_i>
 8005404:	e7ea      	b.n	80053dc <_svfiprintf_r+0x1b0>
 8005406:	bf00      	nop
 8005408:	08005a28 	.word	0x08005a28
 800540c:	08005a2e 	.word	0x08005a2e
 8005410:	08005a32 	.word	0x08005a32
 8005414:	00000000 	.word	0x00000000
 8005418:	08005179 	.word	0x08005179

0800541c <_printf_common>:
 800541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	4691      	mov	r9, r2
 8005422:	461f      	mov	r7, r3
 8005424:	688a      	ldr	r2, [r1, #8]
 8005426:	690b      	ldr	r3, [r1, #16]
 8005428:	4606      	mov	r6, r0
 800542a:	4293      	cmp	r3, r2
 800542c:	bfb8      	it	lt
 800542e:	4613      	movlt	r3, r2
 8005430:	f8c9 3000 	str.w	r3, [r9]
 8005434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005438:	460c      	mov	r4, r1
 800543a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800543e:	b112      	cbz	r2, 8005446 <_printf_common+0x2a>
 8005440:	3301      	adds	r3, #1
 8005442:	f8c9 3000 	str.w	r3, [r9]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	0699      	lsls	r1, r3, #26
 800544a:	bf42      	ittt	mi
 800544c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005450:	3302      	addmi	r3, #2
 8005452:	f8c9 3000 	strmi.w	r3, [r9]
 8005456:	6825      	ldr	r5, [r4, #0]
 8005458:	f015 0506 	ands.w	r5, r5, #6
 800545c:	d107      	bne.n	800546e <_printf_common+0x52>
 800545e:	f104 0a19 	add.w	sl, r4, #25
 8005462:	68e3      	ldr	r3, [r4, #12]
 8005464:	f8d9 2000 	ldr.w	r2, [r9]
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	42ab      	cmp	r3, r5
 800546c:	dc29      	bgt.n	80054c2 <_printf_common+0xa6>
 800546e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	3300      	adds	r3, #0
 8005476:	bf18      	it	ne
 8005478:	2301      	movne	r3, #1
 800547a:	0692      	lsls	r2, r2, #26
 800547c:	d42e      	bmi.n	80054dc <_printf_common+0xc0>
 800547e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005482:	4639      	mov	r1, r7
 8005484:	4630      	mov	r0, r6
 8005486:	47c0      	blx	r8
 8005488:	3001      	adds	r0, #1
 800548a:	d021      	beq.n	80054d0 <_printf_common+0xb4>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	68e5      	ldr	r5, [r4, #12]
 8005490:	f003 0306 	and.w	r3, r3, #6
 8005494:	2b04      	cmp	r3, #4
 8005496:	bf18      	it	ne
 8005498:	2500      	movne	r5, #0
 800549a:	f8d9 2000 	ldr.w	r2, [r9]
 800549e:	f04f 0900 	mov.w	r9, #0
 80054a2:	bf08      	it	eq
 80054a4:	1aad      	subeq	r5, r5, r2
 80054a6:	68a3      	ldr	r3, [r4, #8]
 80054a8:	6922      	ldr	r2, [r4, #16]
 80054aa:	bf08      	it	eq
 80054ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b0:	4293      	cmp	r3, r2
 80054b2:	bfc4      	itt	gt
 80054b4:	1a9b      	subgt	r3, r3, r2
 80054b6:	18ed      	addgt	r5, r5, r3
 80054b8:	341a      	adds	r4, #26
 80054ba:	454d      	cmp	r5, r9
 80054bc:	d11a      	bne.n	80054f4 <_printf_common+0xd8>
 80054be:	2000      	movs	r0, #0
 80054c0:	e008      	b.n	80054d4 <_printf_common+0xb8>
 80054c2:	2301      	movs	r3, #1
 80054c4:	4652      	mov	r2, sl
 80054c6:	4639      	mov	r1, r7
 80054c8:	4630      	mov	r0, r6
 80054ca:	47c0      	blx	r8
 80054cc:	3001      	adds	r0, #1
 80054ce:	d103      	bne.n	80054d8 <_printf_common+0xbc>
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d8:	3501      	adds	r5, #1
 80054da:	e7c2      	b.n	8005462 <_printf_common+0x46>
 80054dc:	2030      	movs	r0, #48	; 0x30
 80054de:	18e1      	adds	r1, r4, r3
 80054e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054ea:	4422      	add	r2, r4
 80054ec:	3302      	adds	r3, #2
 80054ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f2:	e7c4      	b.n	800547e <_printf_common+0x62>
 80054f4:	2301      	movs	r3, #1
 80054f6:	4622      	mov	r2, r4
 80054f8:	4639      	mov	r1, r7
 80054fa:	4630      	mov	r0, r6
 80054fc:	47c0      	blx	r8
 80054fe:	3001      	adds	r0, #1
 8005500:	d0e6      	beq.n	80054d0 <_printf_common+0xb4>
 8005502:	f109 0901 	add.w	r9, r9, #1
 8005506:	e7d8      	b.n	80054ba <_printf_common+0x9e>

08005508 <_printf_i>:
 8005508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800550c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005510:	460c      	mov	r4, r1
 8005512:	7e09      	ldrb	r1, [r1, #24]
 8005514:	b085      	sub	sp, #20
 8005516:	296e      	cmp	r1, #110	; 0x6e
 8005518:	4617      	mov	r7, r2
 800551a:	4606      	mov	r6, r0
 800551c:	4698      	mov	r8, r3
 800551e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005520:	f000 80b3 	beq.w	800568a <_printf_i+0x182>
 8005524:	d822      	bhi.n	800556c <_printf_i+0x64>
 8005526:	2963      	cmp	r1, #99	; 0x63
 8005528:	d036      	beq.n	8005598 <_printf_i+0x90>
 800552a:	d80a      	bhi.n	8005542 <_printf_i+0x3a>
 800552c:	2900      	cmp	r1, #0
 800552e:	f000 80b9 	beq.w	80056a4 <_printf_i+0x19c>
 8005532:	2958      	cmp	r1, #88	; 0x58
 8005534:	f000 8083 	beq.w	800563e <_printf_i+0x136>
 8005538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800553c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005540:	e032      	b.n	80055a8 <_printf_i+0xa0>
 8005542:	2964      	cmp	r1, #100	; 0x64
 8005544:	d001      	beq.n	800554a <_printf_i+0x42>
 8005546:	2969      	cmp	r1, #105	; 0x69
 8005548:	d1f6      	bne.n	8005538 <_printf_i+0x30>
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	6813      	ldr	r3, [r2, #0]
 800554e:	0605      	lsls	r5, r0, #24
 8005550:	f103 0104 	add.w	r1, r3, #4
 8005554:	d52a      	bpl.n	80055ac <_printf_i+0xa4>
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	da03      	bge.n	8005566 <_printf_i+0x5e>
 800555e:	222d      	movs	r2, #45	; 0x2d
 8005560:	425b      	negs	r3, r3
 8005562:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005566:	486f      	ldr	r0, [pc, #444]	; (8005724 <_printf_i+0x21c>)
 8005568:	220a      	movs	r2, #10
 800556a:	e039      	b.n	80055e0 <_printf_i+0xd8>
 800556c:	2973      	cmp	r1, #115	; 0x73
 800556e:	f000 809d 	beq.w	80056ac <_printf_i+0x1a4>
 8005572:	d808      	bhi.n	8005586 <_printf_i+0x7e>
 8005574:	296f      	cmp	r1, #111	; 0x6f
 8005576:	d020      	beq.n	80055ba <_printf_i+0xb2>
 8005578:	2970      	cmp	r1, #112	; 0x70
 800557a:	d1dd      	bne.n	8005538 <_printf_i+0x30>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	f043 0320 	orr.w	r3, r3, #32
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	e003      	b.n	800558e <_printf_i+0x86>
 8005586:	2975      	cmp	r1, #117	; 0x75
 8005588:	d017      	beq.n	80055ba <_printf_i+0xb2>
 800558a:	2978      	cmp	r1, #120	; 0x78
 800558c:	d1d4      	bne.n	8005538 <_printf_i+0x30>
 800558e:	2378      	movs	r3, #120	; 0x78
 8005590:	4865      	ldr	r0, [pc, #404]	; (8005728 <_printf_i+0x220>)
 8005592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005596:	e055      	b.n	8005644 <_printf_i+0x13c>
 8005598:	6813      	ldr	r3, [r2, #0]
 800559a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800559e:	1d19      	adds	r1, r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6011      	str	r1, [r2, #0]
 80055a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a8:	2301      	movs	r3, #1
 80055aa:	e08c      	b.n	80056c6 <_printf_i+0x1be>
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b2:	6011      	str	r1, [r2, #0]
 80055b4:	bf18      	it	ne
 80055b6:	b21b      	sxthne	r3, r3
 80055b8:	e7cf      	b.n	800555a <_printf_i+0x52>
 80055ba:	6813      	ldr	r3, [r2, #0]
 80055bc:	6825      	ldr	r5, [r4, #0]
 80055be:	1d18      	adds	r0, r3, #4
 80055c0:	6010      	str	r0, [r2, #0]
 80055c2:	0628      	lsls	r0, r5, #24
 80055c4:	d501      	bpl.n	80055ca <_printf_i+0xc2>
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	e002      	b.n	80055d0 <_printf_i+0xc8>
 80055ca:	0668      	lsls	r0, r5, #25
 80055cc:	d5fb      	bpl.n	80055c6 <_printf_i+0xbe>
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	296f      	cmp	r1, #111	; 0x6f
 80055d2:	bf14      	ite	ne
 80055d4:	220a      	movne	r2, #10
 80055d6:	2208      	moveq	r2, #8
 80055d8:	4852      	ldr	r0, [pc, #328]	; (8005724 <_printf_i+0x21c>)
 80055da:	2100      	movs	r1, #0
 80055dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e0:	6865      	ldr	r5, [r4, #4]
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	60a5      	str	r5, [r4, #8]
 80055e6:	f2c0 8095 	blt.w	8005714 <_printf_i+0x20c>
 80055ea:	6821      	ldr	r1, [r4, #0]
 80055ec:	f021 0104 	bic.w	r1, r1, #4
 80055f0:	6021      	str	r1, [r4, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d13d      	bne.n	8005672 <_printf_i+0x16a>
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	f040 808e 	bne.w	8005718 <_printf_i+0x210>
 80055fc:	4665      	mov	r5, ip
 80055fe:	2a08      	cmp	r2, #8
 8005600:	d10b      	bne.n	800561a <_printf_i+0x112>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	07db      	lsls	r3, r3, #31
 8005606:	d508      	bpl.n	800561a <_printf_i+0x112>
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	6862      	ldr	r2, [r4, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	bfde      	ittt	le
 8005610:	2330      	movle	r3, #48	; 0x30
 8005612:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005616:	f105 35ff 	addle.w	r5, r5, #4294967295
 800561a:	ebac 0305 	sub.w	r3, ip, r5
 800561e:	6123      	str	r3, [r4, #16]
 8005620:	f8cd 8000 	str.w	r8, [sp]
 8005624:	463b      	mov	r3, r7
 8005626:	aa03      	add	r2, sp, #12
 8005628:	4621      	mov	r1, r4
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff fef6 	bl	800541c <_printf_common>
 8005630:	3001      	adds	r0, #1
 8005632:	d14d      	bne.n	80056d0 <_printf_i+0x1c8>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	b005      	add	sp, #20
 800563a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800563e:	4839      	ldr	r0, [pc, #228]	; (8005724 <_printf_i+0x21c>)
 8005640:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005644:	6813      	ldr	r3, [r2, #0]
 8005646:	6821      	ldr	r1, [r4, #0]
 8005648:	1d1d      	adds	r5, r3, #4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6015      	str	r5, [r2, #0]
 800564e:	060a      	lsls	r2, r1, #24
 8005650:	d50b      	bpl.n	800566a <_printf_i+0x162>
 8005652:	07ca      	lsls	r2, r1, #31
 8005654:	bf44      	itt	mi
 8005656:	f041 0120 	orrmi.w	r1, r1, #32
 800565a:	6021      	strmi	r1, [r4, #0]
 800565c:	b91b      	cbnz	r3, 8005666 <_printf_i+0x15e>
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	f022 0220 	bic.w	r2, r2, #32
 8005664:	6022      	str	r2, [r4, #0]
 8005666:	2210      	movs	r2, #16
 8005668:	e7b7      	b.n	80055da <_printf_i+0xd2>
 800566a:	064d      	lsls	r5, r1, #25
 800566c:	bf48      	it	mi
 800566e:	b29b      	uxthmi	r3, r3
 8005670:	e7ef      	b.n	8005652 <_printf_i+0x14a>
 8005672:	4665      	mov	r5, ip
 8005674:	fbb3 f1f2 	udiv	r1, r3, r2
 8005678:	fb02 3311 	mls	r3, r2, r1, r3
 800567c:	5cc3      	ldrb	r3, [r0, r3]
 800567e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005682:	460b      	mov	r3, r1
 8005684:	2900      	cmp	r1, #0
 8005686:	d1f5      	bne.n	8005674 <_printf_i+0x16c>
 8005688:	e7b9      	b.n	80055fe <_printf_i+0xf6>
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	1d18      	adds	r0, r3, #4
 8005690:	6961      	ldr	r1, [r4, #20]
 8005692:	6010      	str	r0, [r2, #0]
 8005694:	0628      	lsls	r0, r5, #24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	d501      	bpl.n	800569e <_printf_i+0x196>
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	e002      	b.n	80056a4 <_printf_i+0x19c>
 800569e:	066a      	lsls	r2, r5, #25
 80056a0:	d5fb      	bpl.n	800569a <_printf_i+0x192>
 80056a2:	8019      	strh	r1, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	4665      	mov	r5, ip
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	e7b9      	b.n	8005620 <_printf_i+0x118>
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	1d19      	adds	r1, r3, #4
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	681d      	ldr	r5, [r3, #0]
 80056b4:	6862      	ldr	r2, [r4, #4]
 80056b6:	2100      	movs	r1, #0
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f837 	bl	800572c <memchr>
 80056be:	b108      	cbz	r0, 80056c4 <_printf_i+0x1bc>
 80056c0:	1b40      	subs	r0, r0, r5
 80056c2:	6060      	str	r0, [r4, #4]
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	2300      	movs	r3, #0
 80056ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ce:	e7a7      	b.n	8005620 <_printf_i+0x118>
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	462a      	mov	r2, r5
 80056d4:	4639      	mov	r1, r7
 80056d6:	4630      	mov	r0, r6
 80056d8:	47c0      	blx	r8
 80056da:	3001      	adds	r0, #1
 80056dc:	d0aa      	beq.n	8005634 <_printf_i+0x12c>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	079b      	lsls	r3, r3, #30
 80056e2:	d413      	bmi.n	800570c <_printf_i+0x204>
 80056e4:	68e0      	ldr	r0, [r4, #12]
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	4298      	cmp	r0, r3
 80056ea:	bfb8      	it	lt
 80056ec:	4618      	movlt	r0, r3
 80056ee:	e7a3      	b.n	8005638 <_printf_i+0x130>
 80056f0:	2301      	movs	r3, #1
 80056f2:	464a      	mov	r2, r9
 80056f4:	4639      	mov	r1, r7
 80056f6:	4630      	mov	r0, r6
 80056f8:	47c0      	blx	r8
 80056fa:	3001      	adds	r0, #1
 80056fc:	d09a      	beq.n	8005634 <_printf_i+0x12c>
 80056fe:	3501      	adds	r5, #1
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	9a03      	ldr	r2, [sp, #12]
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	42ab      	cmp	r3, r5
 8005708:	dcf2      	bgt.n	80056f0 <_printf_i+0x1e8>
 800570a:	e7eb      	b.n	80056e4 <_printf_i+0x1dc>
 800570c:	2500      	movs	r5, #0
 800570e:	f104 0919 	add.w	r9, r4, #25
 8005712:	e7f5      	b.n	8005700 <_printf_i+0x1f8>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ac      	bne.n	8005672 <_printf_i+0x16a>
 8005718:	7803      	ldrb	r3, [r0, #0]
 800571a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800571e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005722:	e76c      	b.n	80055fe <_printf_i+0xf6>
 8005724:	08005a39 	.word	0x08005a39
 8005728:	08005a4a 	.word	0x08005a4a

0800572c <memchr>:
 800572c:	b510      	push	{r4, lr}
 800572e:	b2c9      	uxtb	r1, r1
 8005730:	4402      	add	r2, r0
 8005732:	4290      	cmp	r0, r2
 8005734:	4603      	mov	r3, r0
 8005736:	d101      	bne.n	800573c <memchr+0x10>
 8005738:	2300      	movs	r3, #0
 800573a:	e003      	b.n	8005744 <memchr+0x18>
 800573c:	781c      	ldrb	r4, [r3, #0]
 800573e:	3001      	adds	r0, #1
 8005740:	428c      	cmp	r4, r1
 8005742:	d1f6      	bne.n	8005732 <memchr+0x6>
 8005744:	4618      	mov	r0, r3
 8005746:	bd10      	pop	{r4, pc}

08005748 <memmove>:
 8005748:	4288      	cmp	r0, r1
 800574a:	b510      	push	{r4, lr}
 800574c:	eb01 0302 	add.w	r3, r1, r2
 8005750:	d807      	bhi.n	8005762 <memmove+0x1a>
 8005752:	1e42      	subs	r2, r0, #1
 8005754:	4299      	cmp	r1, r3
 8005756:	d00a      	beq.n	800576e <memmove+0x26>
 8005758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005760:	e7f8      	b.n	8005754 <memmove+0xc>
 8005762:	4283      	cmp	r3, r0
 8005764:	d9f5      	bls.n	8005752 <memmove+0xa>
 8005766:	1881      	adds	r1, r0, r2
 8005768:	1ad2      	subs	r2, r2, r3
 800576a:	42d3      	cmn	r3, r2
 800576c:	d100      	bne.n	8005770 <memmove+0x28>
 800576e:	bd10      	pop	{r4, pc}
 8005770:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005774:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005778:	e7f7      	b.n	800576a <memmove+0x22>
	...

0800577c <_free_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4605      	mov	r5, r0
 8005780:	2900      	cmp	r1, #0
 8005782:	d043      	beq.n	800580c <_free_r+0x90>
 8005784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005788:	1f0c      	subs	r4, r1, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	bfb8      	it	lt
 800578e:	18e4      	addlt	r4, r4, r3
 8005790:	f000 f8d0 	bl	8005934 <__malloc_lock>
 8005794:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <_free_r+0x94>)
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	4610      	mov	r0, r2
 800579a:	b933      	cbnz	r3, 80057aa <_free_r+0x2e>
 800579c:	6063      	str	r3, [r4, #4]
 800579e:	6014      	str	r4, [r2, #0]
 80057a0:	4628      	mov	r0, r5
 80057a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a6:	f000 b8c6 	b.w	8005936 <__malloc_unlock>
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	d90b      	bls.n	80057c6 <_free_r+0x4a>
 80057ae:	6821      	ldr	r1, [r4, #0]
 80057b0:	1862      	adds	r2, r4, r1
 80057b2:	4293      	cmp	r3, r2
 80057b4:	bf01      	itttt	eq
 80057b6:	681a      	ldreq	r2, [r3, #0]
 80057b8:	685b      	ldreq	r3, [r3, #4]
 80057ba:	1852      	addeq	r2, r2, r1
 80057bc:	6022      	streq	r2, [r4, #0]
 80057be:	6063      	str	r3, [r4, #4]
 80057c0:	6004      	str	r4, [r0, #0]
 80057c2:	e7ed      	b.n	80057a0 <_free_r+0x24>
 80057c4:	4613      	mov	r3, r2
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	b10a      	cbz	r2, 80057ce <_free_r+0x52>
 80057ca:	42a2      	cmp	r2, r4
 80057cc:	d9fa      	bls.n	80057c4 <_free_r+0x48>
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	1858      	adds	r0, r3, r1
 80057d2:	42a0      	cmp	r0, r4
 80057d4:	d10b      	bne.n	80057ee <_free_r+0x72>
 80057d6:	6820      	ldr	r0, [r4, #0]
 80057d8:	4401      	add	r1, r0
 80057da:	1858      	adds	r0, r3, r1
 80057dc:	4282      	cmp	r2, r0
 80057de:	6019      	str	r1, [r3, #0]
 80057e0:	d1de      	bne.n	80057a0 <_free_r+0x24>
 80057e2:	6810      	ldr	r0, [r2, #0]
 80057e4:	6852      	ldr	r2, [r2, #4]
 80057e6:	4401      	add	r1, r0
 80057e8:	6019      	str	r1, [r3, #0]
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	e7d8      	b.n	80057a0 <_free_r+0x24>
 80057ee:	d902      	bls.n	80057f6 <_free_r+0x7a>
 80057f0:	230c      	movs	r3, #12
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	e7d4      	b.n	80057a0 <_free_r+0x24>
 80057f6:	6820      	ldr	r0, [r4, #0]
 80057f8:	1821      	adds	r1, r4, r0
 80057fa:	428a      	cmp	r2, r1
 80057fc:	bf01      	itttt	eq
 80057fe:	6811      	ldreq	r1, [r2, #0]
 8005800:	6852      	ldreq	r2, [r2, #4]
 8005802:	1809      	addeq	r1, r1, r0
 8005804:	6021      	streq	r1, [r4, #0]
 8005806:	6062      	str	r2, [r4, #4]
 8005808:	605c      	str	r4, [r3, #4]
 800580a:	e7c9      	b.n	80057a0 <_free_r+0x24>
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	bf00      	nop
 8005810:	20003ef0 	.word	0x20003ef0

08005814 <_malloc_r>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	1ccd      	adds	r5, r1, #3
 8005818:	f025 0503 	bic.w	r5, r5, #3
 800581c:	3508      	adds	r5, #8
 800581e:	2d0c      	cmp	r5, #12
 8005820:	bf38      	it	cc
 8005822:	250c      	movcc	r5, #12
 8005824:	2d00      	cmp	r5, #0
 8005826:	4606      	mov	r6, r0
 8005828:	db01      	blt.n	800582e <_malloc_r+0x1a>
 800582a:	42a9      	cmp	r1, r5
 800582c:	d903      	bls.n	8005836 <_malloc_r+0x22>
 800582e:	230c      	movs	r3, #12
 8005830:	6033      	str	r3, [r6, #0]
 8005832:	2000      	movs	r0, #0
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	f000 f87d 	bl	8005934 <__malloc_lock>
 800583a:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <_malloc_r+0xac>)
 800583c:	6814      	ldr	r4, [r2, #0]
 800583e:	4621      	mov	r1, r4
 8005840:	b991      	cbnz	r1, 8005868 <_malloc_r+0x54>
 8005842:	4c20      	ldr	r4, [pc, #128]	; (80058c4 <_malloc_r+0xb0>)
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	b91b      	cbnz	r3, 8005850 <_malloc_r+0x3c>
 8005848:	4630      	mov	r0, r6
 800584a:	f000 f863 	bl	8005914 <_sbrk_r>
 800584e:	6020      	str	r0, [r4, #0]
 8005850:	4629      	mov	r1, r5
 8005852:	4630      	mov	r0, r6
 8005854:	f000 f85e 	bl	8005914 <_sbrk_r>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d124      	bne.n	80058a6 <_malloc_r+0x92>
 800585c:	230c      	movs	r3, #12
 800585e:	4630      	mov	r0, r6
 8005860:	6033      	str	r3, [r6, #0]
 8005862:	f000 f868 	bl	8005936 <__malloc_unlock>
 8005866:	e7e4      	b.n	8005832 <_malloc_r+0x1e>
 8005868:	680b      	ldr	r3, [r1, #0]
 800586a:	1b5b      	subs	r3, r3, r5
 800586c:	d418      	bmi.n	80058a0 <_malloc_r+0x8c>
 800586e:	2b0b      	cmp	r3, #11
 8005870:	d90f      	bls.n	8005892 <_malloc_r+0x7e>
 8005872:	600b      	str	r3, [r1, #0]
 8005874:	18cc      	adds	r4, r1, r3
 8005876:	50cd      	str	r5, [r1, r3]
 8005878:	4630      	mov	r0, r6
 800587a:	f000 f85c 	bl	8005936 <__malloc_unlock>
 800587e:	f104 000b 	add.w	r0, r4, #11
 8005882:	1d23      	adds	r3, r4, #4
 8005884:	f020 0007 	bic.w	r0, r0, #7
 8005888:	1ac3      	subs	r3, r0, r3
 800588a:	d0d3      	beq.n	8005834 <_malloc_r+0x20>
 800588c:	425a      	negs	r2, r3
 800588e:	50e2      	str	r2, [r4, r3]
 8005890:	e7d0      	b.n	8005834 <_malloc_r+0x20>
 8005892:	684b      	ldr	r3, [r1, #4]
 8005894:	428c      	cmp	r4, r1
 8005896:	bf16      	itet	ne
 8005898:	6063      	strne	r3, [r4, #4]
 800589a:	6013      	streq	r3, [r2, #0]
 800589c:	460c      	movne	r4, r1
 800589e:	e7eb      	b.n	8005878 <_malloc_r+0x64>
 80058a0:	460c      	mov	r4, r1
 80058a2:	6849      	ldr	r1, [r1, #4]
 80058a4:	e7cc      	b.n	8005840 <_malloc_r+0x2c>
 80058a6:	1cc4      	adds	r4, r0, #3
 80058a8:	f024 0403 	bic.w	r4, r4, #3
 80058ac:	42a0      	cmp	r0, r4
 80058ae:	d005      	beq.n	80058bc <_malloc_r+0xa8>
 80058b0:	1a21      	subs	r1, r4, r0
 80058b2:	4630      	mov	r0, r6
 80058b4:	f000 f82e 	bl	8005914 <_sbrk_r>
 80058b8:	3001      	adds	r0, #1
 80058ba:	d0cf      	beq.n	800585c <_malloc_r+0x48>
 80058bc:	6025      	str	r5, [r4, #0]
 80058be:	e7db      	b.n	8005878 <_malloc_r+0x64>
 80058c0:	20003ef0 	.word	0x20003ef0
 80058c4:	20003ef4 	.word	0x20003ef4

080058c8 <_realloc_r>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	4607      	mov	r7, r0
 80058cc:	4614      	mov	r4, r2
 80058ce:	460e      	mov	r6, r1
 80058d0:	b921      	cbnz	r1, 80058dc <_realloc_r+0x14>
 80058d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058d6:	4611      	mov	r1, r2
 80058d8:	f7ff bf9c 	b.w	8005814 <_malloc_r>
 80058dc:	b922      	cbnz	r2, 80058e8 <_realloc_r+0x20>
 80058de:	f7ff ff4d 	bl	800577c <_free_r>
 80058e2:	4625      	mov	r5, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e8:	f000 f826 	bl	8005938 <_malloc_usable_size_r>
 80058ec:	42a0      	cmp	r0, r4
 80058ee:	d20f      	bcs.n	8005910 <_realloc_r+0x48>
 80058f0:	4621      	mov	r1, r4
 80058f2:	4638      	mov	r0, r7
 80058f4:	f7ff ff8e 	bl	8005814 <_malloc_r>
 80058f8:	4605      	mov	r5, r0
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0f2      	beq.n	80058e4 <_realloc_r+0x1c>
 80058fe:	4631      	mov	r1, r6
 8005900:	4622      	mov	r2, r4
 8005902:	f7ff fbf1 	bl	80050e8 <memcpy>
 8005906:	4631      	mov	r1, r6
 8005908:	4638      	mov	r0, r7
 800590a:	f7ff ff37 	bl	800577c <_free_r>
 800590e:	e7e9      	b.n	80058e4 <_realloc_r+0x1c>
 8005910:	4635      	mov	r5, r6
 8005912:	e7e7      	b.n	80058e4 <_realloc_r+0x1c>

08005914 <_sbrk_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	2300      	movs	r3, #0
 8005918:	4c05      	ldr	r4, [pc, #20]	; (8005930 <_sbrk_r+0x1c>)
 800591a:	4605      	mov	r5, r0
 800591c:	4608      	mov	r0, r1
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	f7fb fddc 	bl	80014dc <_sbrk>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_sbrk_r+0x1a>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	b103      	cbz	r3, 800592e <_sbrk_r+0x1a>
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20004028 	.word	0x20004028

08005934 <__malloc_lock>:
 8005934:	4770      	bx	lr

08005936 <__malloc_unlock>:
 8005936:	4770      	bx	lr

08005938 <_malloc_usable_size_r>:
 8005938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800593c:	1f18      	subs	r0, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	bfbc      	itt	lt
 8005942:	580b      	ldrlt	r3, [r1, r0]
 8005944:	18c0      	addlt	r0, r0, r3
 8005946:	4770      	bx	lr

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
